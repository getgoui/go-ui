// Put scss mixins here
@use 'sass:map';

// min-width media query
@mixin min-query($device) {
  @if map-has-key($breakpoints, $device) {
    @media (min-width: map-get($breakpoints, $device)) {
      @content;
    }
  } @else {
    // device is not in our map, but it might be a width value
    @media (min-width: $device) {
      @content;
    }
  }
}

// Shorthand for tablet media query
// e.g.
//   @include tablet {
//     font-size: 24px;
//   }
@mixin tablet {
  @include min-query(tablet) {
    @content;
  }
}

// Shorthand for desktop media query
// e.g.
//   @include desktop {
//     font-size: 32px;
//   }
@mixin desktop {
  @include min-query(desktop) {
    @content;
  }
}

// apply a css rule at all breakpoints with suffix of device name for the variant
@mixin responsiveVariantClass($variantName, $prop, $value) {
  &.#{$variantName} {
    #{$prop}: #{$value};
  }
  @each $device, $width in $breakpoints {
    &.#{$variantName}-#{$device} {
      @include min-query($device) {
        #{$prop}: #{$value};
      }
    }
  }
}

// shorthand for calculating multiples of base spacing
@function spacing($multiplier) {
  @return calc(var(--base-spacing) * #{$multiplier});
}

// Generate colours from color tokens css variables
@mixin go-color-scheme-light {
  @each $color-category in $color-categories {
    @for $i from 1 through $color-shades {
      $level: $i * 100;
      // define css variable for this shade
      --go-color-#{$color-category}-#{$level}: rgb(var(--go-token-#{$color-category}-#{$level}));
    }
  }
  // extreme colors
  --go-color-darkest: rgb(var(--go-token-darkest));
  --go-color-lightest: rgb(var(--go-token-lightest));
}

// reverse tokens for dark theme
@mixin go-color-scheme-dark {
  @each $color-category in $color-categories {
    @for $i from $color-shades through 1 {
      $level: $i * 100;
      $tokenLevel: ($color-shades + 1) * 100 - $level;
      // define css variable for this shade
      --go-color-#{$color-category}-#{$level}: rgb(var(--go-token-#{$color-category}-#{$tokenLevel}));
    }
  }
  // extreme colors
  --go-color-darkest: rgb(var(--go-token-lightest));
  --go-color-lightest: rgb(var(--go-token-darkest));
}

@mixin reset-btn {
  // reset button style
  background: none;
  border: none;
  text-decoration: none;
  cursor: pointer;
}

// https://gist.github.com/tobiasahlin/7a421fb9306a4f518aab
// Usage:   @include transition(width, height 0.3s ease-in-out);
// Output:  -webkit-transition(width 0.2s, height 0.3s ease-in-out);
//          transition(width 0.2s, height 0.3s ease-in-out);
//
// Pass in any number of transitions
@mixin transition($transitions...) {
  $unfoldedTransitions: ();
  @each $transition in $transitions {
    $unfoldedTransitions: append($unfoldedTransitions, unfoldTransition($transition), comma);
  }

  -webkit-transition: $unfoldedTransitions;
  transition: $unfoldedTransitions;
}

@function unfoldTransition($transition) {
  // Default values
  $property: all;
  $duration: var(--go-duration-normal);
  $easing: null; // Browser default is ease, which is what we want
  $delay: null; // Browser default is 0, which is what we want
  $defaultProperties: ($property, $duration, $easing, $delay);

  // Grab transition properties if they exist
  $unfoldedTransition: ();
  @for $i from 1 through length($defaultProperties) {
    $p: null;
    @if $i <= length($transition) {
      $p: nth($transition, $i);
    } @else {
      $p: nth($defaultProperties, $i);
    }
    $unfoldedTransition: append($unfoldedTransition, $p);
  }

  @return $unfoldedTransition;
}

// reduced motion media query
@mixin reduced-motion {
  @media (prefers-reduced-motion: reduce) {
    @content;
  }
}

@mixin focus-outline {
  outline: var(--go-focus-outline-width, 2px) solid var(--go-focus-outline-color, #000);
  outline-offset: var(--go-focus-outline-offset);
}
