{
  "timestamp": "2022-04-04T09:39:40",
  "compiler": {
    "name": "@stencil/core",
    "version": "2.14.1",
    "typescriptVersion": "4.5.4"
  },
  "components": [
    {
      "filePath": "./src/components/go-accordion/go-accordion.tsx",
      "encapsulation": "none",
      "tag": "go-accordion",
      "readme": "## go-accordion API\n",
      "docs": "",
      "docsTags": [],
      "usage": {},
      "props": [
        {
          "name": "multiple",
          "type": "boolean",
          "mutable": false,
          "attr": "multiple",
          "reflectToAttr": false,
          "docs": "If multiple `<go-accordion-item>`s can open at the same time",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": true,
          "required": false
        }
      ],
      "methods": [],
      "events": [],
      "listeners": [
        {
          "event": "opened",
          "capture": false,
          "passive": false
        }
      ],
      "styles": [
        {
          "name": "--heading-bg-color",
          "annotation": "prop",
          "docs": "Heading background colour - default: var(--go-color-background, #f5f5f5)"
        },
        {
          "name": "--heading-border-bottom",
          "annotation": "prop",
          "docs": "Bottom border applied to the heading element to better separate the heading and panel, especially useful when content is scrollable. - default: 1px solid var(--go-shadow-color, rgba(0, 0, 0, 0.2))"
        },
        {
          "name": "--heading-font-size",
          "annotation": "prop",
          "docs": "Heading font size - default: var(--go-size-0, 1rem)"
        },
        {
          "name": "--heading-font-weight",
          "annotation": "prop",
          "docs": "Heading font weight - default: 700"
        },
        {
          "name": "--heading-padding-x",
          "annotation": "prop",
          "docs": "Horizontal padding for item heading - default: 1rem"
        },
        {
          "name": "--heading-padding-y",
          "annotation": "prop",
          "docs": "Vertical padding for item heading - default: 0.5rem"
        },
        {
          "name": "--heading-text-color",
          "annotation": "prop",
          "docs": "Heading text colour - default: var(--go-color-text, #333333)"
        },
        {
          "name": "--panel-bg-color",
          "annotation": "prop",
          "docs": "Content background colour - default: var(--go-color-neutral-200)"
        },
        {
          "name": "--panel-max-height",
          "annotation": "prop",
          "docs": "Inner content max height. This values is also used for CSS animation - default: 100vh"
        },
        {
          "name": "--panel-padding-x",
          "annotation": "prop",
          "docs": "Horizontal padding for inner content - default: 2rem"
        },
        {
          "name": "--panel-padding-y",
          "annotation": "prop",
          "docs": "Vertical padding for inner content - default: 2rem"
        }
      ],
      "slots": [],
      "parts": [],
      "dependents": [],
      "dependencies": [],
      "dependencyGraph": {}
    },
    {
      "filePath": "./src/components/go-accordion/go-accordion-item.tsx",
      "encapsulation": "none",
      "tag": "go-accordion-item",
      "readme": "## go-accordion API\n",
      "docs": "",
      "docsTags": [],
      "usage": {},
      "props": [
        {
          "name": "active",
          "type": "boolean",
          "mutable": true,
          "attr": "active",
          "reflectToAttr": true,
          "docs": "If the accordion item should be opened by default",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "autoHeight",
          "type": "boolean",
          "mutable": false,
          "attr": "auto-height",
          "reflectToAttr": false,
          "docs": "If expanded height should be automatically calculated. If set, the `--go-accordion-item-body-max-height` CSS variable will be set automatically to the content height",
          "docsTags": [],
          "default": "true",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "heading",
          "type": "string",
          "mutable": false,
          "attr": "heading",
          "reflectToAttr": false,
          "docs": "Heading text.\nThis will be overwritten by `heading` slot",
          "docsTags": [],
          "default": "null",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "headingTag",
          "type": "string",
          "mutable": false,
          "attr": "heading-tag",
          "reflectToAttr": false,
          "docs": "The HTML tag to be applied to the heading text.\nThis will be overwritten by `heading` slot",
          "docsTags": [],
          "default": "'h3'",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": true,
          "required": false
        }
      ],
      "methods": [
        {
          "name": "close",
          "returns": {
            "type": "Promise<void>",
            "docs": ""
          },
          "signature": "close() => Promise<void>",
          "parameters": [],
          "docs": "Closes the accordion item",
          "docsTags": []
        },
        {
          "name": "focusOnControl",
          "returns": {
            "type": "Promise<void>",
            "docs": ""
          },
          "signature": "focusOnControl() => Promise<void>",
          "parameters": [],
          "docs": "Focus on header control",
          "docsTags": []
        },
        {
          "name": "open",
          "returns": {
            "type": "Promise<void>",
            "docs": ""
          },
          "signature": "open() => Promise<void>",
          "parameters": [],
          "docs": "Opens the accordion item.",
          "docsTags": []
        },
        {
          "name": "toggle",
          "returns": {
            "type": "Promise<void>",
            "docs": ""
          },
          "signature": "toggle() => Promise<void>",
          "parameters": [],
          "docs": "Toggle open state of accordion item",
          "docsTags": []
        }
      ],
      "events": [
        {
          "event": "closed",
          "detail": "any",
          "bubbles": true,
          "cancelable": true,
          "composed": true,
          "docs": "Emitted when accordion item has closed",
          "docsTags": []
        },
        {
          "event": "closing",
          "detail": "any",
          "bubbles": true,
          "cancelable": true,
          "composed": true,
          "docs": "Emitted when accordion item started closing",
          "docsTags": []
        },
        {
          "event": "opened",
          "detail": "any",
          "bubbles": true,
          "cancelable": true,
          "composed": true,
          "docs": "Emitted when accordion item has opened",
          "docsTags": []
        },
        {
          "event": "opening",
          "detail": "any",
          "bubbles": true,
          "cancelable": true,
          "composed": true,
          "docs": "Emitted when accordion item started opening",
          "docsTags": []
        }
      ],
      "listeners": [],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [],
      "dependencies": [],
      "dependencyGraph": {}
    },
    {
      "filePath": "./src/components/go-breadcrumb/go-breadcrumb.tsx",
      "encapsulation": "none",
      "tag": "go-breadcrumb",
      "readme": "## go-breadcrumbs API\n",
      "docs": "",
      "docsTags": [],
      "usage": {},
      "props": [
        {
          "name": "hideCurrent",
          "type": "boolean",
          "mutable": false,
          "attr": "hide-current",
          "reflectToAttr": false,
          "docs": "Hide current page (last item without url) from the breadcrumb",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "items",
          "type": "INavItem[] | string",
          "mutable": false,
          "attr": "items",
          "reflectToAttr": false,
          "docs": "list of navigation items to be displayed",
          "docsTags": [],
          "values": [
            {
              "type": "INavItem[]"
            },
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "label",
          "type": "string",
          "mutable": false,
          "attr": "label",
          "reflectToAttr": false,
          "docs": "The label for the navigation landmark. This is used by assistive technologies to identify the landmark.",
          "docsTags": [],
          "default": "'Breadcrumb'",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [],
      "events": [],
      "listeners": [],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [],
      "dependencies": [
        "go-nav-link"
      ],
      "dependencyGraph": {
        "go-breadcrumb": [
          "go-nav-link"
        ],
        "go-nav-link": [
          "go-icon"
        ]
      }
    },
    {
      "filePath": "./src/components/go-button/go-button.tsx",
      "encapsulation": "none",
      "tag": "go-button",
      "readme": "## API\n",
      "docs": "",
      "docsTags": [
        {
          "name": "slot",
          "text": "start - Use this slot to prepend content to the button."
        },
        {
          "name": "slot",
          "text": "end - Use this slot to append content to the button."
        }
      ],
      "usage": {},
      "props": [
        {
          "name": "block",
          "type": "\"all\" | \"desktop\" | \"large\" | \"mobile\" | \"tablet\"",
          "mutable": false,
          "attr": "block",
          "reflectToAttr": true,
          "docs": "If set, the button will take up the full width of its parent\nIf block=\"{breakpoint}\" is set, the button will take up the full width for the specified breakpoint. e.g. a `block=\"mobile\"` button will display full width on mobile devices.\nIf block=\"all\", the button will take full width on all devices.",
          "docsTags": [],
          "values": [
            {
              "value": "all",
              "type": "string"
            },
            {
              "value": "desktop",
              "type": "string"
            },
            {
              "value": "large",
              "type": "string"
            },
            {
              "value": "mobile",
              "type": "string"
            },
            {
              "value": "tablet",
              "type": "string"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "color",
          "type": "\"critical\" | \"primary\" | \"secondary\" | \"tertiary\"",
          "mutable": false,
          "attr": "color",
          "reflectToAttr": true,
          "docs": "Color variants",
          "docsTags": [],
          "default": "'primary'",
          "values": [
            {
              "value": "critical",
              "type": "string"
            },
            {
              "value": "primary",
              "type": "string"
            },
            {
              "value": "secondary",
              "type": "string"
            },
            {
              "value": "tertiary",
              "type": "string"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "compact",
          "type": "boolean",
          "mutable": false,
          "attr": "compact",
          "reflectToAttr": true,
          "docs": "Reduce inner gaps and outer paddings",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "disabled",
          "type": "boolean",
          "mutable": false,
          "attr": "disabled",
          "reflectToAttr": true,
          "docs": "If this button is disabled",
          "docsTags": [],
          "default": "null",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "flat",
          "type": "boolean",
          "mutable": false,
          "attr": "flat",
          "reflectToAttr": true,
          "docs": "If `flat` is set, the button will have no shadow and will be filled with the background color of the selected variant",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "href",
          "type": "string",
          "mutable": false,
          "attr": "href",
          "reflectToAttr": false,
          "docs": "If the button has an href, it will be rendered as an anchor tag",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "icon",
          "type": "boolean",
          "mutable": false,
          "attr": "icon",
          "reflectToAttr": true,
          "docs": "Circle shaped icon only button that has min size of 40px for touch devices",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "outline",
          "type": "boolean",
          "mutable": false,
          "attr": "outline",
          "reflectToAttr": true,
          "docs": "If `outline` is true, the button will have a border based on selected variant",
          "docsTags": [
            {
              "name": "see",
              "text": " `variant` property"
            }
          ],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "outlineFill",
          "type": "boolean",
          "mutable": false,
          "attr": "outline-fill",
          "reflectToAttr": true,
          "docs": "Outline style with filled background",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "round",
          "type": "boolean",
          "mutable": false,
          "attr": "round",
          "reflectToAttr": true,
          "docs": "If button should have pill-shaped corners",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "stack",
          "type": "boolean",
          "mutable": false,
          "attr": "stack",
          "reflectToAttr": true,
          "docs": "Stack elements inside the button",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "type",
          "type": "\"button\" | \"reset\" | \"submit\"",
          "mutable": false,
          "attr": "type",
          "reflectToAttr": false,
          "docs": "Html type of the button",
          "docsTags": [],
          "default": "'button'",
          "values": [
            {
              "value": "button",
              "type": "string"
            },
            {
              "value": "reset",
              "type": "string"
            },
            {
              "value": "submit",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [],
      "events": [],
      "listeners": [],
      "styles": [
        {
          "name": "--go-btn-bg-color",
          "annotation": "prop",
          "docs": "Background colour for the button. - default: transparent"
        }
      ],
      "slots": [
        {
          "name": "end",
          "docs": "Use this slot to append content to the button."
        },
        {
          "name": "start",
          "docs": "Use this slot to prepend content to the button."
        }
      ],
      "parts": [],
      "dependents": [
        "go-dialog",
        "go-nav-drawer",
        "go-search-bar"
      ],
      "dependencies": [],
      "dependencyGraph": {
        "go-dialog": [
          "go-button"
        ],
        "go-nav-drawer": [
          "go-button"
        ],
        "go-search-bar": [
          "go-button"
        ]
      }
    },
    {
      "filePath": "./src/patterns/go-button-group/go-button-group.tsx",
      "encapsulation": "none",
      "tag": "go-button-group",
      "readme": "# go-button-group\n\n\n",
      "docs": "",
      "docsTags": [],
      "usage": {},
      "props": [
        {
          "name": "block",
          "type": "\"all\" | \"desktop\" | \"large\" | \"mobile\" | \"tablet\"",
          "mutable": false,
          "attr": "block",
          "reflectToAttr": true,
          "docs": "If specified, buttons within group will be full width on smaller devices and auto-width going forward. e.g. having `block=\"tablet\"` will make all buttons in group take up full width on mobile and tablet sizes and auto-width on larger devices.",
          "docsTags": [],
          "values": [
            {
              "value": "all",
              "type": "string"
            },
            {
              "value": "desktop",
              "type": "string"
            },
            {
              "value": "large",
              "type": "string"
            },
            {
              "value": "mobile",
              "type": "string"
            },
            {
              "value": "tablet",
              "type": "string"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "connected",
          "type": "boolean",
          "mutable": false,
          "attr": "connected",
          "reflectToAttr": false,
          "docs": "No gap between buttons.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": true,
          "required": false
        }
      ],
      "methods": [],
      "events": [],
      "listeners": [],
      "styles": [
        {
          "name": "--go-button-group-gap",
          "annotation": "prop",
          "docs": "gap size between buttons inside the group - default: 1rem"
        }
      ],
      "slots": [],
      "parts": [],
      "dependents": [],
      "dependencies": [],
      "dependencyGraph": {}
    },
    {
      "filePath": "./src/components/go-card/go-card.tsx",
      "encapsulation": "none",
      "tag": "go-card",
      "readme": "## go-card API\n",
      "docs": "",
      "docsTags": [
        {
          "name": "slot",
          "text": "default - Card content"
        },
        {
          "name": "slot",
          "text": "custom-title - Slot for custom card title"
        },
        {
          "name": "slot",
          "text": "pre-title - Slot for content above the card title"
        },
        {
          "name": "slot",
          "text": "media - Slot for media markup for media card"
        },
        {
          "name": "slot",
          "text": "footer - Slot for card footer markup"
        }
      ],
      "usage": {},
      "props": [
        {
          "name": "cardSubtitle",
          "type": "string",
          "mutable": false,
          "attr": "card-subtitle",
          "reflectToAttr": false,
          "docs": "Subtitle of the card",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "cardTitle",
          "type": "string",
          "mutable": false,
          "attr": "card-title",
          "reflectToAttr": false,
          "docs": "Title of the card",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "href",
          "type": "string",
          "mutable": false,
          "attr": "href",
          "reflectToAttr": false,
          "docs": "For cards that link to destinations, one card can only link to one destination.\nNote: The link (`a` tag) will be applied to the card-title element, so if you don't have a `card-title` prop, you will need to manually add the `a` tag in one of the slots provided.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "mediaPosition",
          "type": "\"bottom\" | \"end\" | \"left\" | \"right\" | \"start\" | \"top\"",
          "mutable": false,
          "attr": "media-position",
          "reflectToAttr": false,
          "docs": "Position of featured media in the card",
          "docsTags": [],
          "default": "'top'",
          "values": [
            {
              "value": "bottom",
              "type": "string"
            },
            {
              "value": "end",
              "type": "string"
            },
            {
              "value": "left",
              "type": "string"
            },
            {
              "value": "right",
              "type": "string"
            },
            {
              "value": "start",
              "type": "string"
            },
            {
              "value": "top",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "target",
          "type": "\"_blank\" | \"_parent\" | \"_self\" | \"_top\"",
          "mutable": false,
          "attr": "target",
          "reflectToAttr": false,
          "docs": "when href is present, `target` attribute to be applied to the card link",
          "docsTags": [],
          "values": [
            {
              "value": "_blank",
              "type": "string"
            },
            {
              "value": "_parent",
              "type": "string"
            },
            {
              "value": "_self",
              "type": "string"
            },
            {
              "value": "_top",
              "type": "string"
            }
          ],
          "optional": true,
          "required": false
        }
      ],
      "methods": [],
      "events": [],
      "listeners": [],
      "styles": [
        {
          "name": "--go-card-bg",
          "annotation": "prop",
          "docs": "Background colour of card"
        },
        {
          "name": "--go-card-border-width",
          "annotation": "prop",
          "docs": "Border width for `bordered` card - default: 2px"
        },
        {
          "name": "--go-card-fg",
          "annotation": "prop",
          "docs": "Foreground (text) color for the card"
        },
        {
          "name": "--go-card-inner-gap",
          "annotation": "prop",
          "docs": "Gap size in between inner sections of card. ie. title, content, footer"
        },
        {
          "name": "--go-card-media-aspect-ratio",
          "annotation": "prop",
          "docs": "Aspect ratio for media for when media position = top|bottom"
        },
        {
          "name": "--go-card-media-basis",
          "annotation": "prop",
          "docs": "Flex basis for media position = left|right"
        },
        {
          "name": "--go-card-media-height",
          "annotation": "prop",
          "docs": "Height of media for media position = top|bottom"
        },
        {
          "name": "--go-card-media-object-position",
          "annotation": "prop",
          "docs": "[Object-position rule](https://developer.mozilla.org/en-US/docs/Web/CSS/object-position) for the media. default: center"
        },
        {
          "name": "--go-card-outer-padding",
          "annotation": "prop",
          "docs": "Outer padding of card."
        },
        {
          "name": "--go-card-radius",
          "annotation": "prop",
          "docs": "Border radius for card"
        },
        {
          "name": "--go-card-shadow",
          "annotation": "prop",
          "docs": "Card shadow"
        },
        {
          "name": "--go-card-subtitle-font-size",
          "annotation": "prop",
          "docs": "Font size of subtitle"
        },
        {
          "name": "--go-card-subtitle-font-weight",
          "annotation": "prop",
          "docs": "Font weight of subtitle"
        },
        {
          "name": "--go-card-subtitle-text-color",
          "annotation": "prop",
          "docs": "Text colour of subtitle"
        },
        {
          "name": "--go-card-title-color",
          "annotation": "prop",
          "docs": "Text colour of card title"
        },
        {
          "name": "--go-card-title-font-size",
          "annotation": "prop",
          "docs": "Font size of card title text"
        },
        {
          "name": "--go-card-title-font-weight",
          "annotation": "prop",
          "docs": "Font weight of card title text"
        }
      ],
      "slots": [
        {
          "name": "custom-title",
          "docs": "Slot for custom card title"
        },
        {
          "name": "default",
          "docs": "Card content"
        },
        {
          "name": "footer",
          "docs": "Slot for card footer markup"
        },
        {
          "name": "media",
          "docs": "Slot for media markup for media card"
        },
        {
          "name": "pre-title",
          "docs": "Slot for content above the card title"
        }
      ],
      "parts": [],
      "dependents": [],
      "dependencies": [
        "go-link"
      ],
      "dependencyGraph": {
        "go-card": [
          "go-link"
        ]
      }
    },
    {
      "filePath": "./src/components/go-dialog/go-dialog.tsx",
      "encapsulation": "none",
      "tag": "go-dialog",
      "readme": "## go-dialog API\n",
      "docs": "",
      "docsTags": [],
      "usage": {},
      "props": [
        {
          "name": "active",
          "type": "boolean",
          "mutable": true,
          "attr": "active",
          "reflectToAttr": true,
          "docs": "If this dialog is active",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "heading",
          "type": "string",
          "mutable": false,
          "attr": "heading",
          "reflectToAttr": false,
          "docs": "Heading of the overlay content",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "persistent",
          "type": "boolean",
          "mutable": false,
          "attr": "persistent",
          "reflectToAttr": false,
          "docs": "If persistent, the overlay will not be closed when the user clicks outside of it or presses the escape key.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "role",
          "type": "\"alertdialog\" | \"dialog\"",
          "mutable": false,
          "attr": "role",
          "reflectToAttr": false,
          "docs": "Accessible role of the dialog, can be dialog or alertdialog",
          "docsTags": [],
          "default": "'dialog'",
          "values": [
            {
              "value": "alertdialog",
              "type": "string"
            },
            {
              "value": "dialog",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [
        {
          "name": "close",
          "returns": {
            "type": "Promise<void>",
            "docs": ""
          },
          "signature": "close() => Promise<void>",
          "parameters": [],
          "docs": "",
          "docsTags": []
        },
        {
          "name": "open",
          "returns": {
            "type": "Promise<void>",
            "docs": ""
          },
          "signature": "open() => Promise<void>",
          "parameters": [],
          "docs": "",
          "docsTags": []
        }
      ],
      "events": [],
      "listeners": [],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [],
      "dependencies": [
        "go-overlay",
        "go-button"
      ],
      "dependencyGraph": {
        "go-dialog": [
          "go-overlay",
          "go-button"
        ]
      }
    },
    {
      "filePath": "./src/patterns/footer/go-footer.tsx",
      "encapsulation": "none",
      "tag": "go-footer",
      "readme": "## footer API\n",
      "docs": "",
      "docsTags": [],
      "usage": {},
      "props": [
        {
          "name": "dark",
          "type": "boolean",
          "mutable": false,
          "attr": "dark",
          "reflectToAttr": false,
          "docs": "Dark theme footer",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "links",
          "type": "INavItem[] | string",
          "mutable": false,
          "attr": "links",
          "reflectToAttr": false,
          "docs": "Navigation links to be displayed.",
          "docsTags": [],
          "values": [
            {
              "type": "INavItem[]"
            },
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "navCols",
          "type": "number",
          "mutable": false,
          "attr": "nav-cols",
          "reflectToAttr": false,
          "docs": "Number of navigation columns",
          "docsTags": [],
          "default": "1",
          "values": [
            {
              "type": "number"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "navColsDesktop",
          "type": "number",
          "mutable": false,
          "attr": "nav-cols-desktop",
          "reflectToAttr": false,
          "docs": "Number of navigation columns for desktop and up",
          "docsTags": [],
          "default": "4",
          "values": [
            {
              "type": "number"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "navColsTablet",
          "type": "number",
          "mutable": false,
          "attr": "nav-cols-tablet",
          "reflectToAttr": false,
          "docs": "Number of navigation columns for tablet and up",
          "docsTags": [],
          "default": "3",
          "values": [
            {
              "type": "number"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "navLabel",
          "type": "string",
          "mutable": false,
          "attr": "nav-label",
          "reflectToAttr": false,
          "docs": "Label for navigation",
          "docsTags": [],
          "default": "'Footer navigation'",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": true,
          "required": false
        }
      ],
      "methods": [],
      "events": [],
      "listeners": [],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [],
      "dependencies": [
        "go-nav-list"
      ],
      "dependencyGraph": {
        "go-footer": [
          "go-nav-list"
        ],
        "go-nav-list": [
          "go-nav-link"
        ],
        "go-nav-link": [
          "go-icon"
        ]
      }
    },
    {
      "filePath": "./src/patterns/go-gov-au-logo/go-gov-au-logo.tsx",
      "encapsulation": "none",
      "tag": "go-gov-au-logo",
      "readme": "## API\n",
      "docs": "",
      "docsTags": [
        {
          "name": "slot",
          "text": "crest - This should be where you reference the Australian Government crest img resource (on light background)."
        },
        {
          "name": "slot",
          "text": "crest-on-dark - This should be where you reference the Australian Government crest img resource (on dark background)."
        },
        {
          "name": "slot",
          "text": "co-brand - Add co-branding agency logo / elements here."
        }
      ],
      "usage": {},
      "props": [
        {
          "name": "height",
          "type": "string",
          "mutable": false,
          "attr": "height",
          "reflectToAttr": false,
          "docs": "Set height of the logo group. Slots will be scaled to this height.\nWidth is set to auto to avoid image distortion.",
          "docsTags": [],
          "default": "'3rem'",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "href",
          "type": "string",
          "mutable": false,
          "attr": "href",
          "reflectToAttr": false,
          "docs": "If href is provided, logo will be wrapped inside an anchor (`a`) tag. By default, all attributes except `class` and `style` are passed through to the anchor tag.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": true,
          "required": false
        }
      ],
      "methods": [],
      "events": [],
      "listeners": [],
      "styles": [],
      "slots": [
        {
          "name": "co-brand",
          "docs": "Add co-branding agency logo / elements here."
        },
        {
          "name": "crest",
          "docs": "This should be where you reference the Australian Government crest img resource (on light background)."
        },
        {
          "name": "crest-on-dark",
          "docs": "This should be where you reference the Australian Government crest img resource (on dark background)."
        }
      ],
      "parts": [],
      "dependents": [],
      "dependencies": [],
      "dependencyGraph": {}
    },
    {
      "filePath": "./src/patterns/header-bar/go-header-bar.tsx",
      "encapsulation": "none",
      "tag": "go-header-bar",
      "readme": "## API\n",
      "docs": "",
      "docsTags": [],
      "usage": {},
      "props": [
        {
          "name": "breakpoint",
          "type": "\"all\" | \"desktop\" | \"large\" | \"mobile\" | \"tablet\"",
          "mutable": false,
          "attr": "breakpoint",
          "reflectToAttr": false,
          "docs": "Controls at which breakpoint the mobile menu (go-nav-drawer) becomes main nav menu (go-main-nav)",
          "docsTags": [],
          "default": "'desktop'",
          "values": [
            {
              "value": "all",
              "type": "string"
            },
            {
              "value": "desktop",
              "type": "string"
            },
            {
              "value": "large",
              "type": "string"
            },
            {
              "value": "mobile",
              "type": "string"
            },
            {
              "value": "tablet",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [],
      "events": [],
      "listeners": [],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [],
      "dependencies": [],
      "dependencyGraph": {}
    },
    {
      "filePath": "./src/components/go-icon/go-icon.tsx",
      "encapsulation": "none",
      "tag": "go-icon",
      "readme": "## API\n",
      "docs": "",
      "docsTags": [],
      "usage": {},
      "props": [
        {
          "name": "color",
          "type": "string",
          "mutable": false,
          "attr": "color",
          "reflectToAttr": false,
          "docs": "Color of the icon,  supports CSS units and variables.\nDefault: `currentColor`",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "decorative",
          "type": "boolean",
          "mutable": false,
          "attr": "decorative",
          "reflectToAttr": false,
          "docs": "Mark this icon to be hidden from screen reader",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "iconSet",
          "type": "\"bx\" | \"bxl\" | \"bxs\" | \"fab\" | \"fad\" | \"fal\" | \"far\" | \"fas\" | \"material-icons\" | \"material-icons-outlined\" | \"material-icons-round\" | \"material-icons-sharp\"",
          "mutable": false,
          "attr": "icon-set",
          "reflectToAttr": true,
          "docs": "Specify the icon set being referenced.\nIcon font CSS files must be included in the page.",
          "docsTags": [],
          "default": "'material-icons'",
          "values": [
            {
              "value": "bx",
              "type": "string"
            },
            {
              "value": "bxl",
              "type": "string"
            },
            {
              "value": "bxs",
              "type": "string"
            },
            {
              "value": "fab",
              "type": "string"
            },
            {
              "value": "fad",
              "type": "string"
            },
            {
              "value": "fal",
              "type": "string"
            },
            {
              "value": "far",
              "type": "string"
            },
            {
              "value": "fas",
              "type": "string"
            },
            {
              "value": "material-icons",
              "type": "string"
            },
            {
              "value": "material-icons-outlined",
              "type": "string"
            },
            {
              "value": "material-icons-round",
              "type": "string"
            },
            {
              "value": "material-icons-sharp",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "name",
          "type": "string",
          "mutable": false,
          "attr": "name",
          "reflectToAttr": false,
          "docs": "Name of the icon",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "size",
          "type": "string",
          "mutable": false,
          "attr": "size",
          "reflectToAttr": false,
          "docs": "Size of the icon, supports CSS units and variables.\nDefault: 1.5em for material icons, 1em for other icon sets.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": true,
          "required": false
        }
      ],
      "methods": [],
      "events": [],
      "listeners": [],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [
        "go-main-nav",
        "go-nav-drawer",
        "go-nav-link"
      ],
      "dependencies": [],
      "dependencyGraph": {
        "go-main-nav": [
          "go-icon"
        ],
        "go-nav-drawer": [
          "go-icon"
        ],
        "go-nav-link": [
          "go-icon"
        ]
      }
    },
    {
      "filePath": "./src/components/go-link/go-link.tsx",
      "encapsulation": "none",
      "tag": "go-link",
      "readme": "## go-link API\n",
      "docs": "",
      "docsTags": [],
      "usage": {},
      "props": [
        {
          "name": "expandClickableArea",
          "type": "boolean",
          "mutable": false,
          "attr": "expand-clickable-area",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "href",
          "type": "string",
          "mutable": false,
          "attr": "href",
          "reflectToAttr": false,
          "docs": "The `href` of the link.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "target",
          "type": "\"_blank\" | \"_parent\" | \"_self\" | \"_top\"",
          "mutable": false,
          "attr": "target",
          "reflectToAttr": false,
          "docs": "The `target` of the link.",
          "docsTags": [],
          "values": [
            {
              "value": "_blank",
              "type": "string"
            },
            {
              "value": "_parent",
              "type": "string"
            },
            {
              "value": "_self",
              "type": "string"
            },
            {
              "value": "_top",
              "type": "string"
            }
          ],
          "optional": true,
          "required": false
        }
      ],
      "methods": [],
      "events": [],
      "listeners": [],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [
        "go-card"
      ],
      "dependencies": [],
      "dependencyGraph": {
        "go-card": [
          "go-link"
        ]
      }
    },
    {
      "filePath": "./src/components/navigation/go-main-nav/go-main-nav.tsx",
      "encapsulation": "none",
      "tag": "go-main-nav",
      "readme": "## go-main-nav API\n",
      "docs": "",
      "docsTags": [],
      "usage": {},
      "props": [
        {
          "name": "items",
          "type": "INavItem[] | string",
          "mutable": false,
          "attr": "items",
          "reflectToAttr": false,
          "docs": "Navigation items to be rendered\nif provided, slot content will not be rendered.",
          "docsTags": [],
          "values": [
            {
              "type": "INavItem[]"
            },
            {
              "type": "string"
            }
          ],
          "optional": true,
          "required": false
        }
      ],
      "methods": [
        {
          "name": "init",
          "returns": {
            "type": "Promise<void>",
            "docs": ""
          },
          "signature": "init(newItems: INavItem[] | string) => Promise<void>",
          "parameters": [],
          "docs": "Initialise the menu",
          "docsTags": [
            {
              "name": "param",
              "text": "items menu items to be rendered"
            }
          ]
        }
      ],
      "events": [
        {
          "event": "navigate",
          "detail": "any",
          "bubbles": true,
          "cancelable": true,
          "composed": true,
          "docs": "",
          "docsTags": []
        }
      ],
      "listeners": [],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [],
      "dependencies": [
        "go-icon",
        "go-nav-link"
      ],
      "dependencyGraph": {
        "go-main-nav": [
          "go-icon",
          "go-nav-link"
        ],
        "go-nav-link": [
          "go-icon"
        ]
      }
    },
    {
      "filePath": "./src/components/navigation/go-nav-drawer/go-nav-drawer.tsx",
      "encapsulation": "none",
      "tag": "go-nav-drawer",
      "readme": "## go-nav-drawer API\n",
      "docs": "",
      "docsTags": [],
      "usage": {},
      "props": [
        {
          "name": "active",
          "type": "boolean",
          "mutable": true,
          "attr": "active",
          "reflectToAttr": true,
          "docs": "",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "items",
          "type": "INavItem[] | string",
          "mutable": false,
          "attr": "items",
          "reflectToAttr": false,
          "docs": "Navigation items to be rendered",
          "docsTags": [],
          "values": [
            {
              "type": "INavItem[]"
            },
            {
              "type": "string"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "label",
          "type": "string",
          "mutable": false,
          "attr": "label",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "default": "'Menu'",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "position",
          "type": "\"left\" | \"right\"",
          "mutable": false,
          "attr": "position",
          "reflectToAttr": true,
          "docs": "Position where the navigation should appear from",
          "docsTags": [],
          "default": "'left'",
          "values": [
            {
              "value": "left",
              "type": "string"
            },
            {
              "value": "right",
              "type": "string"
            }
          ],
          "optional": true,
          "required": false
        }
      ],
      "methods": [
        {
          "name": "close",
          "returns": {
            "type": "Promise<void>",
            "docs": ""
          },
          "signature": "close() => Promise<void>",
          "parameters": [],
          "docs": "",
          "docsTags": []
        },
        {
          "name": "init",
          "returns": {
            "type": "Promise<void>",
            "docs": ""
          },
          "signature": "init(newItems: INavItem[] | string) => Promise<void>",
          "parameters": [],
          "docs": "Initialise the menu",
          "docsTags": [
            {
              "name": "param",
              "text": "items menu items to be rendered"
            }
          ]
        },
        {
          "name": "open",
          "returns": {
            "type": "Promise<void>",
            "docs": ""
          },
          "signature": "open() => Promise<void>",
          "parameters": [],
          "docs": "",
          "docsTags": []
        },
        {
          "name": "toggle",
          "returns": {
            "type": "Promise<void>",
            "docs": ""
          },
          "signature": "toggle() => Promise<void>",
          "parameters": [],
          "docs": "",
          "docsTags": []
        }
      ],
      "events": [
        {
          "event": "close",
          "detail": "void",
          "bubbles": true,
          "cancelable": true,
          "composed": true,
          "docs": "Emitted when the nav drawer is closed",
          "docsTags": []
        },
        {
          "event": "open",
          "detail": "void",
          "bubbles": true,
          "cancelable": true,
          "composed": true,
          "docs": "Emitted when the nav drawer is opened",
          "docsTags": []
        }
      ],
      "listeners": [],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [],
      "dependencies": [
        "go-button",
        "go-icon",
        "go-overlay"
      ],
      "dependencyGraph": {
        "go-nav-drawer": [
          "go-button",
          "go-icon",
          "go-overlay"
        ]
      }
    },
    {
      "filePath": "./src/components/navigation/go-nav-link/go-nav-link.tsx",
      "encapsulation": "none",
      "tag": "go-nav-link",
      "readme": "## go-nav-link API\n",
      "docs": "",
      "docsTags": [],
      "usage": {},
      "props": [
        {
          "name": "block",
          "type": "boolean",
          "mutable": false,
          "attr": "block",
          "reflectToAttr": true,
          "docs": "full width",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "item",
          "type": "INavItem",
          "mutable": false,
          "reflectToAttr": false,
          "docs": "navigation item",
          "docsTags": [],
          "values": [
            {
              "type": "INavItem"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "showArrow",
          "type": "boolean",
          "mutable": false,
          "attr": "show-arrow",
          "reflectToAttr": false,
          "docs": "show arrow at the end of the link",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [],
      "events": [
        {
          "event": "navigate",
          "detail": "any",
          "bubbles": true,
          "cancelable": true,
          "composed": true,
          "docs": "",
          "docsTags": []
        }
      ],
      "listeners": [],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [
        "go-breadcrumb",
        "go-main-nav",
        "go-nav-list",
        "go-toc"
      ],
      "dependencies": [
        "go-icon"
      ],
      "dependencyGraph": {
        "go-nav-link": [
          "go-icon"
        ],
        "go-breadcrumb": [
          "go-nav-link"
        ],
        "go-main-nav": [
          "go-nav-link"
        ],
        "go-nav-list": [
          "go-nav-link"
        ],
        "go-toc": [
          "go-nav-link"
        ]
      }
    },
    {
      "filePath": "./src/components/navigation/go-nav-list/go-nav-list.tsx",
      "encapsulation": "none",
      "tag": "go-nav-list",
      "readme": "## go-nav-list API\n",
      "docs": "",
      "docsTags": [],
      "usage": {},
      "props": [
        {
          "name": "block",
          "type": "boolean",
          "mutable": false,
          "attr": "block",
          "reflectToAttr": true,
          "docs": "Make the list full width",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "heading",
          "type": "string",
          "mutable": false,
          "attr": "heading",
          "reflectToAttr": false,
          "docs": "Heading text",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "headingItem",
          "type": "INavItem | string",
          "mutable": false,
          "attr": "heading-item",
          "reflectToAttr": false,
          "docs": "Heading navigation item",
          "docsTags": [],
          "values": [
            {
              "type": "INavItem"
            },
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "items",
          "type": "INavItem[] | string",
          "mutable": false,
          "attr": "items",
          "reflectToAttr": false,
          "docs": "list of navigation items to be displayed",
          "docsTags": [],
          "values": [
            {
              "type": "INavItem[]"
            },
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [],
      "events": [],
      "listeners": [],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [
        "go-footer"
      ],
      "dependencies": [
        "go-nav-link"
      ],
      "dependencyGraph": {
        "go-nav-list": [
          "go-nav-link"
        ],
        "go-nav-link": [
          "go-icon"
        ],
        "go-footer": [
          "go-nav-list"
        ]
      }
    },
    {
      "filePath": "./src/components/go-overlay/go-overlay.tsx",
      "encapsulation": "none",
      "tag": "go-overlay",
      "readme": "## go-overlay API\n",
      "docs": "",
      "docsTags": [],
      "usage": {},
      "props": [
        {
          "name": "active",
          "type": "boolean",
          "mutable": true,
          "attr": "active",
          "reflectToAttr": true,
          "docs": "",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "persistent",
          "type": "boolean",
          "mutable": false,
          "attr": "persistent",
          "reflectToAttr": false,
          "docs": "If persistent, the overlay will not be closed when the user clicks outside of it or presses the escape key.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [
        {
          "name": "close",
          "returns": {
            "type": "Promise<void>",
            "docs": ""
          },
          "signature": "close() => Promise<void>",
          "parameters": [],
          "docs": "",
          "docsTags": []
        },
        {
          "name": "open",
          "returns": {
            "type": "Promise<void>",
            "docs": ""
          },
          "signature": "open() => Promise<void>",
          "parameters": [],
          "docs": "",
          "docsTags": []
        }
      ],
      "events": [
        {
          "event": "overlayClose",
          "detail": "void",
          "bubbles": true,
          "cancelable": true,
          "composed": true,
          "docs": "Emitted when the overlay is closed",
          "docsTags": []
        },
        {
          "event": "overlayOpen",
          "detail": "void",
          "bubbles": true,
          "cancelable": true,
          "composed": true,
          "docs": "Emitted when the overlay is opened",
          "docsTags": []
        }
      ],
      "listeners": [],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [
        "go-dialog",
        "go-nav-drawer",
        "go-search-bar"
      ],
      "dependencies": [],
      "dependencyGraph": {
        "go-dialog": [
          "go-overlay"
        ],
        "go-nav-drawer": [
          "go-overlay"
        ],
        "go-search-bar": [
          "go-overlay"
        ]
      }
    },
    {
      "filePath": "./src/components/go-search-bar/go-search-bar.tsx",
      "encapsulation": "none",
      "tag": "go-search-bar",
      "readme": "## go-search-bar API\n",
      "docs": "",
      "docsTags": [],
      "usage": {},
      "props": [],
      "methods": [
        {
          "name": "closeSearchForm",
          "returns": {
            "type": "Promise<void>",
            "docs": ""
          },
          "signature": "closeSearchForm() => Promise<void>",
          "parameters": [],
          "docs": "",
          "docsTags": []
        },
        {
          "name": "openSearchForm",
          "returns": {
            "type": "Promise<void>",
            "docs": ""
          },
          "signature": "openSearchForm() => Promise<void>",
          "parameters": [],
          "docs": "",
          "docsTags": []
        }
      ],
      "events": [],
      "listeners": [],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [],
      "dependencies": [
        "go-overlay",
        "go-button"
      ],
      "dependencyGraph": {
        "go-search-bar": [
          "go-overlay",
          "go-button"
        ]
      }
    },
    {
      "filePath": "./src/components/go-skip-link/go-skip-link.tsx",
      "encapsulation": "none",
      "tag": "go-skip-link",
      "readme": "## go-skip-link API\n",
      "docs": "",
      "docsTags": [],
      "usage": {},
      "props": [
        {
          "name": "target",
          "type": "string",
          "mutable": false,
          "attr": "target",
          "reflectToAttr": false,
          "docs": "Tell skip link which element to focus (supports any query selector)",
          "docsTags": [],
          "default": "'main'",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": true,
          "required": false
        }
      ],
      "methods": [],
      "events": [],
      "listeners": [],
      "styles": [
        {
          "name": "--skip-link-bg-color",
          "annotation": "prop",
          "docs": "Background color for the skip link focusable area - default: var(--go-color-secondary-700)"
        },
        {
          "name": "--skip-link-padding",
          "annotation": "prop",
          "docs": "Padding to apply to the skip link focusable area - default: 1rem 2rem"
        },
        {
          "name": "--skip-link-text-color",
          "annotation": "prop",
          "docs": "Text color for the skip link focusable area - default: var(--go-color-lightest)"
        }
      ],
      "slots": [],
      "parts": [],
      "dependents": [],
      "dependencies": [],
      "dependencyGraph": {}
    },
    {
      "filePath": "./src/components/go-spinner/go-spinner.tsx",
      "encapsulation": "none",
      "tag": "go-spinner",
      "readme": "## go-spinner API\n",
      "docs": "",
      "docsTags": [],
      "usage": {},
      "props": [
        {
          "name": "baseColor",
          "type": "string",
          "mutable": false,
          "attr": "base-color",
          "reflectToAttr": false,
          "docs": "Set the base color of the spinner.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "duration",
          "type": "number",
          "mutable": false,
          "attr": "duration",
          "reflectToAttr": false,
          "docs": "Set how long it should take to complete one full rotation in milliseconds.",
          "docsTags": [],
          "values": [
            {
              "type": "number"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "loading",
          "type": "boolean",
          "mutable": false,
          "attr": "loading",
          "reflectToAttr": true,
          "docs": "set the loading state",
          "docsTags": [],
          "default": "true",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "ringColor",
          "type": "string",
          "mutable": false,
          "attr": "ring-color",
          "reflectToAttr": false,
          "docs": "Set the ring color of the spinner.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "ringWidth",
          "type": "string",
          "mutable": false,
          "attr": "ring-width",
          "reflectToAttr": false,
          "docs": "Set the width of the spinner ring",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "size",
          "type": "string",
          "mutable": false,
          "attr": "size",
          "reflectToAttr": false,
          "docs": "Set the width and height of the spinner.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "stacked",
          "type": "boolean",
          "mutable": false,
          "attr": "stacked",
          "reflectToAttr": false,
          "docs": "If true, spinner and label will be stacked.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": true,
          "required": false
        }
      ],
      "methods": [],
      "events": [],
      "listeners": [],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [],
      "dependencies": [],
      "dependencyGraph": {}
    },
    {
      "filePath": "./src/components/go-tabs/go-tab.tsx",
      "encapsulation": "none",
      "tag": "go-tab",
      "readme": "## go-tabs API\n",
      "docs": "",
      "docsTags": [],
      "usage": {},
      "props": [
        {
          "name": "active",
          "type": "boolean",
          "mutable": true,
          "attr": "active",
          "reflectToAttr": false,
          "docs": "If this tab is currently active\nif multiple `go-tab` are active in the same `go-tabs`, first one is active.",
          "docsTags": [],
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "label",
          "type": "string",
          "mutable": false,
          "attr": "label",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "panelId",
          "type": "string",
          "mutable": true,
          "attr": "panel-id",
          "reflectToAttr": false,
          "docs": "id for the tab panel element\nIf not provided, a unique id will be generated.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "tabId",
          "type": "string",
          "mutable": true,
          "attr": "tab-id",
          "reflectToAttr": false,
          "docs": "`id` for the tab button element.\nIf not provided, a unique id will be generated.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": true,
          "required": false
        }
      ],
      "methods": [],
      "events": [],
      "listeners": [],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [],
      "dependencies": [],
      "dependencyGraph": {}
    },
    {
      "filePath": "./src/components/go-tabs/go-tabs.tsx",
      "encapsulation": "none",
      "tag": "go-tabs",
      "readme": "## go-tabs API\n",
      "docs": "",
      "docsTags": [],
      "usage": {},
      "props": [
        {
          "name": "manual",
          "type": "boolean",
          "mutable": false,
          "attr": "manual",
          "reflectToAttr": false,
          "docs": "By default, tabs are automatically activated and their panel is displayed when they receive focus.\nIf `manual` is true, users need to activate a tab by pressing the Enter or Space key.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "tabGroupLabel",
          "type": "string",
          "mutable": false,
          "attr": "tab-group-label",
          "reflectToAttr": false,
          "docs": "Provides a label that describes the purpose of the set of tabs.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "vertical",
          "type": "boolean",
          "mutable": false,
          "attr": "vertical",
          "reflectToAttr": false,
          "docs": "Set tabs orientation to vertical",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [],
      "events": [
        {
          "event": "tabChange",
          "detail": "ActivatedTab",
          "bubbles": true,
          "cancelable": true,
          "composed": true,
          "docs": "tab change event",
          "docsTags": [
            {
              "name": "param",
              "text": "ActivatedTab , tabEl, panelEl}"
            }
          ]
        }
      ],
      "listeners": [],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [],
      "dependencies": [],
      "dependencyGraph": {}
    },
    {
      "filePath": "./src/components/go-toc/go-toc.tsx",
      "encapsulation": "none",
      "tag": "go-toc",
      "readme": "## go-toc API\n",
      "docs": "",
      "docsTags": [],
      "usage": {},
      "props": [
        {
          "name": "label",
          "type": "string",
          "mutable": false,
          "attr": "label",
          "reflectToAttr": false,
          "docs": "Label for the TOC",
          "docsTags": [],
          "default": "'On this page'",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "scope",
          "type": "string",
          "mutable": false,
          "attr": "scope",
          "reflectToAttr": false,
          "docs": "Specify the scope to get TOC items from",
          "docsTags": [],
          "default": "'main'",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "selector",
          "type": "string",
          "mutable": false,
          "attr": "selector",
          "reflectToAttr": false,
          "docs": "Selector for the TOC items",
          "docsTags": [],
          "default": "'h2'",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [],
      "events": [],
      "listeners": [],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [],
      "dependencies": [
        "go-nav-link"
      ],
      "dependencyGraph": {
        "go-toc": [
          "go-nav-link"
        ],
        "go-nav-link": [
          "go-icon"
        ]
      }
    }
  ]
}