/* eslint-disable */
/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */
import { HTMLStencilElement, JSXBase } from "@stencil/core/internal";
import { BannerVariants, Breakpoints, ColorVariants, GoChangeEventDetail, INavItem } from "./interfaces";
import { ChipVariants } from "./interfaces/variants";
import { TocProps } from "./components/go-toc/go-toc";
import { SidebarPosition } from "./patterns/go-content-layout/go-content-layout";
import { Theme } from "./components/go-dark-mode/go-dark-mode";
import { DuetDatePickerProps } from "./components/form/go-datepicker/duet-date-picker";
import { BoxiconVariants, FontAwesomeVariants, MaterialIconVariants } from "./components/go-icon/go-icon";
import { Options } from "markdown-it";
import { FieldValue, GoChangeEventDetail as GoChangeEventDetail1, SelectOption } from "./interfaces/index";
import { ActiveTab, ActiveTabWithPanel, JustifyOption, TabIconPosition, TabItem } from "./components/go-tabs/tabs.type";
export { BannerVariants, Breakpoints, ColorVariants, GoChangeEventDetail, INavItem } from "./interfaces";
export { ChipVariants } from "./interfaces/variants";
export { TocProps } from "./components/go-toc/go-toc";
export { SidebarPosition } from "./patterns/go-content-layout/go-content-layout";
export { Theme } from "./components/go-dark-mode/go-dark-mode";
export { DuetDatePickerProps } from "./components/form/go-datepicker/duet-date-picker";
export { BoxiconVariants, FontAwesomeVariants, MaterialIconVariants } from "./components/go-icon/go-icon";
export { Options } from "markdown-it";
export { FieldValue, GoChangeEventDetail as GoChangeEventDetail1, SelectOption } from "./interfaces/index";
export { ActiveTab, ActiveTabWithPanel, JustifyOption, TabIconPosition, TabItem } from "./components/go-tabs/tabs.type";
export namespace Components {
    interface GoAccordion {
        /**
          * If true, multiple `<go-accordion-item>`s can be opened at the same time
         */
        "multiple"?: boolean;
    }
    interface GoAccordionItem {
        /**
          * If the accordion item should be opened by default
         */
        "active"?: boolean;
        /**
          * If expanded height should be automatically calculated. If true, the `--go-accordion-item-body-max-height` CSS variable will be set automatically to the content height
         */
        "autoHeight"?: boolean;
        /**
          * Closes the accordion item
         */
        "close": () => Promise<void>;
        /**
          * Focus on header control
         */
        "focusOnControl": () => Promise<void>;
        /**
          * Heading text. This can be overwritten by `heading` slot
         */
        "heading"?: string;
        /**
          * The HTML tag to be applied to the heading text. This can be overwritten by `heading` slot
         */
        "headingTag"?: string;
        /**
          * Opens the accordion item.
         */
        "open": () => Promise<void>;
        /**
          * Toggle open state of accordion item
         */
        "toggle": () => Promise<void>;
    }
    interface GoBadge {
        /**
          * Number to be displayed on the badge
         */
        "count": number;
        /**
          * If true, the badge will be displayed only as a dot, no number will be shown
         */
        "dotOnly"?: boolean;
        /**
          * Provide a meaningful label for the badge
         */
        "label"?: string;
        /**
          * maximum number displayable on the badge, if count is greater than max, `{max}+` is displayed
         */
        "max": number;
        /**
          * minimum number displayable on the badge, if count is less than min, the badge will not be displayed
         */
        "min": number;
    }
    interface GoBanner {
        /**
          * If the banner can be dismissed, a close button will be rendered
         */
        "dismissible"?: boolean;
        /**
          * Heading of banner
         */
        "heading"?: string;
        /**
          * Type of banner
         */
        "variant": BannerVariants;
    }
    interface GoBlockquote {
        /**
          * A URL that designates a source document or message for the information quoted. This attribute is intended to point to information explaining the context or the reference for the quote. See also: [MDN docs](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/blockquote#attr-cite)
         */
        "citeUrl"?: string;
        "hideQuoteMark"?: boolean;
    }
    interface GoBreadcrumbs {
        /**
          * Hide current page (last item without url) from the breadcrumbs
         */
        "hideCurrent": boolean;
        /**
          * list of navigation items to be displayed
         */
        "items": INavItem[] | string;
        /**
          * The label for the navigation landmark. This is used by assistive technologies to identify the landmark.
         */
        "label": string;
    }
    interface GoButton {
        /**
          * If set, the button will take up the full width of its parent If block="{breakpoint}" is set, the button will take up the full width for the specified breakpoint. e.g. a `block="mobile"` button will display full width on mobile devices. If block="all", the button will take full width on all devices.
         */
        "block"?: Breakpoints;
        /**
          * Reduce inner gaps and outer paddings
         */
        "compact"?: boolean;
        /**
          * If this button is disabled
         */
        "disabled"?: boolean;
        /**
          * If `flat` is set, the button will have no shadow and will be filled with the background color of the selected variant
         */
        "flat"?: boolean;
        /**
          * If the button has an href, it will be rendered as an anchor tag
         */
        "href"?: string;
        /**
          * Circle shaped icon only button that has min size of 40px for touch devices
         */
        "icon"?: boolean;
        /**
          * If the button is loading
         */
        "loading": boolean;
        /**
          * Screen reader announcement for loading state
         */
        "loadingAnouncement"?: string;
        /**
          * If `outline` is true, the button will have a border based on selected variant
          * @see  `variant` property
         */
        "outline"?: boolean;
        /**
          * Outline style with filled background
         */
        "outlineFill"?: boolean;
        /**
          * If button should have pill-shaped corners
         */
        "round"?: boolean;
        /**
          * Stack elements inside the button
         */
        "stack"?: boolean;
        /**
          * Html type of the button
         */
        "type": 'submit' | 'reset' | 'button';
        /**
          * Button variants
         */
        "variant"?: ColorVariants | 'text';
    }
    interface GoButtonGroup {
        /**
          * If specified, buttons within group will be full width on smaller devices and auto-width going forward. e.g. having `block="tablet"` will make all buttons in group take up full width on mobile and tablet sizes and auto-width on larger devices.
         */
        "block"?: Breakpoints;
        /**
          * No gap between buttons.
         */
        "connected"?: boolean;
    }
    interface GoCalloutSection {
        /**
          * Description text
         */
        "description": string;
        /**
          * Heading text
         */
        "heading": string;
        /**
          * HTML tag to use for heading
         */
        "headingTag": string;
        /**
          * Alt text of image (default '' which marks the image decorative)
         */
        "imgAlt": string;
        /**
          * Image position, possible values are `start` and `end`
         */
        "imgPos"?: 'start' | 'end';
        /**
          * Url of image
         */
        "imgSrc": string;
    }
    interface GoCard {
        /**
          * Show border on card
         */
        "border": boolean;
        /**
          * Flat card without box-shadow
         */
        "flat": boolean;
        /**
          * Heading of the card
         */
        "heading"?: string;
        /**
          * For cards that link to destinations, one card can only link to one destination. Note: The link (`a` tag) will be applied to the heading, so if you don't have a `card-heading` prop, you will need to manually add the `a` tag in one of the slots provided.
         */
        "href"?: string;
        /**
          * Position of featured media in the card
         */
        "mediaPosition"?: | 'top'
    | 'left'
    | 'right'
    | 'bottom'
    | 'start' // responsive top left
    | 'end';
        /**
          * Sub heading of the card
         */
        "subHeading"?: string;
        /**
          * when href is present, `target` attribute to be applied to the card link
         */
        "target"?: '_blank' | '_self' | '_parent' | '_top';
    }
    interface GoCardRow {
        /**
          * Number of columns from mobile breakpoint and up
         */
        "cols": number;
        /**
          * Number of columns from desktop breakpoint and up
         */
        "colsDesktop": number;
        /**
          * Number of columns from large breakpoint and up
         */
        "colsLarge": number;
        /**
          * Number of columns from tablet breakpoint and up
         */
        "colsTablet": number;
        /**
          * Heading for this card row section
         */
        "heading"?: string;
        "headingTag"?: string;
        /**
          * View more link href
         */
        "moreLinkHref"?: string;
        /**
          * View more link text
         */
        "moreLinkText"?: string;
        /**
          * By default, `go-card-row` stretches all cards inside to the tallest card in view, unless this property is set to true.
         */
        "noStretch": boolean;
        /**
          * If set, cards will fade in one by one with the specified delay in milliseconds when they are in the viewport. uses `IntersectionObserver`, [see browser compatibility](https://developer.mozilla.org/en-US/docs/Web/API/Intersection_Observer_API)
         */
        "stagger"?: number;
    }
    interface GoCenter {
        /**
          * If true, the text-align: center will also be applied to the container
         */
        "alignText": boolean;
        /**
          * Height of this container
         */
        "height": string;
    }
    interface GoCheckbox {
        "checked"?: boolean;
        /**
          * If the input is disabled
         */
        "disabled"?: boolean;
        /**
          * Error state of input, text provided will be shown as error message
         */
        "error"?: string;
        /**
          * DOM id for error
         */
        "errorId"?: string;
        /**
          * Hint message for the input
         */
        "hint"?: string;
        /**
          * DOM id for hint message
         */
        "hintId"?: string;
        "indeterminate"?: boolean;
        /**
          * Label of the input field
         */
        "label": string;
        /**
          * Name of the input field
         */
        "name": string;
        /**
          * Value of the input field
         */
        "value": any;
    }
    interface GoChip {
        /**
          * Make chip clickable, `chipClick` event will be emitted on click
         */
        "clickable"?: boolean;
        /**
          * Make chip dismissible, close button will be shown and `chipDismiss` event will be emitted when close button is clicked
         */
        "dismissible"?: boolean;
        /**
          * If `outline` is true, the button will have a border based on selected variant
          * @see  `variant` property
         */
        "outline"?: boolean;
        /**
          * Colour variant of the chip
         */
        "variant": ChipVariants;
    }
    interface GoContent {
    }
    interface GoContentLayout {
        "breadcrumbs"?: INavItem[] | string;
        "heroImgAlt"?: string;
        "heroImgSrc"?: string;
        "initToc": () => Promise<void>;
        "intro"?: string;
        /**
          * no hero banner
         */
        "noHero"?: boolean;
        "pageHeading": string;
        "preHeading"?: string;
        /**
          * sidebar position on desktop screens possible values are `start` and `end`
         */
        "sidebarDesktopPosition"?: SidebarPosition;
        /**
          * sidebar position on mobile screens possible values are `start` and `end`
         */
        "sidebarMobilePosition"?: SidebarPosition;
        /**
          * If sidebar should be sticky
         */
        "sidebarSticky"?: boolean;
        /**
          * If the "On this page" table of content section should be displayed
         */
        "toc"?: boolean;
        /**
          * Props to pass into the table of content ([see `go-toc` props](/docs/components/go-toc#go-toc-props))
         */
        "tocProps"?: TocProps;
    }
    interface GoDarkMode {
        /**
          * Attribute name on html element that will be used to store theme
         */
        "attribute": string;
        /**
          * get preferred theme, 1. Check user settings:    - check if localstorage has user-theme key    - if so, check if value is either light or dark,    - if so, return value    - if value is neither light or dark, continue to next step 2. Check system preference:    - check if prefers-color-scheme is dark, if so, return dark 3. default to light
         */
        "getUserPreference": () => Promise<Theme>;
        /**
          * set the current theme and change the html attribute
          * @param theme theme to set
         */
        "setTheme": (theme: Theme) => Promise<void>;
    }
    interface GoDatepicker {
        /**
          * If the input is disabled
         */
        "disabled"?: boolean;
        /**
          * Error state of input, text provided will be shown as error message
         */
        "error"?: string | boolean;
        /**
          * DOM id for error
         */
        "errorId"?: string;
        /**
          * Specify the expected date format Supported formats: https://day.js.org/docs/en/parse/string-format#list-of-all-available-parsing-tokens
         */
        "format"?: string;
        /**
          * Hint message for the input
         */
        "hint"?: string;
        /**
          * add date format into hint message
         */
        "hintFormat"?: boolean;
        /**
          * DOM id for hint message
         */
        "hintId"?: string;
        /**
          * Label of the input field
         */
        "label": string;
        /**
          * DOM id for label
         */
        "labelId"?: string;
        /**
          * Name of the input field
         */
        "name": string;
        /**
          * Duet Date Picker options https://www.npmjs.com/package/@duetds/date-picker#properties
         */
        "options"?: string | Partial<DuetDatePickerProps>;
        /**
          * Placeholder text
         */
        "placeholder"?: string;
        /**
          * DOM id for prefix
         */
        "prefixId"?: string;
        /**
          * If this input is read-only
         */
        "readonly"?: boolean;
        /**
          * DOM id for suffix
         */
        "suffixId"?: string;
        /**
          * Value of the input field
         */
        "value"?: string;
    }
    interface GoDialog {
        /**
          * If this dialog is active
         */
        "active": boolean;
        "close": () => Promise<void>;
        /**
          * Heading of the overlay content
         */
        "heading"?: string;
        /**
          * HTML tag for the heading
         */
        "headingTag"?: string;
        "open": () => Promise<void>;
        /**
          * If persistent, the overlay will not be closed when the user clicks outside of it or presses the escape key.
         */
        "persistent": boolean;
    }
    interface GoDropdown {
        /**
          * closes dropdown
         */
        "close": (focusBackToTrigger?: boolean) => Promise<void>;
        /**
          * if set, dropdown cannot be opened
         */
        "disabled"?: boolean;
        /**
          * If set, dropdown will take full width of its parent.
         */
        "fullWidth"?: boolean;
        "init": () => Promise<void>;
        /**
          * keep track of active state
         */
        "isActive": boolean;
        /**
          * If set, trigger click event will need to be handled manually.
         */
        "noTriggerClickHandler": boolean;
        /**
          * opens dropdown
         */
        "open": () => Promise<void>;
        /**
          * toggles dropdown
         */
        "toggle": () => Promise<void>;
        /**
          * Query selector string for the trigger element.
         */
        "triggerSelector": string;
        /**
          * Width of the dropdown, any CSS width values can be used.
         */
        "width"?: string;
    }
    interface GoDropdownItem {
        /**
          * if this item is disabled, according to the [menu pattern] https://www.w3.org/WAI/ARIA/apg/patterns/menu/#issue-container-generatedID-17 disabled menu item should be focusable but cannot be activated
         */
        "disabled"?: boolean;
        "focusInControl": () => Promise<void>;
        "focusOutControl": () => Promise<void>;
        /**
          * customise width of the dropdown item
         */
        "width"?: string;
    }
    interface GoDropdownMenu {
        "close": (focusBackToTrigger?: boolean) => Promise<void>;
        /**
          * keep track of active state
         */
        "isActive": boolean;
        /**
          * DOM id for menu
         */
        "menuId"?: string;
        /**
          * open menu
          * @param focusFirst if auto focus on first item
         */
        "open": () => Promise<void>;
        /**
          * If persistent, the dropdown will not close by itself on interaction with elements inside the menu.
         */
        "persistent"?: boolean;
        /**
          * @see [go-dropdown](go-dropdown#props)
         */
        "triggerSelector": string;
        /**
          * customise width of dropdown menu
         */
        "width"?: string;
    }
    interface GoDropdownSeparator {
    }
    interface GoField {
        "controlElSelector": string;
        "controlId": string;
        /**
          * If the input is disabled
         */
        "disabled"?: boolean;
        /**
          * Error state of input, text provided will be shown as error message
         */
        "error"?: boolean | string;
        /**
          * DOM id for error
         */
        "errorId"?: string;
        /**
          * If specified, an input element with `type="hidden"` will be generated and this hiddenName prop will be used as the `name` of the hidden input  use `hiddenInputValue` prop to set the value of that field
         */
        "hiddenInputName"?: string;
        /**
          * Sets the value of the hidden input created by `hiddenInputName`
         */
        "hiddenInputValue"?: string;
        /**
          * Hint message for the input
         */
        "hint"?: string;
        /**
          * DOM id for hint message
         */
        "hintId"?: string;
        "idPrefix": string;
        /**
          * Label of the input field
         */
        "label": string;
        /**
          * DOM id for label
         */
        "labelId"?: string;
        /**
          * Name of the input field
         */
        "name": string;
        /**
          * DOM id for prefix
         */
        "prefixId"?: string;
        /**
          * If this input is read-only
         */
        "readonly"?: boolean;
        /**
          * DOM id for suffix
         */
        "suffixId"?: string;
    }
    interface GoFieldset {
        /**
          * Error state of input, text provided will be shown as error message
         */
        "error"?: boolean | string;
        /**
          * DOM id for error
         */
        "errorId"?: string;
        /**
          * Hint message for the input
         */
        "hint"?: string;
        /**
          * DOM id for hint message
         */
        "hintId"?: string;
        /**
          * Wrap direct DOM children in an unordered list so they are announced by screen readers, good for checkboxes and radio buttons
         */
        "isList"?: boolean;
        /**
          * Label of the input field
         */
        "label": string;
        /**
          * DOM id for label
         */
        "labelId"?: string;
    }
    interface GoFooter {
        /**
          * Dark theme footer
         */
        "dark"?: boolean;
        /**
          * Navigation links to be displayed.
         */
        "links": INavItem[] | string;
        /**
          * Number of navigation columns
         */
        "navCols"?: number;
        /**
          * Number of navigation columns for desktop and up
         */
        "navColsDesktop"?: number;
        /**
          * Number of navigation columns for tablet and up
         */
        "navColsTablet"?: number;
        /**
          * Label for navigation
         */
        "navLabel"?: string;
    }
    interface GoGovAuLogo {
        /**
          * Set height of the logo group. Slots will be scaled to this height. Width is set to auto to avoid image distortion.
         */
        "height": string;
        /**
          * If href is provided, logo will be wrapped inside an anchor (`a`) tag. By default, all attributes except `class` and `style` are passed through to the anchor tag.
         */
        "href"?: string;
    }
    interface GoHeaderBar {
        /**
          * Controls at which breakpoint the mobile menu (go-nav-drawer) becomes main nav menu (go-main-nav)
         */
        "breakpoint": Breakpoints;
    }
    interface GoHeadingRow {
        /**
          * Heading for this card row section
         */
        "heading"?: string;
        /**
          * HTML tag to use for heading
         */
        "headingTag"?: string;
        /**
          * View more link href
         */
        "moreLinkHref"?: string;
        /**
          * View more link text
         */
        "moreLinkText"?: string;
    }
    interface GoHero {
        /**
          * Breadcrumb navigation items
         */
        "breadcrumbs"?: INavItem[] | string;
        /**
          * Hero heading (h1)
         */
        "heading": string;
        /**
          * if we should hide hero img on mobile(`full-width-bg` slot not affected)
         */
        "hideImgOnMobile": boolean;
        /**
          * hero image alt text (requires img-src attribute to be present to render)
         */
        "imgAlt"?: string;
        /**
          * hero image src url (requires img-alt attribute to be present to render)
         */
        "imgSrc"?: string;
        /**
          * Pre heading text - use only when required
         */
        "preHeading"?: string;
    }
    interface GoIcon {
        /**
          * Color of the icon,  supports CSS units and variables. Default: `currentColor`
         */
        "color"?: string;
        /**
          * Specify the icon set being referenced. Icon font CSS files must be included in the page.
         */
        "iconSet": MaterialIconVariants | FontAwesomeVariants | BoxiconVariants;
        /**
          * provide label for screen reader
         */
        "label"?: string;
        /**
          * Name of the icon
         */
        "name": string;
        /**
          * Size of the icon, supports CSS units and variables. Default: 1.5em for material icons, 1em for other icon sets.
         */
        "size"?: string;
    }
    interface GoInput {
        /**
          * If the input is disabled
         */
        "disabled"?: boolean;
        /**
          * Error state of input, text provided will be shown as error message
         */
        "error"?: boolean | string;
        /**
          * DOM id for error
         */
        "errorId"?: string;
        /**
          * Hint message for the input
         */
        "hint"?: string;
        /**
          * DOM id for hint message
         */
        "hintId"?: string;
        /**
          * Label of the input field
         */
        "label": string;
        /**
          * DOM id for label
         */
        "labelId"?: string;
        /**
          * Name of the input field
         */
        "name": string;
        /**
          * DOM id for prefix
         */
        "prefixId"?: string;
        /**
          * If this input is read-only
         */
        "readonly"?: boolean;
        /**
          * DOM id for suffix
         */
        "suffixId"?: string;
        /**
          * Value of the input field
         */
        "value"?: string;
    }
    interface GoLink {
        "expandClickableArea"?: boolean;
        /**
          * The `href` of the link.
         */
        "href": string;
        /**
          * The `target` of the link.
         */
        "target"?: '_blank' | '_self' | '_parent' | '_top';
    }
    interface GoMainNav {
        /**
          * Initialise the menu
          * @param items menu items to be rendered
         */
        "init": (newItems: INavItem[] | string) => Promise<void>;
        /**
          * Navigation items to be rendered if provided, slot content will not be rendered.
         */
        "items"?: INavItem[] | string;
        /**
          * Label for the navigation. This helps screen reader users to quickly navigate to teh correct nav landmark
         */
        "label": string;
    }
    interface GoMd {
        /**
          * Markdown content to be rendered
         */
        "content": string;
        /**
          * Render inline markdown
         */
        "inline"?: boolean;
        /**
          * [markdown-it](https://github.com/markdown-it/markdown-it) options **Note**: if `use-go-ui` is set to true, these options will be overwritten
         */
        "mdOptions"?: Options | string;
        /**
          * If set to true, `go-md` will use [DOMPurify](https://nodei.co/npm/dompurify/) to sanitise the output HTML before inserting it into the DOM
         */
        "sanitise"?: boolean;
        /**
          * url to load remote markdown content if `src` is set, content in the `content` prop will be overwritten
         */
        "src": string;
        /**
          * Use go-ui markdown renderer: - Only `typographer` is enabled in markdown-it options  - linkify with [`go-link`](https://go-ui.com/docs/components/go-link) - [container](https://github.com/markdown-it/markdown-it-container) banners with [`go-banner`](https://go-ui.com/docs/components/go-banner)
         */
        "useGoUi"?: boolean;
    }
    interface GoNavDrawer {
        /**
          * keep track of open state of drawer
         */
        "active": boolean;
        /**
          * if true, clicking on nav item will close the drawer automatically
         */
        "autoClose": boolean;
        "close": () => Promise<void>;
        /**
          * Initialise the menu
          * @param items menu items to be rendered
         */
        "init": (newItems: INavItem[] | string) => Promise<void>;
        /**
          * Navigation items to be rendered
         */
        "items"?: INavItem[] | string;
        /**
          * label for screen readers
         */
        "label": string;
        "open": () => Promise<void>;
        /**
          * Position where the navigation should appear from
         */
        "position"?: 'left' | 'right';
        "toggle": () => Promise<void>;
    }
    interface GoNavLink {
        /**
          * full width
         */
        "block": boolean;
        /**
          * navigation item
         */
        "item": INavItem;
        /**
          * show arrow at the end of the link
         */
        "showArrow": boolean;
    }
    interface GoNavList {
        /**
          * Make the list full width
         */
        "block": boolean;
        /**
          * Make all sub lists (if any) expanded by default
         */
        "expandSubLists": boolean;
        /**
          * Heading text
         */
        "heading": string;
        /**
          * Heading navigation item
         */
        "headingItem": INavItem | string;
        /**
          * list of navigation items to be displayed uuuuuu
         */
        "items": INavItem[] | string;
    }
    interface GoOverlay {
        "active": boolean;
        "close": () => Promise<void>;
        "open": () => Promise<void>;
        /**
          * If persistent, the overlay will not be closed when the user clicks outside of it or presses the escape key.
         */
        "persistent": boolean;
    }
    interface GoProgress {
        /**
          * Set progress to indeterminate state
         */
        "indeterminate"?: boolean;
        /**
          * Descriptive label for screen readers to identify the progress bar
         */
        "label"?: string;
        /**
          * Id of the label element for the progress bar
         */
        "labelledby"?: string;
        /**
          * Total amount of work required for progress to complete
         */
        "max"?: number;
        /**
          * min value of the progress bar
         */
        "min"?: number;
        /**
          * Display percentage of completion
         */
        "showPercentage"?: boolean;
        /**
          * How much of the task that has been completed
         */
        "value"?: number;
    }
    interface GoRadio {
        "checked"?: boolean;
        /**
          * DOM id for native input control, default auto generated unique id
         */
        "controlId"?: string;
        "disabled"?: boolean;
        "error"?: string;
        /**
          * DOM id for error
         */
        "errorId"?: string;
        "hint"?: string;
        /**
          * DOM id for hint message
         */
        "hintId"?: string;
        "indeterminate"?: boolean;
        "label": string;
        "name": string;
        "value": any;
    }
    interface GoSearchBar {
        "closeSearchForm": () => Promise<void>;
        "openSearchForm": () => Promise<void>;
    }
    interface GoSelect {
        /**
          * If the input is disabled
         */
        "disabled"?: boolean;
        /**
          * Error state of input, text provided will be shown as error message
         */
        "error"?: string | boolean;
        /**
          * DOM id for error
         */
        "errorId"?: string;
        /**
          * Hint message for the input
         */
        "hint"?: string;
        /**
          * DOM id for hint message
         */
        "hintId"?: string;
        /**
          * Label of the input field
         */
        "label": string;
        /**
          * DOM id for label
         */
        "labelId"?: string;
        /**
          * Name of the input field
         */
        "name": string;
        /**
          * Array of options. Note: Sometimes frameworks may incorrectly pass the result of Array.toString() into this prop, `go-select` tries to obsorb this issue by trying to do a `split(',')` on the options prop if a string is passed in. This means the accepted formats include: 1. array of objects of type `{label: string, value: string}` 2. array of strings (e.g. ['Apple', 'Orange', 'Banana']) 3. string, toString() result of format 2 (i.e. 'Apple,Orange,Banana') 4. string, option 1 or 2 passed in as string that can be parsed by [JSON5](https://json5.org/)
         */
        "options": SelectOption[] | string[] | string;
        /**
          * If this input is read-only
         */
        "readonly"?: boolean;
        /**
          * DOM id for suffix
         */
        "suffixId"?: string;
        /**
          * Value of the input field
         */
        "value"?: FieldValue;
    }
    interface GoSkipLink {
        /**
          * Tell skip link which element to focus (supports any query selector)
         */
        "target"?: string;
    }
    interface GoSpinner {
        /**
          * Set the base color of the spinner.
         */
        "baseColor"?: string;
        /**
          * Set how long it should take to complete one full rotation in milliseconds.
         */
        "duration"?: number;
        /**
          * set the loading state
         */
        "loading": boolean;
        /**
          * screen reader announcement when loading
         */
        "loadingAnnouncement": string;
        /**
          * Set the ring color of the spinner.
         */
        "ringColor"?: string;
        /**
          * Set the width of the spinner ring
         */
        "ringWidth"?: string;
        /**
          * Set the width and height of the spinner.
         */
        "size"?: string;
        /**
          * If true, spinner and label will be stacked.
         */
        "stacked"?: boolean;
    }
    interface GoSwitch {
        /**
          * "on" label to show when `showOnOff*` is set to true
         */
        "activeLabel": string;
        "checked"?: boolean;
        /**
          * If the input is disabled
         */
        "disabled"?: boolean;
        /**
          * make this field full width
         */
        "fullWidth": boolean;
        /**
          * "off" label to show when `showOnOff*` is set to true
         */
        "inactiveLabel": string;
        /**
          * Label of the input field
         */
        "label": string;
        /**
          * Name of the input field
         */
        "name": string;
        /**
          * show on/off text in switch toggle
         */
        "showOnOff": boolean;
        /**
          * show on/off text next to the switch toggle
         */
        "showOnOffOutside": boolean;
        /**
          * Display label on top of switch
         */
        "stack": boolean;
        /**
          * Value of the input field
         */
        "value": any;
    }
    interface GoTab {
        /**
          * If this tab is currently active if multiple `go-tab` are active in the same `go-tabs`, first one is active.
         */
        "active": boolean;
        "iconPosition"?: TabIconPosition;
        /**
          * Label displayed on the tab
         */
        "label": string;
        /**
          * id for the tab panel element If not provided, a unique id will be generated.
         */
        "panelId"?: string;
        "setActive": (active: boolean) => Promise<void>;
        /**
          * `id` for the tab button element. If not provided, a unique id will be generated.
         */
        "tabId"?: string;
    }
    interface GoTableWrapper {
        /**
          * Bordered table
         */
        "bordered": boolean;
        /**
          * Hoverable rows
         */
        "hoverable": boolean;
        /**
          * Striped rows
         */
        "striped": boolean;
    }
    interface GoTablist {
        "activateTab": (tabEl: HTMLElement, setFocus?: boolean, isOnload?: boolean) => Promise<void>;
        /**
          * By default, tabs require user interaction (by clicking or pressing the `Enter` or `Space` key) to be activated. if `auto` is true, tabs are automatically activated when they receive focus.
         */
        "auto": boolean;
        /**
          * Fix tabs control to the bottom of screen
         */
        "bottom"?: boolean;
        /**
          * fill available width not applicable for vertical tabs
         */
        "fill"?: boolean;
        /**
          * tab items array
         */
        "items": TabItem[];
        /**
          * applies justify-content property to tablist ie. `justify="between"` applies `justify-content: space-between`
         */
        "justify"?: JustifyOption;
        /**
          * Provides a label that describes the purpose of the set of tabs.
         */
        "label"?: string;
        /**
          * Set tabs orientation to vertical
         */
        "vertical"?: boolean;
    }
    interface GoTabs {
        /**
          * By default, tabs require user interaction (by clicking or pressing the `Enter` or `Space` key) to be activated. if `auto` is true, tabs are automatically activated when they receive focus.
         */
        "auto"?: boolean;
        /**
          * fill available space (horizontal only)
         */
        "fill"?: boolean;
        /**
          * Applies justify-content property to tablist (horizontal only) ie. `justify="between"` applies `justify-content: space-between`
         */
        "justify"?: JustifyOption;
        /**
          * Provides a label that describes the purpose of the set of tabs.
         */
        "tabGroupLabel"?: string;
        /**
          * Set tabs orientation to vertical
         */
        "vertical"?: boolean;
    }
    interface GoTextarea {
        /**
          * If set, grow textarea based on its content
         */
        "autoGrow"?: boolean;
        /**
          * If the input is disabled
         */
        "disabled"?: boolean;
        /**
          * Error state of input, text provided will be shown as error message
         */
        "error"?: boolean | string;
        /**
          * DOM id for error
         */
        "errorId"?: string;
        /**
          * Hint message for the input
         */
        "hint"?: string;
        /**
          * DOM id for hint message
         */
        "hintId"?: string;
        /**
          * Label of the input field
         */
        "label": string;
        /**
          * DOM id for label
         */
        "labelId"?: string;
        /**
          * Name of the input field
         */
        "name": string;
        /**
          * DOM id for prefix
         */
        "prefixId"?: string;
        /**
          * If this input is read-only
         */
        "readonly"?: boolean;
        /**
          * DOM id for suffix
         */
        "suffixId"?: string;
        /**
          * Value of the input field
         */
        "value"?: string;
    }
    interface GoToTop {
        /**
          * how far from the top of the page the button should be shown (in px)
         */
        "offset": number;
    }
    interface GoToc {
        /**
          * Query the DOM and generate TOC If content in scope is dynamically loaded, it may not be available when this toc component loads. call this `init` method and have the toc regenerate the links
          * @returns void
         */
        "init": () => Promise<void>;
        /**
          * Label for the TOC
         */
        "label"?: string;
        /**
          * Custom classes to be applied to the label
         */
        "labelClass"?: string;
        /**
          * Selector for the TOC items
         */
        "selector"?: string;
    }
    interface GoTooltip {
        /**
          * Add arrow to the tooltip
         */
        "arrow": boolean;
        /**
          * hide tooltip
         */
        "hide": () => Promise<void>;
        /**
          * Improve positioning for inline trigger elements that span over multiple lines. Reference: https://floating-ui.com/docs/inline
         */
        "inline": boolean;
        /**
          * placement of tooltip relative to the trigger element
         */
        "placement": 'top' | 'bottom' | 'left' | 'right';
        /**
          * show tooltip
         */
        "show": () => Promise<void>;
        /**
          * Query selector string for the trigger element
         */
        "triggerId": string;
    }
}
export interface GoAccordionItemCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLGoAccordionItemElement;
}
export interface GoBannerCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLGoBannerElement;
}
export interface GoChipCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLGoChipElement;
}
export interface GoDarkModeCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLGoDarkModeElement;
}
export interface GoDatepickerCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLGoDatepickerElement;
}
export interface GoDropdownCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLGoDropdownElement;
}
export interface GoDropdownItemCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLGoDropdownItemElement;
}
export interface GoMainNavCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLGoMainNavElement;
}
export interface GoMdCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLGoMdElement;
}
export interface GoNavDrawerCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLGoNavDrawerElement;
}
export interface GoNavLinkCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLGoNavLinkElement;
}
export interface GoOverlayCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLGoOverlayElement;
}
export interface GoSelectCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLGoSelectElement;
}
export interface GoTablistCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLGoTablistElement;
}
export interface GoTabsCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLGoTabsElement;
}
declare global {
    interface HTMLGoAccordionElement extends Components.GoAccordion, HTMLStencilElement {
    }
    var HTMLGoAccordionElement: {
        prototype: HTMLGoAccordionElement;
        new (): HTMLGoAccordionElement;
    };
    interface HTMLGoAccordionItemElementEventMap {
        "opened": any;
        "opening": any;
        "closed": any;
        "closing": any;
    }
    interface HTMLGoAccordionItemElement extends Components.GoAccordionItem, HTMLStencilElement {
        addEventListener<K extends keyof HTMLGoAccordionItemElementEventMap>(type: K, listener: (this: HTMLGoAccordionItemElement, ev: GoAccordionItemCustomEvent<HTMLGoAccordionItemElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLGoAccordionItemElementEventMap>(type: K, listener: (this: HTMLGoAccordionItemElement, ev: GoAccordionItemCustomEvent<HTMLGoAccordionItemElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLGoAccordionItemElement: {
        prototype: HTMLGoAccordionItemElement;
        new (): HTMLGoAccordionItemElement;
    };
    interface HTMLGoBadgeElement extends Components.GoBadge, HTMLStencilElement {
    }
    var HTMLGoBadgeElement: {
        prototype: HTMLGoBadgeElement;
        new (): HTMLGoBadgeElement;
    };
    interface HTMLGoBannerElementEventMap {
        "dismissed": void;
    }
    interface HTMLGoBannerElement extends Components.GoBanner, HTMLStencilElement {
        addEventListener<K extends keyof HTMLGoBannerElementEventMap>(type: K, listener: (this: HTMLGoBannerElement, ev: GoBannerCustomEvent<HTMLGoBannerElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLGoBannerElementEventMap>(type: K, listener: (this: HTMLGoBannerElement, ev: GoBannerCustomEvent<HTMLGoBannerElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLGoBannerElement: {
        prototype: HTMLGoBannerElement;
        new (): HTMLGoBannerElement;
    };
    interface HTMLGoBlockquoteElement extends Components.GoBlockquote, HTMLStencilElement {
    }
    var HTMLGoBlockquoteElement: {
        prototype: HTMLGoBlockquoteElement;
        new (): HTMLGoBlockquoteElement;
    };
    interface HTMLGoBreadcrumbsElement extends Components.GoBreadcrumbs, HTMLStencilElement {
    }
    var HTMLGoBreadcrumbsElement: {
        prototype: HTMLGoBreadcrumbsElement;
        new (): HTMLGoBreadcrumbsElement;
    };
    interface HTMLGoButtonElement extends Components.GoButton, HTMLStencilElement {
    }
    var HTMLGoButtonElement: {
        prototype: HTMLGoButtonElement;
        new (): HTMLGoButtonElement;
    };
    interface HTMLGoButtonGroupElement extends Components.GoButtonGroup, HTMLStencilElement {
    }
    var HTMLGoButtonGroupElement: {
        prototype: HTMLGoButtonGroupElement;
        new (): HTMLGoButtonGroupElement;
    };
    interface HTMLGoCalloutSectionElement extends Components.GoCalloutSection, HTMLStencilElement {
    }
    var HTMLGoCalloutSectionElement: {
        prototype: HTMLGoCalloutSectionElement;
        new (): HTMLGoCalloutSectionElement;
    };
    interface HTMLGoCardElement extends Components.GoCard, HTMLStencilElement {
    }
    var HTMLGoCardElement: {
        prototype: HTMLGoCardElement;
        new (): HTMLGoCardElement;
    };
    interface HTMLGoCardRowElement extends Components.GoCardRow, HTMLStencilElement {
    }
    var HTMLGoCardRowElement: {
        prototype: HTMLGoCardRowElement;
        new (): HTMLGoCardRowElement;
    };
    interface HTMLGoCenterElement extends Components.GoCenter, HTMLStencilElement {
    }
    var HTMLGoCenterElement: {
        prototype: HTMLGoCenterElement;
        new (): HTMLGoCenterElement;
    };
    interface HTMLGoCheckboxElement extends Components.GoCheckbox, HTMLStencilElement {
    }
    var HTMLGoCheckboxElement: {
        prototype: HTMLGoCheckboxElement;
        new (): HTMLGoCheckboxElement;
    };
    interface HTMLGoChipElementEventMap {
        "chipClick": any;
        "chipDismissed": any;
    }
    interface HTMLGoChipElement extends Components.GoChip, HTMLStencilElement {
        addEventListener<K extends keyof HTMLGoChipElementEventMap>(type: K, listener: (this: HTMLGoChipElement, ev: GoChipCustomEvent<HTMLGoChipElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLGoChipElementEventMap>(type: K, listener: (this: HTMLGoChipElement, ev: GoChipCustomEvent<HTMLGoChipElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLGoChipElement: {
        prototype: HTMLGoChipElement;
        new (): HTMLGoChipElement;
    };
    interface HTMLGoContentElement extends Components.GoContent, HTMLStencilElement {
    }
    var HTMLGoContentElement: {
        prototype: HTMLGoContentElement;
        new (): HTMLGoContentElement;
    };
    interface HTMLGoContentLayoutElement extends Components.GoContentLayout, HTMLStencilElement {
    }
    var HTMLGoContentLayoutElement: {
        prototype: HTMLGoContentLayoutElement;
        new (): HTMLGoContentLayoutElement;
    };
    interface HTMLGoDarkModeElementEventMap {
        "themechange": { theme: Theme };
    }
    interface HTMLGoDarkModeElement extends Components.GoDarkMode, HTMLStencilElement {
        addEventListener<K extends keyof HTMLGoDarkModeElementEventMap>(type: K, listener: (this: HTMLGoDarkModeElement, ev: GoDarkModeCustomEvent<HTMLGoDarkModeElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLGoDarkModeElementEventMap>(type: K, listener: (this: HTMLGoDarkModeElement, ev: GoDarkModeCustomEvent<HTMLGoDarkModeElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLGoDarkModeElement: {
        prototype: HTMLGoDarkModeElement;
        new (): HTMLGoDarkModeElement;
    };
    interface HTMLGoDatepickerElementEventMap {
        "gochange": GoChangeEventDetail<string>;
    }
    interface HTMLGoDatepickerElement extends Components.GoDatepicker, HTMLStencilElement {
        addEventListener<K extends keyof HTMLGoDatepickerElementEventMap>(type: K, listener: (this: HTMLGoDatepickerElement, ev: GoDatepickerCustomEvent<HTMLGoDatepickerElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLGoDatepickerElementEventMap>(type: K, listener: (this: HTMLGoDatepickerElement, ev: GoDatepickerCustomEvent<HTMLGoDatepickerElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLGoDatepickerElement: {
        prototype: HTMLGoDatepickerElement;
        new (): HTMLGoDatepickerElement;
    };
    interface HTMLGoDialogElement extends Components.GoDialog, HTMLStencilElement {
    }
    var HTMLGoDialogElement: {
        prototype: HTMLGoDialogElement;
        new (): HTMLGoDialogElement;
    };
    interface HTMLGoDropdownElementEventMap {
        "opened": void;
        "closed": void;
    }
    interface HTMLGoDropdownElement extends Components.GoDropdown, HTMLStencilElement {
        addEventListener<K extends keyof HTMLGoDropdownElementEventMap>(type: K, listener: (this: HTMLGoDropdownElement, ev: GoDropdownCustomEvent<HTMLGoDropdownElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLGoDropdownElementEventMap>(type: K, listener: (this: HTMLGoDropdownElement, ev: GoDropdownCustomEvent<HTMLGoDropdownElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLGoDropdownElement: {
        prototype: HTMLGoDropdownElement;
        new (): HTMLGoDropdownElement;
    };
    interface HTMLGoDropdownItemElementEventMap {
        "selected": HTMLElement;
    }
    interface HTMLGoDropdownItemElement extends Components.GoDropdownItem, HTMLStencilElement {
        addEventListener<K extends keyof HTMLGoDropdownItemElementEventMap>(type: K, listener: (this: HTMLGoDropdownItemElement, ev: GoDropdownItemCustomEvent<HTMLGoDropdownItemElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLGoDropdownItemElementEventMap>(type: K, listener: (this: HTMLGoDropdownItemElement, ev: GoDropdownItemCustomEvent<HTMLGoDropdownItemElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLGoDropdownItemElement: {
        prototype: HTMLGoDropdownItemElement;
        new (): HTMLGoDropdownItemElement;
    };
    interface HTMLGoDropdownMenuElement extends Components.GoDropdownMenu, HTMLStencilElement {
    }
    var HTMLGoDropdownMenuElement: {
        prototype: HTMLGoDropdownMenuElement;
        new (): HTMLGoDropdownMenuElement;
    };
    interface HTMLGoDropdownSeparatorElement extends Components.GoDropdownSeparator, HTMLStencilElement {
    }
    var HTMLGoDropdownSeparatorElement: {
        prototype: HTMLGoDropdownSeparatorElement;
        new (): HTMLGoDropdownSeparatorElement;
    };
    interface HTMLGoFieldElement extends Components.GoField, HTMLStencilElement {
    }
    var HTMLGoFieldElement: {
        prototype: HTMLGoFieldElement;
        new (): HTMLGoFieldElement;
    };
    interface HTMLGoFieldsetElement extends Components.GoFieldset, HTMLStencilElement {
    }
    var HTMLGoFieldsetElement: {
        prototype: HTMLGoFieldsetElement;
        new (): HTMLGoFieldsetElement;
    };
    interface HTMLGoFooterElement extends Components.GoFooter, HTMLStencilElement {
    }
    var HTMLGoFooterElement: {
        prototype: HTMLGoFooterElement;
        new (): HTMLGoFooterElement;
    };
    interface HTMLGoGovAuLogoElement extends Components.GoGovAuLogo, HTMLStencilElement {
    }
    var HTMLGoGovAuLogoElement: {
        prototype: HTMLGoGovAuLogoElement;
        new (): HTMLGoGovAuLogoElement;
    };
    interface HTMLGoHeaderBarElement extends Components.GoHeaderBar, HTMLStencilElement {
    }
    var HTMLGoHeaderBarElement: {
        prototype: HTMLGoHeaderBarElement;
        new (): HTMLGoHeaderBarElement;
    };
    interface HTMLGoHeadingRowElement extends Components.GoHeadingRow, HTMLStencilElement {
    }
    var HTMLGoHeadingRowElement: {
        prototype: HTMLGoHeadingRowElement;
        new (): HTMLGoHeadingRowElement;
    };
    interface HTMLGoHeroElement extends Components.GoHero, HTMLStencilElement {
    }
    var HTMLGoHeroElement: {
        prototype: HTMLGoHeroElement;
        new (): HTMLGoHeroElement;
    };
    interface HTMLGoIconElement extends Components.GoIcon, HTMLStencilElement {
    }
    var HTMLGoIconElement: {
        prototype: HTMLGoIconElement;
        new (): HTMLGoIconElement;
    };
    interface HTMLGoInputElement extends Components.GoInput, HTMLStencilElement {
    }
    var HTMLGoInputElement: {
        prototype: HTMLGoInputElement;
        new (): HTMLGoInputElement;
    };
    interface HTMLGoLinkElement extends Components.GoLink, HTMLStencilElement {
    }
    var HTMLGoLinkElement: {
        prototype: HTMLGoLinkElement;
        new (): HTMLGoLinkElement;
    };
    interface HTMLGoMainNavElementEventMap {
        "navigate": any;
    }
    interface HTMLGoMainNavElement extends Components.GoMainNav, HTMLStencilElement {
        addEventListener<K extends keyof HTMLGoMainNavElementEventMap>(type: K, listener: (this: HTMLGoMainNavElement, ev: GoMainNavCustomEvent<HTMLGoMainNavElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLGoMainNavElementEventMap>(type: K, listener: (this: HTMLGoMainNavElement, ev: GoMainNavCustomEvent<HTMLGoMainNavElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLGoMainNavElement: {
        prototype: HTMLGoMainNavElement;
        new (): HTMLGoMainNavElement;
    };
    interface HTMLGoMdElementEventMap {
        "init": any;
        "rendered": any;
    }
    interface HTMLGoMdElement extends Components.GoMd, HTMLStencilElement {
        addEventListener<K extends keyof HTMLGoMdElementEventMap>(type: K, listener: (this: HTMLGoMdElement, ev: GoMdCustomEvent<HTMLGoMdElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLGoMdElementEventMap>(type: K, listener: (this: HTMLGoMdElement, ev: GoMdCustomEvent<HTMLGoMdElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLGoMdElement: {
        prototype: HTMLGoMdElement;
        new (): HTMLGoMdElement;
    };
    interface HTMLGoNavDrawerElementEventMap {
        "open": void;
        "close": void;
        "navItemClick": INavItem;
    }
    interface HTMLGoNavDrawerElement extends Components.GoNavDrawer, HTMLStencilElement {
        addEventListener<K extends keyof HTMLGoNavDrawerElementEventMap>(type: K, listener: (this: HTMLGoNavDrawerElement, ev: GoNavDrawerCustomEvent<HTMLGoNavDrawerElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLGoNavDrawerElementEventMap>(type: K, listener: (this: HTMLGoNavDrawerElement, ev: GoNavDrawerCustomEvent<HTMLGoNavDrawerElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLGoNavDrawerElement: {
        prototype: HTMLGoNavDrawerElement;
        new (): HTMLGoNavDrawerElement;
    };
    interface HTMLGoNavLinkElementEventMap {
        "navigate": any;
    }
    interface HTMLGoNavLinkElement extends Components.GoNavLink, HTMLStencilElement {
        addEventListener<K extends keyof HTMLGoNavLinkElementEventMap>(type: K, listener: (this: HTMLGoNavLinkElement, ev: GoNavLinkCustomEvent<HTMLGoNavLinkElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLGoNavLinkElementEventMap>(type: K, listener: (this: HTMLGoNavLinkElement, ev: GoNavLinkCustomEvent<HTMLGoNavLinkElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLGoNavLinkElement: {
        prototype: HTMLGoNavLinkElement;
        new (): HTMLGoNavLinkElement;
    };
    interface HTMLGoNavListElement extends Components.GoNavList, HTMLStencilElement {
    }
    var HTMLGoNavListElement: {
        prototype: HTMLGoNavListElement;
        new (): HTMLGoNavListElement;
    };
    interface HTMLGoOverlayElementEventMap {
        "overlayOpen": void;
        "overlayClose": void;
    }
    interface HTMLGoOverlayElement extends Components.GoOverlay, HTMLStencilElement {
        addEventListener<K extends keyof HTMLGoOverlayElementEventMap>(type: K, listener: (this: HTMLGoOverlayElement, ev: GoOverlayCustomEvent<HTMLGoOverlayElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLGoOverlayElementEventMap>(type: K, listener: (this: HTMLGoOverlayElement, ev: GoOverlayCustomEvent<HTMLGoOverlayElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLGoOverlayElement: {
        prototype: HTMLGoOverlayElement;
        new (): HTMLGoOverlayElement;
    };
    interface HTMLGoProgressElement extends Components.GoProgress, HTMLStencilElement {
    }
    var HTMLGoProgressElement: {
        prototype: HTMLGoProgressElement;
        new (): HTMLGoProgressElement;
    };
    interface HTMLGoRadioElement extends Components.GoRadio, HTMLStencilElement {
    }
    var HTMLGoRadioElement: {
        prototype: HTMLGoRadioElement;
        new (): HTMLGoRadioElement;
    };
    interface HTMLGoSearchBarElement extends Components.GoSearchBar, HTMLStencilElement {
    }
    var HTMLGoSearchBarElement: {
        prototype: HTMLGoSearchBarElement;
        new (): HTMLGoSearchBarElement;
    };
    interface HTMLGoSelectElementEventMap {
        "gochange": GoChangeEventDetail<string>;
    }
    interface HTMLGoSelectElement extends Components.GoSelect, HTMLStencilElement {
        addEventListener<K extends keyof HTMLGoSelectElementEventMap>(type: K, listener: (this: HTMLGoSelectElement, ev: GoSelectCustomEvent<HTMLGoSelectElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLGoSelectElementEventMap>(type: K, listener: (this: HTMLGoSelectElement, ev: GoSelectCustomEvent<HTMLGoSelectElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLGoSelectElement: {
        prototype: HTMLGoSelectElement;
        new (): HTMLGoSelectElement;
    };
    interface HTMLGoSkipLinkElement extends Components.GoSkipLink, HTMLStencilElement {
    }
    var HTMLGoSkipLinkElement: {
        prototype: HTMLGoSkipLinkElement;
        new (): HTMLGoSkipLinkElement;
    };
    interface HTMLGoSpinnerElement extends Components.GoSpinner, HTMLStencilElement {
    }
    var HTMLGoSpinnerElement: {
        prototype: HTMLGoSpinnerElement;
        new (): HTMLGoSpinnerElement;
    };
    interface HTMLGoSwitchElement extends Components.GoSwitch, HTMLStencilElement {
    }
    var HTMLGoSwitchElement: {
        prototype: HTMLGoSwitchElement;
        new (): HTMLGoSwitchElement;
    };
    interface HTMLGoTabElement extends Components.GoTab, HTMLStencilElement {
    }
    var HTMLGoTabElement: {
        prototype: HTMLGoTabElement;
        new (): HTMLGoTabElement;
    };
    interface HTMLGoTableWrapperElement extends Components.GoTableWrapper, HTMLStencilElement {
    }
    var HTMLGoTableWrapperElement: {
        prototype: HTMLGoTableWrapperElement;
        new (): HTMLGoTableWrapperElement;
    };
    interface HTMLGoTablistElementEventMap {
        "activated": ActiveTab;
    }
    interface HTMLGoTablistElement extends Components.GoTablist, HTMLStencilElement {
        addEventListener<K extends keyof HTMLGoTablistElementEventMap>(type: K, listener: (this: HTMLGoTablistElement, ev: GoTablistCustomEvent<HTMLGoTablistElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLGoTablistElementEventMap>(type: K, listener: (this: HTMLGoTablistElement, ev: GoTablistCustomEvent<HTMLGoTablistElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLGoTablistElement: {
        prototype: HTMLGoTablistElement;
        new (): HTMLGoTablistElement;
    };
    interface HTMLGoTabsElementEventMap {
        "tabactivated": ActiveTabWithPanel;
    }
    interface HTMLGoTabsElement extends Components.GoTabs, HTMLStencilElement {
        addEventListener<K extends keyof HTMLGoTabsElementEventMap>(type: K, listener: (this: HTMLGoTabsElement, ev: GoTabsCustomEvent<HTMLGoTabsElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLGoTabsElementEventMap>(type: K, listener: (this: HTMLGoTabsElement, ev: GoTabsCustomEvent<HTMLGoTabsElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLGoTabsElement: {
        prototype: HTMLGoTabsElement;
        new (): HTMLGoTabsElement;
    };
    interface HTMLGoTextareaElement extends Components.GoTextarea, HTMLStencilElement {
    }
    var HTMLGoTextareaElement: {
        prototype: HTMLGoTextareaElement;
        new (): HTMLGoTextareaElement;
    };
    interface HTMLGoToTopElement extends Components.GoToTop, HTMLStencilElement {
    }
    var HTMLGoToTopElement: {
        prototype: HTMLGoToTopElement;
        new (): HTMLGoToTopElement;
    };
    interface HTMLGoTocElement extends Components.GoToc, HTMLStencilElement {
    }
    var HTMLGoTocElement: {
        prototype: HTMLGoTocElement;
        new (): HTMLGoTocElement;
    };
    interface HTMLGoTooltipElement extends Components.GoTooltip, HTMLStencilElement {
    }
    var HTMLGoTooltipElement: {
        prototype: HTMLGoTooltipElement;
        new (): HTMLGoTooltipElement;
    };
    interface HTMLElementTagNameMap {
        "go-accordion": HTMLGoAccordionElement;
        "go-accordion-item": HTMLGoAccordionItemElement;
        "go-badge": HTMLGoBadgeElement;
        "go-banner": HTMLGoBannerElement;
        "go-blockquote": HTMLGoBlockquoteElement;
        "go-breadcrumbs": HTMLGoBreadcrumbsElement;
        "go-button": HTMLGoButtonElement;
        "go-button-group": HTMLGoButtonGroupElement;
        "go-callout-section": HTMLGoCalloutSectionElement;
        "go-card": HTMLGoCardElement;
        "go-card-row": HTMLGoCardRowElement;
        "go-center": HTMLGoCenterElement;
        "go-checkbox": HTMLGoCheckboxElement;
        "go-chip": HTMLGoChipElement;
        "go-content": HTMLGoContentElement;
        "go-content-layout": HTMLGoContentLayoutElement;
        "go-dark-mode": HTMLGoDarkModeElement;
        "go-datepicker": HTMLGoDatepickerElement;
        "go-dialog": HTMLGoDialogElement;
        "go-dropdown": HTMLGoDropdownElement;
        "go-dropdown-item": HTMLGoDropdownItemElement;
        "go-dropdown-menu": HTMLGoDropdownMenuElement;
        "go-dropdown-separator": HTMLGoDropdownSeparatorElement;
        "go-field": HTMLGoFieldElement;
        "go-fieldset": HTMLGoFieldsetElement;
        "go-footer": HTMLGoFooterElement;
        "go-gov-au-logo": HTMLGoGovAuLogoElement;
        "go-header-bar": HTMLGoHeaderBarElement;
        "go-heading-row": HTMLGoHeadingRowElement;
        "go-hero": HTMLGoHeroElement;
        "go-icon": HTMLGoIconElement;
        "go-input": HTMLGoInputElement;
        "go-link": HTMLGoLinkElement;
        "go-main-nav": HTMLGoMainNavElement;
        "go-md": HTMLGoMdElement;
        "go-nav-drawer": HTMLGoNavDrawerElement;
        "go-nav-link": HTMLGoNavLinkElement;
        "go-nav-list": HTMLGoNavListElement;
        "go-overlay": HTMLGoOverlayElement;
        "go-progress": HTMLGoProgressElement;
        "go-radio": HTMLGoRadioElement;
        "go-search-bar": HTMLGoSearchBarElement;
        "go-select": HTMLGoSelectElement;
        "go-skip-link": HTMLGoSkipLinkElement;
        "go-spinner": HTMLGoSpinnerElement;
        "go-switch": HTMLGoSwitchElement;
        "go-tab": HTMLGoTabElement;
        "go-table-wrapper": HTMLGoTableWrapperElement;
        "go-tablist": HTMLGoTablistElement;
        "go-tabs": HTMLGoTabsElement;
        "go-textarea": HTMLGoTextareaElement;
        "go-to-top": HTMLGoToTopElement;
        "go-toc": HTMLGoTocElement;
        "go-tooltip": HTMLGoTooltipElement;
    }
}
declare namespace LocalJSX {
    interface GoAccordion {
        /**
          * If true, multiple `<go-accordion-item>`s can be opened at the same time
         */
        "multiple"?: boolean;
    }
    interface GoAccordionItem {
        /**
          * If the accordion item should be opened by default
         */
        "active"?: boolean;
        /**
          * If expanded height should be automatically calculated. If true, the `--go-accordion-item-body-max-height` CSS variable will be set automatically to the content height
         */
        "autoHeight"?: boolean;
        /**
          * Heading text. This can be overwritten by `heading` slot
         */
        "heading"?: string;
        /**
          * The HTML tag to be applied to the heading text. This can be overwritten by `heading` slot
         */
        "headingTag"?: string;
        /**
          * Emitted when accordion item has closed
         */
        "onClosed"?: (event: GoAccordionItemCustomEvent<any>) => void;
        /**
          * Emitted when accordion item started closing
         */
        "onClosing"?: (event: GoAccordionItemCustomEvent<any>) => void;
        /**
          * Emitted when accordion item has opened
         */
        "onOpened"?: (event: GoAccordionItemCustomEvent<any>) => void;
        /**
          * Emitted when accordion item started opening
         */
        "onOpening"?: (event: GoAccordionItemCustomEvent<any>) => void;
    }
    interface GoBadge {
        /**
          * Number to be displayed on the badge
         */
        "count"?: number;
        /**
          * If true, the badge will be displayed only as a dot, no number will be shown
         */
        "dotOnly"?: boolean;
        /**
          * Provide a meaningful label for the badge
         */
        "label"?: string;
        /**
          * maximum number displayable on the badge, if count is greater than max, `{max}+` is displayed
         */
        "max"?: number;
        /**
          * minimum number displayable on the badge, if count is less than min, the badge will not be displayed
         */
        "min"?: number;
    }
    interface GoBanner {
        /**
          * If the banner can be dismissed, a close button will be rendered
         */
        "dismissible"?: boolean;
        /**
          * Heading of banner
         */
        "heading"?: string;
        "onDismissed"?: (event: GoBannerCustomEvent<void>) => void;
        /**
          * Type of banner
         */
        "variant"?: BannerVariants;
    }
    interface GoBlockquote {
        /**
          * A URL that designates a source document or message for the information quoted. This attribute is intended to point to information explaining the context or the reference for the quote. See also: [MDN docs](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/blockquote#attr-cite)
         */
        "citeUrl"?: string;
        "hideQuoteMark"?: boolean;
    }
    interface GoBreadcrumbs {
        /**
          * Hide current page (last item without url) from the breadcrumbs
         */
        "hideCurrent"?: boolean;
        /**
          * list of navigation items to be displayed
         */
        "items"?: INavItem[] | string;
        /**
          * The label for the navigation landmark. This is used by assistive technologies to identify the landmark.
         */
        "label"?: string;
    }
    interface GoButton {
        /**
          * If set, the button will take up the full width of its parent If block="{breakpoint}" is set, the button will take up the full width for the specified breakpoint. e.g. a `block="mobile"` button will display full width on mobile devices. If block="all", the button will take full width on all devices.
         */
        "block"?: Breakpoints;
        /**
          * Reduce inner gaps and outer paddings
         */
        "compact"?: boolean;
        /**
          * If this button is disabled
         */
        "disabled"?: boolean;
        /**
          * If `flat` is set, the button will have no shadow and will be filled with the background color of the selected variant
         */
        "flat"?: boolean;
        /**
          * If the button has an href, it will be rendered as an anchor tag
         */
        "href"?: string;
        /**
          * Circle shaped icon only button that has min size of 40px for touch devices
         */
        "icon"?: boolean;
        /**
          * If the button is loading
         */
        "loading"?: boolean;
        /**
          * Screen reader announcement for loading state
         */
        "loadingAnouncement"?: string;
        /**
          * If `outline` is true, the button will have a border based on selected variant
          * @see  `variant` property
         */
        "outline"?: boolean;
        /**
          * Outline style with filled background
         */
        "outlineFill"?: boolean;
        /**
          * If button should have pill-shaped corners
         */
        "round"?: boolean;
        /**
          * Stack elements inside the button
         */
        "stack"?: boolean;
        /**
          * Html type of the button
         */
        "type"?: 'submit' | 'reset' | 'button';
        /**
          * Button variants
         */
        "variant"?: ColorVariants | 'text';
    }
    interface GoButtonGroup {
        /**
          * If specified, buttons within group will be full width on smaller devices and auto-width going forward. e.g. having `block="tablet"` will make all buttons in group take up full width on mobile and tablet sizes and auto-width on larger devices.
         */
        "block"?: Breakpoints;
        /**
          * No gap between buttons.
         */
        "connected"?: boolean;
    }
    interface GoCalloutSection {
        /**
          * Description text
         */
        "description"?: string;
        /**
          * Heading text
         */
        "heading"?: string;
        /**
          * HTML tag to use for heading
         */
        "headingTag"?: string;
        /**
          * Alt text of image (default '' which marks the image decorative)
         */
        "imgAlt"?: string;
        /**
          * Image position, possible values are `start` and `end`
         */
        "imgPos"?: 'start' | 'end';
        /**
          * Url of image
         */
        "imgSrc"?: string;
    }
    interface GoCard {
        /**
          * Show border on card
         */
        "border"?: boolean;
        /**
          * Flat card without box-shadow
         */
        "flat"?: boolean;
        /**
          * Heading of the card
         */
        "heading"?: string;
        /**
          * For cards that link to destinations, one card can only link to one destination. Note: The link (`a` tag) will be applied to the heading, so if you don't have a `card-heading` prop, you will need to manually add the `a` tag in one of the slots provided.
         */
        "href"?: string;
        /**
          * Position of featured media in the card
         */
        "mediaPosition"?: | 'top'
    | 'left'
    | 'right'
    | 'bottom'
    | 'start' // responsive top left
    | 'end';
        /**
          * Sub heading of the card
         */
        "subHeading"?: string;
        /**
          * when href is present, `target` attribute to be applied to the card link
         */
        "target"?: '_blank' | '_self' | '_parent' | '_top';
    }
    interface GoCardRow {
        /**
          * Number of columns from mobile breakpoint and up
         */
        "cols"?: number;
        /**
          * Number of columns from desktop breakpoint and up
         */
        "colsDesktop"?: number;
        /**
          * Number of columns from large breakpoint and up
         */
        "colsLarge"?: number;
        /**
          * Number of columns from tablet breakpoint and up
         */
        "colsTablet"?: number;
        /**
          * Heading for this card row section
         */
        "heading"?: string;
        "headingTag"?: string;
        /**
          * View more link href
         */
        "moreLinkHref"?: string;
        /**
          * View more link text
         */
        "moreLinkText"?: string;
        /**
          * By default, `go-card-row` stretches all cards inside to the tallest card in view, unless this property is set to true.
         */
        "noStretch"?: boolean;
        /**
          * If set, cards will fade in one by one with the specified delay in milliseconds when they are in the viewport. uses `IntersectionObserver`, [see browser compatibility](https://developer.mozilla.org/en-US/docs/Web/API/Intersection_Observer_API)
         */
        "stagger"?: number;
    }
    interface GoCenter {
        /**
          * If true, the text-align: center will also be applied to the container
         */
        "alignText"?: boolean;
        /**
          * Height of this container
         */
        "height"?: string;
    }
    interface GoCheckbox {
        "checked"?: boolean;
        /**
          * If the input is disabled
         */
        "disabled"?: boolean;
        /**
          * Error state of input, text provided will be shown as error message
         */
        "error"?: string;
        /**
          * DOM id for error
         */
        "errorId"?: string;
        /**
          * Hint message for the input
         */
        "hint"?: string;
        /**
          * DOM id for hint message
         */
        "hintId"?: string;
        "indeterminate"?: boolean;
        /**
          * Label of the input field
         */
        "label"?: string;
        /**
          * Name of the input field
         */
        "name"?: string;
        /**
          * Value of the input field
         */
        "value"?: any;
    }
    interface GoChip {
        /**
          * Make chip clickable, `chipClick` event will be emitted on click
         */
        "clickable"?: boolean;
        /**
          * Make chip dismissible, close button will be shown and `chipDismiss` event will be emitted when close button is clicked
         */
        "dismissible"?: boolean;
        /**
          * Emitted on chip click, only if `clickable` is true
         */
        "onChipClick"?: (event: GoChipCustomEvent<any>) => void;
        /**
          * Emitted on chip dismiss, only if `dismissible` is true
         */
        "onChipDismissed"?: (event: GoChipCustomEvent<any>) => void;
        /**
          * If `outline` is true, the button will have a border based on selected variant
          * @see  `variant` property
         */
        "outline"?: boolean;
        /**
          * Colour variant of the chip
         */
        "variant"?: ChipVariants;
    }
    interface GoContent {
    }
    interface GoContentLayout {
        "breadcrumbs"?: INavItem[] | string;
        "heroImgAlt"?: string;
        "heroImgSrc"?: string;
        "intro"?: string;
        /**
          * no hero banner
         */
        "noHero"?: boolean;
        "pageHeading"?: string;
        "preHeading"?: string;
        /**
          * sidebar position on desktop screens possible values are `start` and `end`
         */
        "sidebarDesktopPosition"?: SidebarPosition;
        /**
          * sidebar position on mobile screens possible values are `start` and `end`
         */
        "sidebarMobilePosition"?: SidebarPosition;
        /**
          * If sidebar should be sticky
         */
        "sidebarSticky"?: boolean;
        /**
          * If the "On this page" table of content section should be displayed
         */
        "toc"?: boolean;
        /**
          * Props to pass into the table of content ([see `go-toc` props](/docs/components/go-toc#go-toc-props))
         */
        "tocProps"?: TocProps;
    }
    interface GoDarkMode {
        /**
          * Attribute name on html element that will be used to store theme
         */
        "attribute"?: string;
        "onThemechange"?: (event: GoDarkModeCustomEvent<{ theme: Theme }>) => void;
    }
    interface GoDatepicker {
        /**
          * If the input is disabled
         */
        "disabled"?: boolean;
        /**
          * Error state of input, text provided will be shown as error message
         */
        "error"?: string | boolean;
        /**
          * DOM id for error
         */
        "errorId"?: string;
        /**
          * Specify the expected date format Supported formats: https://day.js.org/docs/en/parse/string-format#list-of-all-available-parsing-tokens
         */
        "format"?: string;
        /**
          * Hint message for the input
         */
        "hint"?: string;
        /**
          * add date format into hint message
         */
        "hintFormat"?: boolean;
        /**
          * DOM id for hint message
         */
        "hintId"?: string;
        /**
          * Label of the input field
         */
        "label"?: string;
        /**
          * DOM id for label
         */
        "labelId"?: string;
        /**
          * Name of the input field
         */
        "name"?: string;
        "onGochange"?: (event: GoDatepickerCustomEvent<GoChangeEventDetail<string>>) => void;
        /**
          * Duet Date Picker options https://www.npmjs.com/package/@duetds/date-picker#properties
         */
        "options"?: string | Partial<DuetDatePickerProps>;
        /**
          * Placeholder text
         */
        "placeholder"?: string;
        /**
          * DOM id for prefix
         */
        "prefixId"?: string;
        /**
          * If this input is read-only
         */
        "readonly"?: boolean;
        /**
          * DOM id for suffix
         */
        "suffixId"?: string;
        /**
          * Value of the input field
         */
        "value"?: string;
    }
    interface GoDialog {
        /**
          * If this dialog is active
         */
        "active"?: boolean;
        /**
          * Heading of the overlay content
         */
        "heading"?: string;
        /**
          * HTML tag for the heading
         */
        "headingTag"?: string;
        /**
          * If persistent, the overlay will not be closed when the user clicks outside of it or presses the escape key.
         */
        "persistent"?: boolean;
    }
    interface GoDropdown {
        /**
          * if set, dropdown cannot be opened
         */
        "disabled"?: boolean;
        /**
          * If set, dropdown will take full width of its parent.
         */
        "fullWidth"?: boolean;
        /**
          * keep track of active state
         */
        "isActive"?: boolean;
        /**
          * If set, trigger click event will need to be handled manually.
         */
        "noTriggerClickHandler"?: boolean;
        /**
          * Emitted when dropdown is opened
         */
        "onClosed"?: (event: GoDropdownCustomEvent<void>) => void;
        /**
          * Emitted when dropdown is opened
         */
        "onOpened"?: (event: GoDropdownCustomEvent<void>) => void;
        /**
          * Query selector string for the trigger element.
         */
        "triggerSelector"?: string;
        /**
          * Width of the dropdown, any CSS width values can be used.
         */
        "width"?: string;
    }
    interface GoDropdownItem {
        /**
          * if this item is disabled, according to the [menu pattern] https://www.w3.org/WAI/ARIA/apg/patterns/menu/#issue-container-generatedID-17 disabled menu item should be focusable but cannot be activated
         */
        "disabled"?: boolean;
        /**
          * Emitted when a menu item is selected
         */
        "onSelected"?: (event: GoDropdownItemCustomEvent<HTMLElement>) => void;
        /**
          * customise width of the dropdown item
         */
        "width"?: string;
    }
    interface GoDropdownMenu {
        /**
          * keep track of active state
         */
        "isActive"?: boolean;
        /**
          * DOM id for menu
         */
        "menuId"?: string;
        /**
          * If persistent, the dropdown will not close by itself on interaction with elements inside the menu.
         */
        "persistent"?: boolean;
        /**
          * @see [go-dropdown](go-dropdown#props)
         */
        "triggerSelector"?: string;
        /**
          * customise width of dropdown menu
         */
        "width"?: string;
    }
    interface GoDropdownSeparator {
    }
    interface GoField {
        "controlElSelector"?: string;
        "controlId"?: string;
        /**
          * If the input is disabled
         */
        "disabled"?: boolean;
        /**
          * Error state of input, text provided will be shown as error message
         */
        "error"?: boolean | string;
        /**
          * DOM id for error
         */
        "errorId"?: string;
        /**
          * If specified, an input element with `type="hidden"` will be generated and this hiddenName prop will be used as the `name` of the hidden input  use `hiddenInputValue` prop to set the value of that field
         */
        "hiddenInputName"?: string;
        /**
          * Sets the value of the hidden input created by `hiddenInputName`
         */
        "hiddenInputValue"?: string;
        /**
          * Hint message for the input
         */
        "hint"?: string;
        /**
          * DOM id for hint message
         */
        "hintId"?: string;
        "idPrefix"?: string;
        /**
          * Label of the input field
         */
        "label"?: string;
        /**
          * DOM id for label
         */
        "labelId"?: string;
        /**
          * Name of the input field
         */
        "name"?: string;
        /**
          * DOM id for prefix
         */
        "prefixId"?: string;
        /**
          * If this input is read-only
         */
        "readonly"?: boolean;
        /**
          * DOM id for suffix
         */
        "suffixId"?: string;
    }
    interface GoFieldset {
        /**
          * Error state of input, text provided will be shown as error message
         */
        "error"?: boolean | string;
        /**
          * DOM id for error
         */
        "errorId"?: string;
        /**
          * Hint message for the input
         */
        "hint"?: string;
        /**
          * DOM id for hint message
         */
        "hintId"?: string;
        /**
          * Wrap direct DOM children in an unordered list so they are announced by screen readers, good for checkboxes and radio buttons
         */
        "isList"?: boolean;
        /**
          * Label of the input field
         */
        "label"?: string;
        /**
          * DOM id for label
         */
        "labelId"?: string;
    }
    interface GoFooter {
        /**
          * Dark theme footer
         */
        "dark"?: boolean;
        /**
          * Navigation links to be displayed.
         */
        "links"?: INavItem[] | string;
        /**
          * Number of navigation columns
         */
        "navCols"?: number;
        /**
          * Number of navigation columns for desktop and up
         */
        "navColsDesktop"?: number;
        /**
          * Number of navigation columns for tablet and up
         */
        "navColsTablet"?: number;
        /**
          * Label for navigation
         */
        "navLabel"?: string;
    }
    interface GoGovAuLogo {
        /**
          * Set height of the logo group. Slots will be scaled to this height. Width is set to auto to avoid image distortion.
         */
        "height"?: string;
        /**
          * If href is provided, logo will be wrapped inside an anchor (`a`) tag. By default, all attributes except `class` and `style` are passed through to the anchor tag.
         */
        "href"?: string;
    }
    interface GoHeaderBar {
        /**
          * Controls at which breakpoint the mobile menu (go-nav-drawer) becomes main nav menu (go-main-nav)
         */
        "breakpoint"?: Breakpoints;
    }
    interface GoHeadingRow {
        /**
          * Heading for this card row section
         */
        "heading"?: string;
        /**
          * HTML tag to use for heading
         */
        "headingTag"?: string;
        /**
          * View more link href
         */
        "moreLinkHref"?: string;
        /**
          * View more link text
         */
        "moreLinkText"?: string;
    }
    interface GoHero {
        /**
          * Breadcrumb navigation items
         */
        "breadcrumbs"?: INavItem[] | string;
        /**
          * Hero heading (h1)
         */
        "heading"?: string;
        /**
          * if we should hide hero img on mobile(`full-width-bg` slot not affected)
         */
        "hideImgOnMobile"?: boolean;
        /**
          * hero image alt text (requires img-src attribute to be present to render)
         */
        "imgAlt"?: string;
        /**
          * hero image src url (requires img-alt attribute to be present to render)
         */
        "imgSrc"?: string;
        /**
          * Pre heading text - use only when required
         */
        "preHeading"?: string;
    }
    interface GoIcon {
        /**
          * Color of the icon,  supports CSS units and variables. Default: `currentColor`
         */
        "color"?: string;
        /**
          * Specify the icon set being referenced. Icon font CSS files must be included in the page.
         */
        "iconSet"?: MaterialIconVariants | FontAwesomeVariants | BoxiconVariants;
        /**
          * provide label for screen reader
         */
        "label"?: string;
        /**
          * Name of the icon
         */
        "name"?: string;
        /**
          * Size of the icon, supports CSS units and variables. Default: 1.5em for material icons, 1em for other icon sets.
         */
        "size"?: string;
    }
    interface GoInput {
        /**
          * If the input is disabled
         */
        "disabled"?: boolean;
        /**
          * Error state of input, text provided will be shown as error message
         */
        "error"?: boolean | string;
        /**
          * DOM id for error
         */
        "errorId"?: string;
        /**
          * Hint message for the input
         */
        "hint"?: string;
        /**
          * DOM id for hint message
         */
        "hintId"?: string;
        /**
          * Label of the input field
         */
        "label"?: string;
        /**
          * DOM id for label
         */
        "labelId"?: string;
        /**
          * Name of the input field
         */
        "name"?: string;
        /**
          * DOM id for prefix
         */
        "prefixId"?: string;
        /**
          * If this input is read-only
         */
        "readonly"?: boolean;
        /**
          * DOM id for suffix
         */
        "suffixId"?: string;
        /**
          * Value of the input field
         */
        "value"?: string;
    }
    interface GoLink {
        "expandClickableArea"?: boolean;
        /**
          * The `href` of the link.
         */
        "href"?: string;
        /**
          * The `target` of the link.
         */
        "target"?: '_blank' | '_self' | '_parent' | '_top';
    }
    interface GoMainNav {
        /**
          * Navigation items to be rendered if provided, slot content will not be rendered.
         */
        "items"?: INavItem[] | string;
        /**
          * Label for the navigation. This helps screen reader users to quickly navigate to teh correct nav landmark
         */
        "label"?: string;
        "onNavigate"?: (event: GoMainNavCustomEvent<any>) => void;
    }
    interface GoMd {
        /**
          * Markdown content to be rendered
         */
        "content"?: string;
        /**
          * Render inline markdown
         */
        "inline"?: boolean;
        /**
          * [markdown-it](https://github.com/markdown-it/markdown-it) options **Note**: if `use-go-ui` is set to true, these options will be overwritten
         */
        "mdOptions"?: Options | string;
        "onInit"?: (event: GoMdCustomEvent<any>) => void;
        "onRendered"?: (event: GoMdCustomEvent<any>) => void;
        /**
          * If set to true, `go-md` will use [DOMPurify](https://nodei.co/npm/dompurify/) to sanitise the output HTML before inserting it into the DOM
         */
        "sanitise"?: boolean;
        /**
          * url to load remote markdown content if `src` is set, content in the `content` prop will be overwritten
         */
        "src"?: string;
        /**
          * Use go-ui markdown renderer: - Only `typographer` is enabled in markdown-it options  - linkify with [`go-link`](https://go-ui.com/docs/components/go-link) - [container](https://github.com/markdown-it/markdown-it-container) banners with [`go-banner`](https://go-ui.com/docs/components/go-banner)
         */
        "useGoUi"?: boolean;
    }
    interface GoNavDrawer {
        /**
          * keep track of open state of drawer
         */
        "active"?: boolean;
        /**
          * if true, clicking on nav item will close the drawer automatically
         */
        "autoClose"?: boolean;
        /**
          * Navigation items to be rendered
         */
        "items"?: INavItem[] | string;
        /**
          * label for screen readers
         */
        "label"?: string;
        /**
          * Emitted when the nav drawer is closed
         */
        "onClose"?: (event: GoNavDrawerCustomEvent<void>) => void;
        /**
          * Emitted when the nav item is clicked
         */
        "onNavItemClick"?: (event: GoNavDrawerCustomEvent<INavItem>) => void;
        /**
          * Emitted when the nav drawer is opened
         */
        "onOpen"?: (event: GoNavDrawerCustomEvent<void>) => void;
        /**
          * Position where the navigation should appear from
         */
        "position"?: 'left' | 'right';
    }
    interface GoNavLink {
        /**
          * full width
         */
        "block"?: boolean;
        /**
          * navigation item
         */
        "item"?: INavItem;
        "onNavigate"?: (event: GoNavLinkCustomEvent<any>) => void;
        /**
          * show arrow at the end of the link
         */
        "showArrow"?: boolean;
    }
    interface GoNavList {
        /**
          * Make the list full width
         */
        "block"?: boolean;
        /**
          * Make all sub lists (if any) expanded by default
         */
        "expandSubLists"?: boolean;
        /**
          * Heading text
         */
        "heading"?: string;
        /**
          * Heading navigation item
         */
        "headingItem"?: INavItem | string;
        /**
          * list of navigation items to be displayed uuuuuu
         */
        "items"?: INavItem[] | string;
    }
    interface GoOverlay {
        "active"?: boolean;
        /**
          * Emitted when the overlay is closed
         */
        "onOverlayClose"?: (event: GoOverlayCustomEvent<void>) => void;
        /**
          * Emitted when the overlay is opened
         */
        "onOverlayOpen"?: (event: GoOverlayCustomEvent<void>) => void;
        /**
          * If persistent, the overlay will not be closed when the user clicks outside of it or presses the escape key.
         */
        "persistent"?: boolean;
    }
    interface GoProgress {
        /**
          * Set progress to indeterminate state
         */
        "indeterminate"?: boolean;
        /**
          * Descriptive label for screen readers to identify the progress bar
         */
        "label"?: string;
        /**
          * Id of the label element for the progress bar
         */
        "labelledby"?: string;
        /**
          * Total amount of work required for progress to complete
         */
        "max"?: number;
        /**
          * min value of the progress bar
         */
        "min"?: number;
        /**
          * Display percentage of completion
         */
        "showPercentage"?: boolean;
        /**
          * How much of the task that has been completed
         */
        "value"?: number;
    }
    interface GoRadio {
        "checked"?: boolean;
        /**
          * DOM id for native input control, default auto generated unique id
         */
        "controlId"?: string;
        "disabled"?: boolean;
        "error"?: string;
        /**
          * DOM id for error
         */
        "errorId"?: string;
        "hint"?: string;
        /**
          * DOM id for hint message
         */
        "hintId"?: string;
        "indeterminate"?: boolean;
        "label"?: string;
        "name"?: string;
        "value"?: any;
    }
    interface GoSearchBar {
    }
    interface GoSelect {
        /**
          * If the input is disabled
         */
        "disabled"?: boolean;
        /**
          * Error state of input, text provided will be shown as error message
         */
        "error"?: string | boolean;
        /**
          * DOM id for error
         */
        "errorId"?: string;
        /**
          * Hint message for the input
         */
        "hint"?: string;
        /**
          * DOM id for hint message
         */
        "hintId"?: string;
        /**
          * Label of the input field
         */
        "label"?: string;
        /**
          * DOM id for label
         */
        "labelId"?: string;
        /**
          * Name of the input field
         */
        "name"?: string;
        /**
          * Emit custom event with selected value
         */
        "onGochange"?: (event: GoSelectCustomEvent<GoChangeEventDetail<string>>) => void;
        /**
          * Array of options. Note: Sometimes frameworks may incorrectly pass the result of Array.toString() into this prop, `go-select` tries to obsorb this issue by trying to do a `split(',')` on the options prop if a string is passed in. This means the accepted formats include: 1. array of objects of type `{label: string, value: string}` 2. array of strings (e.g. ['Apple', 'Orange', 'Banana']) 3. string, toString() result of format 2 (i.e. 'Apple,Orange,Banana') 4. string, option 1 or 2 passed in as string that can be parsed by [JSON5](https://json5.org/)
         */
        "options"?: SelectOption[] | string[] | string;
        /**
          * If this input is read-only
         */
        "readonly"?: boolean;
        /**
          * DOM id for suffix
         */
        "suffixId"?: string;
        /**
          * Value of the input field
         */
        "value"?: FieldValue;
    }
    interface GoSkipLink {
        /**
          * Tell skip link which element to focus (supports any query selector)
         */
        "target"?: string;
    }
    interface GoSpinner {
        /**
          * Set the base color of the spinner.
         */
        "baseColor"?: string;
        /**
          * Set how long it should take to complete one full rotation in milliseconds.
         */
        "duration"?: number;
        /**
          * set the loading state
         */
        "loading"?: boolean;
        /**
          * screen reader announcement when loading
         */
        "loadingAnnouncement"?: string;
        /**
          * Set the ring color of the spinner.
         */
        "ringColor"?: string;
        /**
          * Set the width of the spinner ring
         */
        "ringWidth"?: string;
        /**
          * Set the width and height of the spinner.
         */
        "size"?: string;
        /**
          * If true, spinner and label will be stacked.
         */
        "stacked"?: boolean;
    }
    interface GoSwitch {
        /**
          * "on" label to show when `showOnOff*` is set to true
         */
        "activeLabel"?: string;
        "checked"?: boolean;
        /**
          * If the input is disabled
         */
        "disabled"?: boolean;
        /**
          * make this field full width
         */
        "fullWidth"?: boolean;
        /**
          * "off" label to show when `showOnOff*` is set to true
         */
        "inactiveLabel"?: string;
        /**
          * Label of the input field
         */
        "label"?: string;
        /**
          * Name of the input field
         */
        "name"?: string;
        /**
          * show on/off text in switch toggle
         */
        "showOnOff"?: boolean;
        /**
          * show on/off text next to the switch toggle
         */
        "showOnOffOutside"?: boolean;
        /**
          * Display label on top of switch
         */
        "stack"?: boolean;
        /**
          * Value of the input field
         */
        "value"?: any;
    }
    interface GoTab {
        /**
          * If this tab is currently active if multiple `go-tab` are active in the same `go-tabs`, first one is active.
         */
        "active"?: boolean;
        "iconPosition"?: TabIconPosition;
        /**
          * Label displayed on the tab
         */
        "label"?: string;
        /**
          * id for the tab panel element If not provided, a unique id will be generated.
         */
        "panelId"?: string;
        /**
          * `id` for the tab button element. If not provided, a unique id will be generated.
         */
        "tabId"?: string;
    }
    interface GoTableWrapper {
        /**
          * Bordered table
         */
        "bordered"?: boolean;
        /**
          * Hoverable rows
         */
        "hoverable"?: boolean;
        /**
          * Striped rows
         */
        "striped"?: boolean;
    }
    interface GoTablist {
        /**
          * By default, tabs require user interaction (by clicking or pressing the `Enter` or `Space` key) to be activated. if `auto` is true, tabs are automatically activated when they receive focus.
         */
        "auto"?: boolean;
        /**
          * Fix tabs control to the bottom of screen
         */
        "bottom"?: boolean;
        /**
          * fill available width not applicable for vertical tabs
         */
        "fill"?: boolean;
        /**
          * tab items array
         */
        "items"?: TabItem[];
        /**
          * applies justify-content property to tablist ie. `justify="between"` applies `justify-content: space-between`
         */
        "justify"?: JustifyOption;
        /**
          * Provides a label that describes the purpose of the set of tabs.
         */
        "label"?: string;
        /**
          * Tab activated event
          * @param ActiveTab , tabEl} currently active tab
         */
        "onActivated"?: (event: GoTablistCustomEvent<ActiveTab>) => void;
        /**
          * Set tabs orientation to vertical
         */
        "vertical"?: boolean;
    }
    interface GoTabs {
        /**
          * By default, tabs require user interaction (by clicking or pressing the `Enter` or `Space` key) to be activated. if `auto` is true, tabs are automatically activated when they receive focus.
         */
        "auto"?: boolean;
        /**
          * fill available space (horizontal only)
         */
        "fill"?: boolean;
        /**
          * Applies justify-content property to tablist (horizontal only) ie. `justify="between"` applies `justify-content: space-between`
         */
        "justify"?: JustifyOption;
        /**
          * Tab activated event
          * @param ActivatedTab , tabEl, panelEl}
         */
        "onTabactivated"?: (event: GoTabsCustomEvent<ActiveTabWithPanel>) => void;
        /**
          * Provides a label that describes the purpose of the set of tabs.
         */
        "tabGroupLabel"?: string;
        /**
          * Set tabs orientation to vertical
         */
        "vertical"?: boolean;
    }
    interface GoTextarea {
        /**
          * If set, grow textarea based on its content
         */
        "autoGrow"?: boolean;
        /**
          * If the input is disabled
         */
        "disabled"?: boolean;
        /**
          * Error state of input, text provided will be shown as error message
         */
        "error"?: boolean | string;
        /**
          * DOM id for error
         */
        "errorId"?: string;
        /**
          * Hint message for the input
         */
        "hint"?: string;
        /**
          * DOM id for hint message
         */
        "hintId"?: string;
        /**
          * Label of the input field
         */
        "label"?: string;
        /**
          * DOM id for label
         */
        "labelId"?: string;
        /**
          * Name of the input field
         */
        "name"?: string;
        /**
          * DOM id for prefix
         */
        "prefixId"?: string;
        /**
          * If this input is read-only
         */
        "readonly"?: boolean;
        /**
          * DOM id for suffix
         */
        "suffixId"?: string;
        /**
          * Value of the input field
         */
        "value"?: string;
    }
    interface GoToTop {
        /**
          * how far from the top of the page the button should be shown (in px)
         */
        "offset"?: number;
    }
    interface GoToc {
        /**
          * Label for the TOC
         */
        "label"?: string;
        /**
          * Custom classes to be applied to the label
         */
        "labelClass"?: string;
        /**
          * Selector for the TOC items
         */
        "selector"?: string;
    }
    interface GoTooltip {
        /**
          * Add arrow to the tooltip
         */
        "arrow"?: boolean;
        /**
          * Improve positioning for inline trigger elements that span over multiple lines. Reference: https://floating-ui.com/docs/inline
         */
        "inline"?: boolean;
        /**
          * placement of tooltip relative to the trigger element
         */
        "placement"?: 'top' | 'bottom' | 'left' | 'right';
        /**
          * Query selector string for the trigger element
         */
        "triggerId"?: string;
    }
    interface IntrinsicElements {
        "go-accordion": GoAccordion;
        "go-accordion-item": GoAccordionItem;
        "go-badge": GoBadge;
        "go-banner": GoBanner;
        "go-blockquote": GoBlockquote;
        "go-breadcrumbs": GoBreadcrumbs;
        "go-button": GoButton;
        "go-button-group": GoButtonGroup;
        "go-callout-section": GoCalloutSection;
        "go-card": GoCard;
        "go-card-row": GoCardRow;
        "go-center": GoCenter;
        "go-checkbox": GoCheckbox;
        "go-chip": GoChip;
        "go-content": GoContent;
        "go-content-layout": GoContentLayout;
        "go-dark-mode": GoDarkMode;
        "go-datepicker": GoDatepicker;
        "go-dialog": GoDialog;
        "go-dropdown": GoDropdown;
        "go-dropdown-item": GoDropdownItem;
        "go-dropdown-menu": GoDropdownMenu;
        "go-dropdown-separator": GoDropdownSeparator;
        "go-field": GoField;
        "go-fieldset": GoFieldset;
        "go-footer": GoFooter;
        "go-gov-au-logo": GoGovAuLogo;
        "go-header-bar": GoHeaderBar;
        "go-heading-row": GoHeadingRow;
        "go-hero": GoHero;
        "go-icon": GoIcon;
        "go-input": GoInput;
        "go-link": GoLink;
        "go-main-nav": GoMainNav;
        "go-md": GoMd;
        "go-nav-drawer": GoNavDrawer;
        "go-nav-link": GoNavLink;
        "go-nav-list": GoNavList;
        "go-overlay": GoOverlay;
        "go-progress": GoProgress;
        "go-radio": GoRadio;
        "go-search-bar": GoSearchBar;
        "go-select": GoSelect;
        "go-skip-link": GoSkipLink;
        "go-spinner": GoSpinner;
        "go-switch": GoSwitch;
        "go-tab": GoTab;
        "go-table-wrapper": GoTableWrapper;
        "go-tablist": GoTablist;
        "go-tabs": GoTabs;
        "go-textarea": GoTextarea;
        "go-to-top": GoToTop;
        "go-toc": GoToc;
        "go-tooltip": GoTooltip;
    }
}
export { LocalJSX as JSX };
declare module "@stencil/core" {
    export namespace JSX {
        interface IntrinsicElements {
            "go-accordion": LocalJSX.GoAccordion & JSXBase.HTMLAttributes<HTMLGoAccordionElement>;
            "go-accordion-item": LocalJSX.GoAccordionItem & JSXBase.HTMLAttributes<HTMLGoAccordionItemElement>;
            "go-badge": LocalJSX.GoBadge & JSXBase.HTMLAttributes<HTMLGoBadgeElement>;
            "go-banner": LocalJSX.GoBanner & JSXBase.HTMLAttributes<HTMLGoBannerElement>;
            "go-blockquote": LocalJSX.GoBlockquote & JSXBase.HTMLAttributes<HTMLGoBlockquoteElement>;
            "go-breadcrumbs": LocalJSX.GoBreadcrumbs & JSXBase.HTMLAttributes<HTMLGoBreadcrumbsElement>;
            "go-button": LocalJSX.GoButton & JSXBase.HTMLAttributes<HTMLGoButtonElement>;
            "go-button-group": LocalJSX.GoButtonGroup & JSXBase.HTMLAttributes<HTMLGoButtonGroupElement>;
            "go-callout-section": LocalJSX.GoCalloutSection & JSXBase.HTMLAttributes<HTMLGoCalloutSectionElement>;
            "go-card": LocalJSX.GoCard & JSXBase.HTMLAttributes<HTMLGoCardElement>;
            "go-card-row": LocalJSX.GoCardRow & JSXBase.HTMLAttributes<HTMLGoCardRowElement>;
            "go-center": LocalJSX.GoCenter & JSXBase.HTMLAttributes<HTMLGoCenterElement>;
            "go-checkbox": LocalJSX.GoCheckbox & JSXBase.HTMLAttributes<HTMLGoCheckboxElement>;
            "go-chip": LocalJSX.GoChip & JSXBase.HTMLAttributes<HTMLGoChipElement>;
            "go-content": LocalJSX.GoContent & JSXBase.HTMLAttributes<HTMLGoContentElement>;
            "go-content-layout": LocalJSX.GoContentLayout & JSXBase.HTMLAttributes<HTMLGoContentLayoutElement>;
            "go-dark-mode": LocalJSX.GoDarkMode & JSXBase.HTMLAttributes<HTMLGoDarkModeElement>;
            "go-datepicker": LocalJSX.GoDatepicker & JSXBase.HTMLAttributes<HTMLGoDatepickerElement>;
            "go-dialog": LocalJSX.GoDialog & JSXBase.HTMLAttributes<HTMLGoDialogElement>;
            "go-dropdown": LocalJSX.GoDropdown & JSXBase.HTMLAttributes<HTMLGoDropdownElement>;
            "go-dropdown-item": LocalJSX.GoDropdownItem & JSXBase.HTMLAttributes<HTMLGoDropdownItemElement>;
            "go-dropdown-menu": LocalJSX.GoDropdownMenu & JSXBase.HTMLAttributes<HTMLGoDropdownMenuElement>;
            "go-dropdown-separator": LocalJSX.GoDropdownSeparator & JSXBase.HTMLAttributes<HTMLGoDropdownSeparatorElement>;
            "go-field": LocalJSX.GoField & JSXBase.HTMLAttributes<HTMLGoFieldElement>;
            "go-fieldset": LocalJSX.GoFieldset & JSXBase.HTMLAttributes<HTMLGoFieldsetElement>;
            "go-footer": LocalJSX.GoFooter & JSXBase.HTMLAttributes<HTMLGoFooterElement>;
            "go-gov-au-logo": LocalJSX.GoGovAuLogo & JSXBase.HTMLAttributes<HTMLGoGovAuLogoElement>;
            "go-header-bar": LocalJSX.GoHeaderBar & JSXBase.HTMLAttributes<HTMLGoHeaderBarElement>;
            "go-heading-row": LocalJSX.GoHeadingRow & JSXBase.HTMLAttributes<HTMLGoHeadingRowElement>;
            "go-hero": LocalJSX.GoHero & JSXBase.HTMLAttributes<HTMLGoHeroElement>;
            "go-icon": LocalJSX.GoIcon & JSXBase.HTMLAttributes<HTMLGoIconElement>;
            "go-input": LocalJSX.GoInput & JSXBase.HTMLAttributes<HTMLGoInputElement>;
            "go-link": LocalJSX.GoLink & JSXBase.HTMLAttributes<HTMLGoLinkElement>;
            "go-main-nav": LocalJSX.GoMainNav & JSXBase.HTMLAttributes<HTMLGoMainNavElement>;
            "go-md": LocalJSX.GoMd & JSXBase.HTMLAttributes<HTMLGoMdElement>;
            "go-nav-drawer": LocalJSX.GoNavDrawer & JSXBase.HTMLAttributes<HTMLGoNavDrawerElement>;
            "go-nav-link": LocalJSX.GoNavLink & JSXBase.HTMLAttributes<HTMLGoNavLinkElement>;
            "go-nav-list": LocalJSX.GoNavList & JSXBase.HTMLAttributes<HTMLGoNavListElement>;
            "go-overlay": LocalJSX.GoOverlay & JSXBase.HTMLAttributes<HTMLGoOverlayElement>;
            "go-progress": LocalJSX.GoProgress & JSXBase.HTMLAttributes<HTMLGoProgressElement>;
            "go-radio": LocalJSX.GoRadio & JSXBase.HTMLAttributes<HTMLGoRadioElement>;
            "go-search-bar": LocalJSX.GoSearchBar & JSXBase.HTMLAttributes<HTMLGoSearchBarElement>;
            "go-select": LocalJSX.GoSelect & JSXBase.HTMLAttributes<HTMLGoSelectElement>;
            "go-skip-link": LocalJSX.GoSkipLink & JSXBase.HTMLAttributes<HTMLGoSkipLinkElement>;
            "go-spinner": LocalJSX.GoSpinner & JSXBase.HTMLAttributes<HTMLGoSpinnerElement>;
            "go-switch": LocalJSX.GoSwitch & JSXBase.HTMLAttributes<HTMLGoSwitchElement>;
            "go-tab": LocalJSX.GoTab & JSXBase.HTMLAttributes<HTMLGoTabElement>;
            "go-table-wrapper": LocalJSX.GoTableWrapper & JSXBase.HTMLAttributes<HTMLGoTableWrapperElement>;
            "go-tablist": LocalJSX.GoTablist & JSXBase.HTMLAttributes<HTMLGoTablistElement>;
            "go-tabs": LocalJSX.GoTabs & JSXBase.HTMLAttributes<HTMLGoTabsElement>;
            "go-textarea": LocalJSX.GoTextarea & JSXBase.HTMLAttributes<HTMLGoTextareaElement>;
            "go-to-top": LocalJSX.GoToTop & JSXBase.HTMLAttributes<HTMLGoToTopElement>;
            "go-toc": LocalJSX.GoToc & JSXBase.HTMLAttributes<HTMLGoTocElement>;
            "go-tooltip": LocalJSX.GoTooltip & JSXBase.HTMLAttributes<HTMLGoTooltipElement>;
        }
    }
}
