/* eslint-disable */
/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */
import { HTMLStencilElement, JSXBase } from "@stencil/core/internal";
import { BannerVariants, Breakpoints, ColorVariants, INavItem, InputType } from "./interfaces";
import { ChipVariants } from "./interfaces/variants";
import { TocProps } from "./components/go-toc/go-toc";
import { SidebarPosition } from "./patterns/go-content-layout/go-content-layout";
import { BoxiconVariants, FontAwesomeVariants, MaterialIconVariants } from "./components/go-icon/go-icon";
import { Options } from "markdown-it";
import { ActivatedTab } from "./components/go-tabs/go-tabs";
export namespace Components {
    interface GoAccordion {
        /**
          * If true, multiple `<go-accordion-item>`s can be opened at the same time
         */
        "multiple"?: boolean;
    }
    interface GoAccordionItem {
        /**
          * If the accordion item should be opened by default
         */
        "active"?: boolean;
        /**
          * If expanded height should be automatically calculated. If true, the `--go-accordion-item-body-max-height` CSS variable will be set automatically to the content height
         */
        "autoHeight"?: boolean;
        /**
          * Closes the accordion item
         */
        "close": () => Promise<void>;
        /**
          * Focus on header control
         */
        "focusOnControl": () => Promise<void>;
        /**
          * Heading text. This can be overwritten by `heading` slot
         */
        "heading"?: string;
        /**
          * The HTML tag to be applied to the heading text. This can be overwritten by `heading` slot
         */
        "headingTag"?: string;
        /**
          * Opens the accordion item.
         */
        "open": () => Promise<void>;
        /**
          * Toggle open state of accordion item
         */
        "toggle": () => Promise<void>;
    }
    interface GoBadge {
        /**
          * Number to be displayed on the badge
         */
        "count": number;
        /**
          * If true, the badge will be displayed only as a dot, no number will be shown
         */
        "dotOnly"?: boolean;
        /**
          * Provide a meaningful label for the badge
         */
        "label"?: string;
        /**
          * maximum number displayable on the badge, if count is greater than max, `{max}+` is displayed
         */
        "max": number;
        /**
          * minimum number displayable on the badge, if count is less than min, the badge will not be displayed
         */
        "min": number;
    }
    interface GoBanner {
        /**
          * If the banner can be dismissed, a close button will be rendered
         */
        "dismissible"?: boolean;
        /**
          * Heading of banner
         */
        "heading"?: string;
        /**
          * Type of banner
         */
        "variant": BannerVariants;
    }
    interface GoBreadcrumb {
        /**
          * Hide current page (last item without url) from the breadcrumb
         */
        "hideCurrent": boolean;
        /**
          * list of navigation items to be displayed
         */
        "items": INavItem[] | string;
        /**
          * The label for the navigation landmark. This is used by assistive technologies to identify the landmark.
         */
        "label": string;
    }
    interface GoButton {
        /**
          * If set, the button will take up the full width of its parent If block="{breakpoint}" is set, the button will take up the full width for the specified breakpoint. e.g. a `block="mobile"` button will display full width on mobile devices. If block="all", the button will take full width on all devices.
         */
        "block"?: Breakpoints;
        /**
          * Reduce inner gaps and outer paddings
         */
        "compact"?: boolean;
        /**
          * If this button is disabled
         */
        "disabled"?: boolean;
        /**
          * If `flat` is set, the button will have no shadow and will be filled with the background color of the selected variant
         */
        "flat"?: boolean;
        /**
          * If the button has an href, it will be rendered as an anchor tag
         */
        "href"?: string;
        /**
          * Circle shaped icon only button that has min size of 40px for touch devices
         */
        "icon"?: boolean;
        /**
          * If `outline` is true, the button will have a border based on selected variant
          * @see  `variant` property
         */
        "outline"?: boolean;
        /**
          * Outline style with filled background
         */
        "outlineFill"?: boolean;
        /**
          * If button should have pill-shaped corners
         */
        "round"?: boolean;
        /**
          * Stack elements inside the button
         */
        "stack"?: boolean;
        /**
          * Html type of the button
         */
        "type": 'submit' | 'reset' | 'button';
        /**
          * Button variants
         */
        "variant"?: ColorVariants | 'text';
    }
    interface GoButtonGroup {
        /**
          * If specified, buttons within group will be full width on smaller devices and auto-width going forward. e.g. having `block="tablet"` will make all buttons in group take up full width on mobile and tablet sizes and auto-width on larger devices.
         */
        "block"?: Breakpoints;
        /**
          * No gap between buttons.
         */
        "connected"?: boolean;
    }
    interface GoCard {
        /**
          * Show border on card
         */
        "border": boolean;
        /**
          * Subtitle of the card
         */
        "cardSubtitle"?: string;
        /**
          * Title of the card
         */
        "cardTitle"?: string;
        /**
          * Flat card without box-shadow
         */
        "flat": boolean;
        /**
          * For cards that link to destinations, one card can only link to one destination. Note: The link (`a` tag) will be applied to the card-title element, so if you don't have a `card-title` prop, you will need to manually add the `a` tag in one of the slots provided.
         */
        "href"?: string;
        /**
          * Position of featured media in the card
         */
        "mediaPosition"?: | 'top'
    | 'left'
    | 'right'
    | 'bottom'
    | 'start' // responsive top left
    | 'end';
        /**
          * when href is present, `target` attribute to be applied to the card link
         */
        "target"?: '_blank' | '_self' | '_parent' | '_top';
    }
    interface GoCardRow {
        /**
          * Number of columns from mobile breakpoint and up
         */
        "cols": number;
        /**
          * Number of columns from desktop breakpoint and up
         */
        "colsDesktop": number;
        /**
          * Number of columns from large breakpoint and up
         */
        "colsLarge": number;
        /**
          * Number of columns from tablet breakpoint and up
         */
        "colsTablet": number;
        /**
          * Heading for this card row section
         */
        "heading"?: string;
        /**
          * View more link href
         */
        "moreLinkHref"?: string;
        /**
          * View more link text
         */
        "moreLinkText"?: string;
        /**
          * By default, `go-card-row` stretches all cards inside to the tallest card in view, unless this property is set to true.
         */
        "noStretch": boolean;
        /**
          * If set, cards will fade in one by one with the specified delay in milliseconds when they are in the viewport. uses `IntersectionObserver`, [see browser compatibility](https://developer.mozilla.org/en-US/docs/Web/API/Intersection_Observer_API)
         */
        "stagger"?: number;
    }
    interface GoChip {
        /**
          * Make chip clickable, `chipClick` event will be emitted on click
         */
        "clickable"?: boolean;
        /**
          * Make chip dismissible, close button will be shown and `chipDismiss` event will be emitted when close button is clicked
         */
        "dismissible"?: boolean;
        /**
          * If `outline` is true, the button will have a border based on selected variant
          * @see  `variant` property
         */
        "outline"?: boolean;
        /**
          * Colour variant of the chip
         */
        "variant": ChipVariants;
    }
    interface GoContent {
    }
    interface GoContentLayout {
        "breadcrumbs"?: INavItem[] | string;
        "heroImgAlt"?: string;
        "heroImgSrc"?: string;
        "initToc": () => Promise<void>;
        "intro"?: string;
        /**
          * no hero banner
         */
        "noHero"?: boolean;
        "pageHeading": string;
        "preHeading"?: string;
        "sidebarDesktopPosition"?: SidebarPosition;
        "sidebarMobilePosition"?: SidebarPosition;
        "sidebarSticky"?: boolean;
        "toc"?: boolean;
        "tocProps"?: TocProps;
    }
    interface GoDialog {
        /**
          * If this dialog is active
         */
        "active": boolean;
        "close": () => Promise<void>;
        /**
          * Heading of the overlay content
         */
        "heading"?: string;
        "open": () => Promise<void>;
        /**
          * If persistent, the overlay will not be closed when the user clicks outside of it or presses the escape key.
         */
        "persistent": boolean;
        /**
          * Accessible role of the dialog, can be dialog or alertdialog
         */
        "role": 'dialog' | 'alertdialog';
    }
    interface GoDropdown {
        /**
          * closes dropdown
         */
        "close": () => Promise<void>;
        "init": () => Promise<void>;
        /**
          * keep track of active state
         */
        "isActive": boolean;
        /**
          * opens dropdown
         */
        "open": () => Promise<void>;
        /**
          * Query selector string for the trigger element.
         */
        "triggerId": string;
    }
    interface GoFooter {
        /**
          * Dark theme footer
         */
        "dark"?: boolean;
        /**
          * Navigation links to be displayed.
         */
        "links": INavItem[] | string;
        /**
          * Number of navigation columns
         */
        "navCols"?: number;
        /**
          * Number of navigation columns for desktop and up
         */
        "navColsDesktop"?: number;
        /**
          * Number of navigation columns for tablet and up
         */
        "navColsTablet"?: number;
        /**
          * Label for navigation
         */
        "navLabel"?: string;
    }
    interface GoGovAuLogo {
        /**
          * Set height of the logo group. Slots will be scaled to this height. Width is set to auto to avoid image distortion.
         */
        "height": string;
        /**
          * If href is provided, logo will be wrapped inside an anchor (`a`) tag. By default, all attributes except `class` and `style` are passed through to the anchor tag.
         */
        "href"?: string;
    }
    interface GoHeaderBar {
        /**
          * Controls at which breakpoint the mobile menu (go-nav-drawer) becomes main nav menu (go-main-nav)
         */
        "breakpoint": Breakpoints;
    }
    interface GoHero {
        /**
          * Breadcrumb navigation items
         */
        "breadcrumbs"?: INavItem[] | string;
        /**
          * Hero heading (h1)
         */
        "heading": string;
        /**
          * if we should hide hero img on mobile(`full-width-bg` slot not affected)
         */
        "hideImgOnMobile": boolean;
        /**
          * hero image alt text (requires img-src attribute to be present to render)
         */
        "imgAlt"?: string;
        /**
          * hero image src url (requires img-alt attribute to be present to render)
         */
        "imgSrc"?: string;
        /**
          * Pre heading text - use only when required
         */
        "preHeading"?: string;
    }
    interface GoIcon {
        /**
          * Color of the icon,  supports CSS units and variables. Default: `currentColor`
         */
        "color"?: string;
        /**
          * Specify the icon set being referenced. Icon font CSS files must be included in the page.
         */
        "iconSet": MaterialIconVariants | FontAwesomeVariants | BoxiconVariants;
        /**
          * provide label for screen reader
         */
        "label"?: string;
        /**
          * Name of the icon
         */
        "name": string;
        /**
          * Size of the icon, supports CSS units and variables. Default: 1.5em for material icons, 1em for other icon sets.
         */
        "size"?: string;
    }
    interface GoInput {
        /**
          * If the input is disabled
         */
        "disabled"?: boolean;
        /**
          * Error state of input, text provided will be shown as error message
         */
        "error"?: boolean | string;
        /**
          * Hint message for the input
         */
        "hint"?: string;
        /**
          * Label of the input field
         */
        "label": string;
        /**
          * Name of the input field
         */
        "name": string;
        /**
          * If this input is read-only
         */
        "readonly"?: boolean;
        /**
          * Type of this input field `go-input` support only the types that is considered "single-line of text" For other types, check other form components.
         */
        "type"?: InputType;
        /**
          * Value of the input
         */
        "value": any;
    }
    interface GoLink {
        "expandClickableArea"?: boolean;
        /**
          * The `href` of the link.
         */
        "href": string;
        /**
          * The `target` of the link.
         */
        "target"?: '_blank' | '_self' | '_parent' | '_top';
    }
    interface GoMainNav {
        /**
          * Initialise the menu
          * @param items menu items to be rendered
         */
        "init": (newItems: INavItem[] | string) => Promise<void>;
        /**
          * Navigation items to be rendered if provided, slot content will not be rendered.
         */
        "items"?: INavItem[] | string;
        /**
          * Label for the navigation. This helps screen reader users to quickly navigate to teh correct nav landmark
         */
        "label": string;
    }
    interface GoMd {
        /**
          * Markdown content to be rendered
         */
        "content": string;
        /**
          * Render inline markdown
         */
        "inline"?: boolean;
        /**
          * [markdown-it](https://github.com/markdown-it/markdown-it) options **Note**: if `use-go-ui` is set to true, these options will be overwritten
         */
        "mdOptions"?: Options | string;
        /**
          * If set to true, `go-md` will use [DOMPurify](https://nodei.co/npm/dompurify/) to sanitise the output HTML before inserting it into the DOM
         */
        "sanitise"?: boolean;
        /**
          * url to load remote markdown content if `src` is set, content in the `content` prop will be overwritten
         */
        "src": string;
        /**
          * Use go-ui markdown renderer: - Only `typographer` is enabled in markdown-it options  - linkify with [`go-link`](https://go-ui.com/docs/components/go-link) - [container](https://github.com/markdown-it/markdown-it-container) banners with [`go-banner`](https://go-ui.com/docs/components/go-banner)
         */
        "useGoUi"?: boolean;
    }
    interface GoNavDrawer {
        /**
          * keep track of open state of drawer
         */
        "active": boolean;
        /**
          * if true, clicking on nav item will close the drawer automatically
         */
        "autoClose": boolean;
        "close": () => Promise<void>;
        /**
          * Initialise the menu
          * @param items menu items to be rendered
         */
        "init": (newItems: INavItem[] | string) => Promise<void>;
        /**
          * Navigation items to be rendered
         */
        "items"?: INavItem[] | string;
        /**
          * label for screen readers
         */
        "label": string;
        "open": () => Promise<void>;
        /**
          * Position where the navigation should appear from
         */
        "position"?: 'left' | 'right';
        "toggle": () => Promise<void>;
    }
    interface GoNavLink {
        /**
          * full width
         */
        "block": boolean;
        /**
          * navigation item
         */
        "item": INavItem;
        /**
          * show arrow at the end of the link
         */
        "showArrow": boolean;
    }
    interface GoNavList {
        /**
          * Make the list full width
         */
        "block": boolean;
        /**
          * Make all sub lists (if any) expanded by default
         */
        "expandSubLists": boolean;
        /**
          * Heading text
         */
        "heading": string;
        /**
          * Heading navigation item
         */
        "headingItem": INavItem | string;
        /**
          * list of navigation items to be displayed uuuuuu
         */
        "items": INavItem[] | string;
    }
    interface GoOverlay {
        "active": boolean;
        "close": () => Promise<void>;
        "open": () => Promise<void>;
        /**
          * If persistent, the overlay will not be closed when the user clicks outside of it or presses the escape key.
         */
        "persistent": boolean;
    }
    interface GoProgress {
        /**
          * Set progress to indeterminate state
         */
        "indeterminate"?: boolean;
        /**
          * Descriptive label for screen readers to identify the progress bar
         */
        "label"?: string;
        /**
          * Id of the label element for the progress bar
         */
        "labelledby"?: string;
        /**
          * Total amount of work required for progress to complete
         */
        "max"?: number;
        /**
          * min value of the progress bar
         */
        "min"?: number;
        /**
          * Display percentage of completion
         */
        "showPercentage"?: boolean;
        /**
          * How much of the task that has been completed
         */
        "value"?: number;
    }
    interface GoSearchBar {
        "closeSearchForm": () => Promise<void>;
        "openSearchForm": () => Promise<void>;
    }
    interface GoSkipLink {
        /**
          * Tell skip link which element to focus (supports any query selector)
         */
        "target"?: string;
    }
    interface GoSpinner {
        /**
          * Set the base color of the spinner.
         */
        "baseColor"?: string;
        /**
          * Set how long it should take to complete one full rotation in milliseconds.
         */
        "duration"?: number;
        /**
          * set the loading state
         */
        "loading": boolean;
        /**
          * Set the ring color of the spinner.
         */
        "ringColor"?: string;
        /**
          * Set the width of the spinner ring
         */
        "ringWidth"?: string;
        /**
          * Set the width and height of the spinner.
         */
        "size"?: string;
        /**
          * If true, spinner and label will be stacked.
         */
        "stacked"?: boolean;
    }
    interface GoSwitch {
        /**
          * "on" label to show when `showOnOff*` is set to true
         */
        "activeLabel": string;
        "checked"?: boolean;
        "disabled"?: boolean;
        /**
          * make this field full width
         */
        "fullWidth": boolean;
        /**
          * "off" label to show when `showOnOff*` is set to true
         */
        "inactiveLabel": string;
        "label": string;
        "name": string;
        /**
          * show on/off text in switch toggle
         */
        "showOnOff": boolean;
        /**
          * show on/off text next to the switch toggle
         */
        "showOnOffOutside": boolean;
        /**
          * Display label on top of switch
         */
        "stack": boolean;
        "value": any;
    }
    interface GoTab {
        /**
          * If this tab is currently active if multiple `go-tab` are active in the same `go-tabs`, first one is active.
         */
        "active": boolean;
        "label": string;
        /**
          * id for the tab panel element If not provided, a unique id will be generated.
         */
        "panelId"?: string;
        /**
          * `id` for the tab button element. If not provided, a unique id will be generated.
         */
        "tabId"?: string;
    }
    interface GoTableWrapper {
        /**
          * Bordered table
         */
        "bordered": boolean;
        /**
          * Hoverable rows
         */
        "hoverable": boolean;
        /**
          * Striped rows
         */
        "striped": boolean;
    }
    interface GoTabs {
        /**
          * By default, tabs are automatically activated and their panel is displayed when they receive focus. If `manual` is true, users need to activate a tab by pressing the Enter or Space key.
         */
        "manual": boolean;
        /**
          * Provides a label that describes the purpose of the set of tabs.
         */
        "tabGroupLabel"?: string;
        /**
          * Set tabs orientation to vertical
         */
        "vertical": boolean;
    }
    interface GoToTop {
        /**
          * how far from the top of the page the button should be shown (in px)
         */
        "offset": number;
    }
    interface GoToc {
        /**
          * Query the DOM and generate TOC If content in scope is dynamically loaded, it may not be available when this toc component loads. call this `init` method and have the toc regenerate the links
          * @returns void
         */
        "init": () => Promise<void>;
        /**
          * Label for the TOC
         */
        "label"?: string;
        /**
          * Custom classes to be applied to the label
         */
        "labelClass"?: string;
        /**
          * Selector for the TOC items
         */
        "selector"?: string;
    }
    interface GoTooltip {
        /**
          * Add arrow to the tooltip
         */
        "arrow": boolean;
        /**
          * hide tooltip
         */
        "hide": () => Promise<void>;
        /**
          * Improve positioning for inline trigger elements that span over multiple lines. Reference: https://floating-ui.com/docs/inline
         */
        "inline": boolean;
        /**
          * placement of tooltip relative to the trigger element
         */
        "placement": 'top' | 'bottom' | 'left' | 'right';
        /**
          * show tooltip
         */
        "show": () => Promise<void>;
        /**
          * Query selector string for the trigger element
         */
        "triggerId": string;
    }
}
export interface GoAccordionItemCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLGoAccordionItemElement;
}
export interface GoBannerCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLGoBannerElement;
}
export interface GoChipCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLGoChipElement;
}
export interface GoMainNavCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLGoMainNavElement;
}
export interface GoMdCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLGoMdElement;
}
export interface GoNavDrawerCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLGoNavDrawerElement;
}
export interface GoNavLinkCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLGoNavLinkElement;
}
export interface GoOverlayCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLGoOverlayElement;
}
export interface GoTabsCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLGoTabsElement;
}
declare global {
    interface HTMLGoAccordionElement extends Components.GoAccordion, HTMLStencilElement {
    }
    var HTMLGoAccordionElement: {
        prototype: HTMLGoAccordionElement;
        new (): HTMLGoAccordionElement;
    };
    interface HTMLGoAccordionItemElement extends Components.GoAccordionItem, HTMLStencilElement {
    }
    var HTMLGoAccordionItemElement: {
        prototype: HTMLGoAccordionItemElement;
        new (): HTMLGoAccordionItemElement;
    };
    interface HTMLGoBadgeElement extends Components.GoBadge, HTMLStencilElement {
    }
    var HTMLGoBadgeElement: {
        prototype: HTMLGoBadgeElement;
        new (): HTMLGoBadgeElement;
    };
    interface HTMLGoBannerElement extends Components.GoBanner, HTMLStencilElement {
    }
    var HTMLGoBannerElement: {
        prototype: HTMLGoBannerElement;
        new (): HTMLGoBannerElement;
    };
    interface HTMLGoBreadcrumbElement extends Components.GoBreadcrumb, HTMLStencilElement {
    }
    var HTMLGoBreadcrumbElement: {
        prototype: HTMLGoBreadcrumbElement;
        new (): HTMLGoBreadcrumbElement;
    };
    interface HTMLGoButtonElement extends Components.GoButton, HTMLStencilElement {
    }
    var HTMLGoButtonElement: {
        prototype: HTMLGoButtonElement;
        new (): HTMLGoButtonElement;
    };
    interface HTMLGoButtonGroupElement extends Components.GoButtonGroup, HTMLStencilElement {
    }
    var HTMLGoButtonGroupElement: {
        prototype: HTMLGoButtonGroupElement;
        new (): HTMLGoButtonGroupElement;
    };
    interface HTMLGoCardElement extends Components.GoCard, HTMLStencilElement {
    }
    var HTMLGoCardElement: {
        prototype: HTMLGoCardElement;
        new (): HTMLGoCardElement;
    };
    interface HTMLGoCardRowElement extends Components.GoCardRow, HTMLStencilElement {
    }
    var HTMLGoCardRowElement: {
        prototype: HTMLGoCardRowElement;
        new (): HTMLGoCardRowElement;
    };
    interface HTMLGoChipElement extends Components.GoChip, HTMLStencilElement {
    }
    var HTMLGoChipElement: {
        prototype: HTMLGoChipElement;
        new (): HTMLGoChipElement;
    };
    interface HTMLGoContentElement extends Components.GoContent, HTMLStencilElement {
    }
    var HTMLGoContentElement: {
        prototype: HTMLGoContentElement;
        new (): HTMLGoContentElement;
    };
    interface HTMLGoContentLayoutElement extends Components.GoContentLayout, HTMLStencilElement {
    }
    var HTMLGoContentLayoutElement: {
        prototype: HTMLGoContentLayoutElement;
        new (): HTMLGoContentLayoutElement;
    };
    interface HTMLGoDialogElement extends Components.GoDialog, HTMLStencilElement {
    }
    var HTMLGoDialogElement: {
        prototype: HTMLGoDialogElement;
        new (): HTMLGoDialogElement;
    };
    interface HTMLGoDropdownElement extends Components.GoDropdown, HTMLStencilElement {
    }
    var HTMLGoDropdownElement: {
        prototype: HTMLGoDropdownElement;
        new (): HTMLGoDropdownElement;
    };
    interface HTMLGoFooterElement extends Components.GoFooter, HTMLStencilElement {
    }
    var HTMLGoFooterElement: {
        prototype: HTMLGoFooterElement;
        new (): HTMLGoFooterElement;
    };
    interface HTMLGoGovAuLogoElement extends Components.GoGovAuLogo, HTMLStencilElement {
    }
    var HTMLGoGovAuLogoElement: {
        prototype: HTMLGoGovAuLogoElement;
        new (): HTMLGoGovAuLogoElement;
    };
    interface HTMLGoHeaderBarElement extends Components.GoHeaderBar, HTMLStencilElement {
    }
    var HTMLGoHeaderBarElement: {
        prototype: HTMLGoHeaderBarElement;
        new (): HTMLGoHeaderBarElement;
    };
    interface HTMLGoHeroElement extends Components.GoHero, HTMLStencilElement {
    }
    var HTMLGoHeroElement: {
        prototype: HTMLGoHeroElement;
        new (): HTMLGoHeroElement;
    };
    interface HTMLGoIconElement extends Components.GoIcon, HTMLStencilElement {
    }
    var HTMLGoIconElement: {
        prototype: HTMLGoIconElement;
        new (): HTMLGoIconElement;
    };
    interface HTMLGoInputElement extends Components.GoInput, HTMLStencilElement {
    }
    var HTMLGoInputElement: {
        prototype: HTMLGoInputElement;
        new (): HTMLGoInputElement;
    };
    interface HTMLGoLinkElement extends Components.GoLink, HTMLStencilElement {
    }
    var HTMLGoLinkElement: {
        prototype: HTMLGoLinkElement;
        new (): HTMLGoLinkElement;
    };
    interface HTMLGoMainNavElement extends Components.GoMainNav, HTMLStencilElement {
    }
    var HTMLGoMainNavElement: {
        prototype: HTMLGoMainNavElement;
        new (): HTMLGoMainNavElement;
    };
    interface HTMLGoMdElement extends Components.GoMd, HTMLStencilElement {
    }
    var HTMLGoMdElement: {
        prototype: HTMLGoMdElement;
        new (): HTMLGoMdElement;
    };
    interface HTMLGoNavDrawerElement extends Components.GoNavDrawer, HTMLStencilElement {
    }
    var HTMLGoNavDrawerElement: {
        prototype: HTMLGoNavDrawerElement;
        new (): HTMLGoNavDrawerElement;
    };
    interface HTMLGoNavLinkElement extends Components.GoNavLink, HTMLStencilElement {
    }
    var HTMLGoNavLinkElement: {
        prototype: HTMLGoNavLinkElement;
        new (): HTMLGoNavLinkElement;
    };
    interface HTMLGoNavListElement extends Components.GoNavList, HTMLStencilElement {
    }
    var HTMLGoNavListElement: {
        prototype: HTMLGoNavListElement;
        new (): HTMLGoNavListElement;
    };
    interface HTMLGoOverlayElement extends Components.GoOverlay, HTMLStencilElement {
    }
    var HTMLGoOverlayElement: {
        prototype: HTMLGoOverlayElement;
        new (): HTMLGoOverlayElement;
    };
    interface HTMLGoProgressElement extends Components.GoProgress, HTMLStencilElement {
    }
    var HTMLGoProgressElement: {
        prototype: HTMLGoProgressElement;
        new (): HTMLGoProgressElement;
    };
    interface HTMLGoSearchBarElement extends Components.GoSearchBar, HTMLStencilElement {
    }
    var HTMLGoSearchBarElement: {
        prototype: HTMLGoSearchBarElement;
        new (): HTMLGoSearchBarElement;
    };
    interface HTMLGoSkipLinkElement extends Components.GoSkipLink, HTMLStencilElement {
    }
    var HTMLGoSkipLinkElement: {
        prototype: HTMLGoSkipLinkElement;
        new (): HTMLGoSkipLinkElement;
    };
    interface HTMLGoSpinnerElement extends Components.GoSpinner, HTMLStencilElement {
    }
    var HTMLGoSpinnerElement: {
        prototype: HTMLGoSpinnerElement;
        new (): HTMLGoSpinnerElement;
    };
    interface HTMLGoSwitchElement extends Components.GoSwitch, HTMLStencilElement {
    }
    var HTMLGoSwitchElement: {
        prototype: HTMLGoSwitchElement;
        new (): HTMLGoSwitchElement;
    };
    interface HTMLGoTabElement extends Components.GoTab, HTMLStencilElement {
    }
    var HTMLGoTabElement: {
        prototype: HTMLGoTabElement;
        new (): HTMLGoTabElement;
    };
    interface HTMLGoTableWrapperElement extends Components.GoTableWrapper, HTMLStencilElement {
    }
    var HTMLGoTableWrapperElement: {
        prototype: HTMLGoTableWrapperElement;
        new (): HTMLGoTableWrapperElement;
    };
    interface HTMLGoTabsElement extends Components.GoTabs, HTMLStencilElement {
    }
    var HTMLGoTabsElement: {
        prototype: HTMLGoTabsElement;
        new (): HTMLGoTabsElement;
    };
    interface HTMLGoToTopElement extends Components.GoToTop, HTMLStencilElement {
    }
    var HTMLGoToTopElement: {
        prototype: HTMLGoToTopElement;
        new (): HTMLGoToTopElement;
    };
    interface HTMLGoTocElement extends Components.GoToc, HTMLStencilElement {
    }
    var HTMLGoTocElement: {
        prototype: HTMLGoTocElement;
        new (): HTMLGoTocElement;
    };
    interface HTMLGoTooltipElement extends Components.GoTooltip, HTMLStencilElement {
    }
    var HTMLGoTooltipElement: {
        prototype: HTMLGoTooltipElement;
        new (): HTMLGoTooltipElement;
    };
    interface HTMLElementTagNameMap {
        "go-accordion": HTMLGoAccordionElement;
        "go-accordion-item": HTMLGoAccordionItemElement;
        "go-badge": HTMLGoBadgeElement;
        "go-banner": HTMLGoBannerElement;
        "go-breadcrumb": HTMLGoBreadcrumbElement;
        "go-button": HTMLGoButtonElement;
        "go-button-group": HTMLGoButtonGroupElement;
        "go-card": HTMLGoCardElement;
        "go-card-row": HTMLGoCardRowElement;
        "go-chip": HTMLGoChipElement;
        "go-content": HTMLGoContentElement;
        "go-content-layout": HTMLGoContentLayoutElement;
        "go-dialog": HTMLGoDialogElement;
        "go-dropdown": HTMLGoDropdownElement;
        "go-footer": HTMLGoFooterElement;
        "go-gov-au-logo": HTMLGoGovAuLogoElement;
        "go-header-bar": HTMLGoHeaderBarElement;
        "go-hero": HTMLGoHeroElement;
        "go-icon": HTMLGoIconElement;
        "go-input": HTMLGoInputElement;
        "go-link": HTMLGoLinkElement;
        "go-main-nav": HTMLGoMainNavElement;
        "go-md": HTMLGoMdElement;
        "go-nav-drawer": HTMLGoNavDrawerElement;
        "go-nav-link": HTMLGoNavLinkElement;
        "go-nav-list": HTMLGoNavListElement;
        "go-overlay": HTMLGoOverlayElement;
        "go-progress": HTMLGoProgressElement;
        "go-search-bar": HTMLGoSearchBarElement;
        "go-skip-link": HTMLGoSkipLinkElement;
        "go-spinner": HTMLGoSpinnerElement;
        "go-switch": HTMLGoSwitchElement;
        "go-tab": HTMLGoTabElement;
        "go-table-wrapper": HTMLGoTableWrapperElement;
        "go-tabs": HTMLGoTabsElement;
        "go-to-top": HTMLGoToTopElement;
        "go-toc": HTMLGoTocElement;
        "go-tooltip": HTMLGoTooltipElement;
    }
}
declare namespace LocalJSX {
    interface GoAccordion {
        /**
          * If true, multiple `<go-accordion-item>`s can be opened at the same time
         */
        "multiple"?: boolean;
    }
    interface GoAccordionItem {
        /**
          * If the accordion item should be opened by default
         */
        "active"?: boolean;
        /**
          * If expanded height should be automatically calculated. If true, the `--go-accordion-item-body-max-height` CSS variable will be set automatically to the content height
         */
        "autoHeight"?: boolean;
        /**
          * Heading text. This can be overwritten by `heading` slot
         */
        "heading"?: string;
        /**
          * The HTML tag to be applied to the heading text. This can be overwritten by `heading` slot
         */
        "headingTag"?: string;
        /**
          * Emitted when accordion item has closed
         */
        "onClosed"?: (event: GoAccordionItemCustomEvent<any>) => void;
        /**
          * Emitted when accordion item started closing
         */
        "onClosing"?: (event: GoAccordionItemCustomEvent<any>) => void;
        /**
          * Emitted when accordion item has opened
         */
        "onOpened"?: (event: GoAccordionItemCustomEvent<any>) => void;
        /**
          * Emitted when accordion item started opening
         */
        "onOpening"?: (event: GoAccordionItemCustomEvent<any>) => void;
    }
    interface GoBadge {
        /**
          * Number to be displayed on the badge
         */
        "count"?: number;
        /**
          * If true, the badge will be displayed only as a dot, no number will be shown
         */
        "dotOnly"?: boolean;
        /**
          * Provide a meaningful label for the badge
         */
        "label"?: string;
        /**
          * maximum number displayable on the badge, if count is greater than max, `{max}+` is displayed
         */
        "max"?: number;
        /**
          * minimum number displayable on the badge, if count is less than min, the badge will not be displayed
         */
        "min"?: number;
    }
    interface GoBanner {
        /**
          * If the banner can be dismissed, a close button will be rendered
         */
        "dismissible"?: boolean;
        /**
          * Heading of banner
         */
        "heading"?: string;
        "onDismissed"?: (event: GoBannerCustomEvent<void>) => void;
        /**
          * Type of banner
         */
        "variant"?: BannerVariants;
    }
    interface GoBreadcrumb {
        /**
          * Hide current page (last item without url) from the breadcrumb
         */
        "hideCurrent"?: boolean;
        /**
          * list of navigation items to be displayed
         */
        "items"?: INavItem[] | string;
        /**
          * The label for the navigation landmark. This is used by assistive technologies to identify the landmark.
         */
        "label"?: string;
    }
    interface GoButton {
        /**
          * If set, the button will take up the full width of its parent If block="{breakpoint}" is set, the button will take up the full width for the specified breakpoint. e.g. a `block="mobile"` button will display full width on mobile devices. If block="all", the button will take full width on all devices.
         */
        "block"?: Breakpoints;
        /**
          * Reduce inner gaps and outer paddings
         */
        "compact"?: boolean;
        /**
          * If this button is disabled
         */
        "disabled"?: boolean;
        /**
          * If `flat` is set, the button will have no shadow and will be filled with the background color of the selected variant
         */
        "flat"?: boolean;
        /**
          * If the button has an href, it will be rendered as an anchor tag
         */
        "href"?: string;
        /**
          * Circle shaped icon only button that has min size of 40px for touch devices
         */
        "icon"?: boolean;
        /**
          * If `outline` is true, the button will have a border based on selected variant
          * @see  `variant` property
         */
        "outline"?: boolean;
        /**
          * Outline style with filled background
         */
        "outlineFill"?: boolean;
        /**
          * If button should have pill-shaped corners
         */
        "round"?: boolean;
        /**
          * Stack elements inside the button
         */
        "stack"?: boolean;
        /**
          * Html type of the button
         */
        "type"?: 'submit' | 'reset' | 'button';
        /**
          * Button variants
         */
        "variant"?: ColorVariants | 'text';
    }
    interface GoButtonGroup {
        /**
          * If specified, buttons within group will be full width on smaller devices and auto-width going forward. e.g. having `block="tablet"` will make all buttons in group take up full width on mobile and tablet sizes and auto-width on larger devices.
         */
        "block"?: Breakpoints;
        /**
          * No gap between buttons.
         */
        "connected"?: boolean;
    }
    interface GoCard {
        /**
          * Show border on card
         */
        "border"?: boolean;
        /**
          * Subtitle of the card
         */
        "cardSubtitle"?: string;
        /**
          * Title of the card
         */
        "cardTitle"?: string;
        /**
          * Flat card without box-shadow
         */
        "flat"?: boolean;
        /**
          * For cards that link to destinations, one card can only link to one destination. Note: The link (`a` tag) will be applied to the card-title element, so if you don't have a `card-title` prop, you will need to manually add the `a` tag in one of the slots provided.
         */
        "href"?: string;
        /**
          * Position of featured media in the card
         */
        "mediaPosition"?: | 'top'
    | 'left'
    | 'right'
    | 'bottom'
    | 'start' // responsive top left
    | 'end';
        /**
          * when href is present, `target` attribute to be applied to the card link
         */
        "target"?: '_blank' | '_self' | '_parent' | '_top';
    }
    interface GoCardRow {
        /**
          * Number of columns from mobile breakpoint and up
         */
        "cols"?: number;
        /**
          * Number of columns from desktop breakpoint and up
         */
        "colsDesktop"?: number;
        /**
          * Number of columns from large breakpoint and up
         */
        "colsLarge"?: number;
        /**
          * Number of columns from tablet breakpoint and up
         */
        "colsTablet"?: number;
        /**
          * Heading for this card row section
         */
        "heading"?: string;
        /**
          * View more link href
         */
        "moreLinkHref"?: string;
        /**
          * View more link text
         */
        "moreLinkText"?: string;
        /**
          * By default, `go-card-row` stretches all cards inside to the tallest card in view, unless this property is set to true.
         */
        "noStretch"?: boolean;
        /**
          * If set, cards will fade in one by one with the specified delay in milliseconds when they are in the viewport. uses `IntersectionObserver`, [see browser compatibility](https://developer.mozilla.org/en-US/docs/Web/API/Intersection_Observer_API)
         */
        "stagger"?: number;
    }
    interface GoChip {
        /**
          * Make chip clickable, `chipClick` event will be emitted on click
         */
        "clickable"?: boolean;
        /**
          * Make chip dismissible, close button will be shown and `chipDismiss` event will be emitted when close button is clicked
         */
        "dismissible"?: boolean;
        /**
          * Emitted on chip click, only if `clickable` is true
         */
        "onChipClick"?: (event: GoChipCustomEvent<any>) => void;
        /**
          * Emitted on chip dismiss, only if `dismissible` is true
         */
        "onChipDismissed"?: (event: GoChipCustomEvent<any>) => void;
        /**
          * If `outline` is true, the button will have a border based on selected variant
          * @see  `variant` property
         */
        "outline"?: boolean;
        /**
          * Colour variant of the chip
         */
        "variant"?: ChipVariants;
    }
    interface GoContent {
    }
    interface GoContentLayout {
        "breadcrumbs"?: INavItem[] | string;
        "heroImgAlt"?: string;
        "heroImgSrc"?: string;
        "intro"?: string;
        /**
          * no hero banner
         */
        "noHero"?: boolean;
        "pageHeading"?: string;
        "preHeading"?: string;
        "sidebarDesktopPosition"?: SidebarPosition;
        "sidebarMobilePosition"?: SidebarPosition;
        "sidebarSticky"?: boolean;
        "toc"?: boolean;
        "tocProps"?: TocProps;
    }
    interface GoDialog {
        /**
          * If this dialog is active
         */
        "active"?: boolean;
        /**
          * Heading of the overlay content
         */
        "heading"?: string;
        /**
          * If persistent, the overlay will not be closed when the user clicks outside of it or presses the escape key.
         */
        "persistent"?: boolean;
        /**
          * Accessible role of the dialog, can be dialog or alertdialog
         */
        "role"?: 'dialog' | 'alertdialog';
    }
    interface GoDropdown {
        /**
          * keep track of active state
         */
        "isActive"?: boolean;
        /**
          * Query selector string for the trigger element.
         */
        "triggerId"?: string;
    }
    interface GoFooter {
        /**
          * Dark theme footer
         */
        "dark"?: boolean;
        /**
          * Navigation links to be displayed.
         */
        "links"?: INavItem[] | string;
        /**
          * Number of navigation columns
         */
        "navCols"?: number;
        /**
          * Number of navigation columns for desktop and up
         */
        "navColsDesktop"?: number;
        /**
          * Number of navigation columns for tablet and up
         */
        "navColsTablet"?: number;
        /**
          * Label for navigation
         */
        "navLabel"?: string;
    }
    interface GoGovAuLogo {
        /**
          * Set height of the logo group. Slots will be scaled to this height. Width is set to auto to avoid image distortion.
         */
        "height"?: string;
        /**
          * If href is provided, logo will be wrapped inside an anchor (`a`) tag. By default, all attributes except `class` and `style` are passed through to the anchor tag.
         */
        "href"?: string;
    }
    interface GoHeaderBar {
        /**
          * Controls at which breakpoint the mobile menu (go-nav-drawer) becomes main nav menu (go-main-nav)
         */
        "breakpoint"?: Breakpoints;
    }
    interface GoHero {
        /**
          * Breadcrumb navigation items
         */
        "breadcrumbs"?: INavItem[] | string;
        /**
          * Hero heading (h1)
         */
        "heading"?: string;
        /**
          * if we should hide hero img on mobile(`full-width-bg` slot not affected)
         */
        "hideImgOnMobile"?: boolean;
        /**
          * hero image alt text (requires img-src attribute to be present to render)
         */
        "imgAlt"?: string;
        /**
          * hero image src url (requires img-alt attribute to be present to render)
         */
        "imgSrc"?: string;
        /**
          * Pre heading text - use only when required
         */
        "preHeading"?: string;
    }
    interface GoIcon {
        /**
          * Color of the icon,  supports CSS units and variables. Default: `currentColor`
         */
        "color"?: string;
        /**
          * Specify the icon set being referenced. Icon font CSS files must be included in the page.
         */
        "iconSet"?: MaterialIconVariants | FontAwesomeVariants | BoxiconVariants;
        /**
          * provide label for screen reader
         */
        "label"?: string;
        /**
          * Name of the icon
         */
        "name"?: string;
        /**
          * Size of the icon, supports CSS units and variables. Default: 1.5em for material icons, 1em for other icon sets.
         */
        "size"?: string;
    }
    interface GoInput {
        /**
          * If the input is disabled
         */
        "disabled"?: boolean;
        /**
          * Error state of input, text provided will be shown as error message
         */
        "error"?: boolean | string;
        /**
          * Hint message for the input
         */
        "hint"?: string;
        /**
          * Label of the input field
         */
        "label"?: string;
        /**
          * Name of the input field
         */
        "name"?: string;
        /**
          * If this input is read-only
         */
        "readonly"?: boolean;
        /**
          * Type of this input field `go-input` support only the types that is considered "single-line of text" For other types, check other form components.
         */
        "type"?: InputType;
        /**
          * Value of the input
         */
        "value"?: any;
    }
    interface GoLink {
        "expandClickableArea"?: boolean;
        /**
          * The `href` of the link.
         */
        "href"?: string;
        /**
          * The `target` of the link.
         */
        "target"?: '_blank' | '_self' | '_parent' | '_top';
    }
    interface GoMainNav {
        /**
          * Navigation items to be rendered if provided, slot content will not be rendered.
         */
        "items"?: INavItem[] | string;
        /**
          * Label for the navigation. This helps screen reader users to quickly navigate to teh correct nav landmark
         */
        "label"?: string;
        "onNavigate"?: (event: GoMainNavCustomEvent<any>) => void;
    }
    interface GoMd {
        /**
          * Markdown content to be rendered
         */
        "content"?: string;
        /**
          * Render inline markdown
         */
        "inline"?: boolean;
        /**
          * [markdown-it](https://github.com/markdown-it/markdown-it) options **Note**: if `use-go-ui` is set to true, these options will be overwritten
         */
        "mdOptions"?: Options | string;
        "onInit"?: (event: GoMdCustomEvent<any>) => void;
        "onRendered"?: (event: GoMdCustomEvent<any>) => void;
        /**
          * If set to true, `go-md` will use [DOMPurify](https://nodei.co/npm/dompurify/) to sanitise the output HTML before inserting it into the DOM
         */
        "sanitise"?: boolean;
        /**
          * url to load remote markdown content if `src` is set, content in the `content` prop will be overwritten
         */
        "src"?: string;
        /**
          * Use go-ui markdown renderer: - Only `typographer` is enabled in markdown-it options  - linkify with [`go-link`](https://go-ui.com/docs/components/go-link) - [container](https://github.com/markdown-it/markdown-it-container) banners with [`go-banner`](https://go-ui.com/docs/components/go-banner)
         */
        "useGoUi"?: boolean;
    }
    interface GoNavDrawer {
        /**
          * keep track of open state of drawer
         */
        "active"?: boolean;
        /**
          * if true, clicking on nav item will close the drawer automatically
         */
        "autoClose"?: boolean;
        /**
          * Navigation items to be rendered
         */
        "items"?: INavItem[] | string;
        /**
          * label for screen readers
         */
        "label"?: string;
        /**
          * Emitted when the nav drawer is closed
         */
        "onClose"?: (event: GoNavDrawerCustomEvent<void>) => void;
        /**
          * Emitted when the nav item is clicked
         */
        "onNavItemClick"?: (event: GoNavDrawerCustomEvent<INavItem>) => void;
        /**
          * Emitted when the nav drawer is opened
         */
        "onOpen"?: (event: GoNavDrawerCustomEvent<void>) => void;
        /**
          * Position where the navigation should appear from
         */
        "position"?: 'left' | 'right';
    }
    interface GoNavLink {
        /**
          * full width
         */
        "block"?: boolean;
        /**
          * navigation item
         */
        "item"?: INavItem;
        "onNavigate"?: (event: GoNavLinkCustomEvent<any>) => void;
        /**
          * show arrow at the end of the link
         */
        "showArrow"?: boolean;
    }
    interface GoNavList {
        /**
          * Make the list full width
         */
        "block"?: boolean;
        /**
          * Make all sub lists (if any) expanded by default
         */
        "expandSubLists"?: boolean;
        /**
          * Heading text
         */
        "heading"?: string;
        /**
          * Heading navigation item
         */
        "headingItem"?: INavItem | string;
        /**
          * list of navigation items to be displayed uuuuuu
         */
        "items"?: INavItem[] | string;
    }
    interface GoOverlay {
        "active"?: boolean;
        /**
          * Emitted when the overlay is closed
         */
        "onOverlayClose"?: (event: GoOverlayCustomEvent<void>) => void;
        /**
          * Emitted when the overlay is opened
         */
        "onOverlayOpen"?: (event: GoOverlayCustomEvent<void>) => void;
        /**
          * If persistent, the overlay will not be closed when the user clicks outside of it or presses the escape key.
         */
        "persistent"?: boolean;
    }
    interface GoProgress {
        /**
          * Set progress to indeterminate state
         */
        "indeterminate"?: boolean;
        /**
          * Descriptive label for screen readers to identify the progress bar
         */
        "label"?: string;
        /**
          * Id of the label element for the progress bar
         */
        "labelledby"?: string;
        /**
          * Total amount of work required for progress to complete
         */
        "max"?: number;
        /**
          * min value of the progress bar
         */
        "min"?: number;
        /**
          * Display percentage of completion
         */
        "showPercentage"?: boolean;
        /**
          * How much of the task that has been completed
         */
        "value"?: number;
    }
    interface GoSearchBar {
    }
    interface GoSkipLink {
        /**
          * Tell skip link which element to focus (supports any query selector)
         */
        "target"?: string;
    }
    interface GoSpinner {
        /**
          * Set the base color of the spinner.
         */
        "baseColor"?: string;
        /**
          * Set how long it should take to complete one full rotation in milliseconds.
         */
        "duration"?: number;
        /**
          * set the loading state
         */
        "loading"?: boolean;
        /**
          * Set the ring color of the spinner.
         */
        "ringColor"?: string;
        /**
          * Set the width of the spinner ring
         */
        "ringWidth"?: string;
        /**
          * Set the width and height of the spinner.
         */
        "size"?: string;
        /**
          * If true, spinner and label will be stacked.
         */
        "stacked"?: boolean;
    }
    interface GoSwitch {
        /**
          * "on" label to show when `showOnOff*` is set to true
         */
        "activeLabel"?: string;
        "checked"?: boolean;
        "disabled"?: boolean;
        /**
          * make this field full width
         */
        "fullWidth"?: boolean;
        /**
          * "off" label to show when `showOnOff*` is set to true
         */
        "inactiveLabel"?: string;
        "label"?: string;
        "name"?: string;
        /**
          * show on/off text in switch toggle
         */
        "showOnOff"?: boolean;
        /**
          * show on/off text next to the switch toggle
         */
        "showOnOffOutside"?: boolean;
        /**
          * Display label on top of switch
         */
        "stack"?: boolean;
        "value"?: any;
    }
    interface GoTab {
        /**
          * If this tab is currently active if multiple `go-tab` are active in the same `go-tabs`, first one is active.
         */
        "active"?: boolean;
        "label"?: string;
        /**
          * id for the tab panel element If not provided, a unique id will be generated.
         */
        "panelId"?: string;
        /**
          * `id` for the tab button element. If not provided, a unique id will be generated.
         */
        "tabId"?: string;
    }
    interface GoTableWrapper {
        /**
          * Bordered table
         */
        "bordered"?: boolean;
        /**
          * Hoverable rows
         */
        "hoverable"?: boolean;
        /**
          * Striped rows
         */
        "striped"?: boolean;
    }
    interface GoTabs {
        /**
          * By default, tabs are automatically activated and their panel is displayed when they receive focus. If `manual` is true, users need to activate a tab by pressing the Enter or Space key.
         */
        "manual"?: boolean;
        /**
          * tab change event
          * @param ActivatedTab , tabEl, panelEl}
         */
        "onTabChange"?: (event: GoTabsCustomEvent<ActivatedTab>) => void;
        /**
          * Provides a label that describes the purpose of the set of tabs.
         */
        "tabGroupLabel"?: string;
        /**
          * Set tabs orientation to vertical
         */
        "vertical"?: boolean;
    }
    interface GoToTop {
        /**
          * how far from the top of the page the button should be shown (in px)
         */
        "offset"?: number;
    }
    interface GoToc {
        /**
          * Label for the TOC
         */
        "label"?: string;
        /**
          * Custom classes to be applied to the label
         */
        "labelClass"?: string;
        /**
          * Selector for the TOC items
         */
        "selector"?: string;
    }
    interface GoTooltip {
        /**
          * Add arrow to the tooltip
         */
        "arrow"?: boolean;
        /**
          * Improve positioning for inline trigger elements that span over multiple lines. Reference: https://floating-ui.com/docs/inline
         */
        "inline"?: boolean;
        /**
          * placement of tooltip relative to the trigger element
         */
        "placement"?: 'top' | 'bottom' | 'left' | 'right';
        /**
          * Query selector string for the trigger element
         */
        "triggerId"?: string;
    }
    interface IntrinsicElements {
        "go-accordion": GoAccordion;
        "go-accordion-item": GoAccordionItem;
        "go-badge": GoBadge;
        "go-banner": GoBanner;
        "go-breadcrumb": GoBreadcrumb;
        "go-button": GoButton;
        "go-button-group": GoButtonGroup;
        "go-card": GoCard;
        "go-card-row": GoCardRow;
        "go-chip": GoChip;
        "go-content": GoContent;
        "go-content-layout": GoContentLayout;
        "go-dialog": GoDialog;
        "go-dropdown": GoDropdown;
        "go-footer": GoFooter;
        "go-gov-au-logo": GoGovAuLogo;
        "go-header-bar": GoHeaderBar;
        "go-hero": GoHero;
        "go-icon": GoIcon;
        "go-input": GoInput;
        "go-link": GoLink;
        "go-main-nav": GoMainNav;
        "go-md": GoMd;
        "go-nav-drawer": GoNavDrawer;
        "go-nav-link": GoNavLink;
        "go-nav-list": GoNavList;
        "go-overlay": GoOverlay;
        "go-progress": GoProgress;
        "go-search-bar": GoSearchBar;
        "go-skip-link": GoSkipLink;
        "go-spinner": GoSpinner;
        "go-switch": GoSwitch;
        "go-tab": GoTab;
        "go-table-wrapper": GoTableWrapper;
        "go-tabs": GoTabs;
        "go-to-top": GoToTop;
        "go-toc": GoToc;
        "go-tooltip": GoTooltip;
    }
}
export { LocalJSX as JSX };
declare module "@stencil/core" {
    export namespace JSX {
        interface IntrinsicElements {
            "go-accordion": LocalJSX.GoAccordion & JSXBase.HTMLAttributes<HTMLGoAccordionElement>;
            "go-accordion-item": LocalJSX.GoAccordionItem & JSXBase.HTMLAttributes<HTMLGoAccordionItemElement>;
            "go-badge": LocalJSX.GoBadge & JSXBase.HTMLAttributes<HTMLGoBadgeElement>;
            "go-banner": LocalJSX.GoBanner & JSXBase.HTMLAttributes<HTMLGoBannerElement>;
            "go-breadcrumb": LocalJSX.GoBreadcrumb & JSXBase.HTMLAttributes<HTMLGoBreadcrumbElement>;
            "go-button": LocalJSX.GoButton & JSXBase.HTMLAttributes<HTMLGoButtonElement>;
            "go-button-group": LocalJSX.GoButtonGroup & JSXBase.HTMLAttributes<HTMLGoButtonGroupElement>;
            "go-card": LocalJSX.GoCard & JSXBase.HTMLAttributes<HTMLGoCardElement>;
            "go-card-row": LocalJSX.GoCardRow & JSXBase.HTMLAttributes<HTMLGoCardRowElement>;
            "go-chip": LocalJSX.GoChip & JSXBase.HTMLAttributes<HTMLGoChipElement>;
            "go-content": LocalJSX.GoContent & JSXBase.HTMLAttributes<HTMLGoContentElement>;
            "go-content-layout": LocalJSX.GoContentLayout & JSXBase.HTMLAttributes<HTMLGoContentLayoutElement>;
            "go-dialog": LocalJSX.GoDialog & JSXBase.HTMLAttributes<HTMLGoDialogElement>;
            "go-dropdown": LocalJSX.GoDropdown & JSXBase.HTMLAttributes<HTMLGoDropdownElement>;
            "go-footer": LocalJSX.GoFooter & JSXBase.HTMLAttributes<HTMLGoFooterElement>;
            "go-gov-au-logo": LocalJSX.GoGovAuLogo & JSXBase.HTMLAttributes<HTMLGoGovAuLogoElement>;
            "go-header-bar": LocalJSX.GoHeaderBar & JSXBase.HTMLAttributes<HTMLGoHeaderBarElement>;
            "go-hero": LocalJSX.GoHero & JSXBase.HTMLAttributes<HTMLGoHeroElement>;
            "go-icon": LocalJSX.GoIcon & JSXBase.HTMLAttributes<HTMLGoIconElement>;
            "go-input": LocalJSX.GoInput & JSXBase.HTMLAttributes<HTMLGoInputElement>;
            "go-link": LocalJSX.GoLink & JSXBase.HTMLAttributes<HTMLGoLinkElement>;
            "go-main-nav": LocalJSX.GoMainNav & JSXBase.HTMLAttributes<HTMLGoMainNavElement>;
            "go-md": LocalJSX.GoMd & JSXBase.HTMLAttributes<HTMLGoMdElement>;
            "go-nav-drawer": LocalJSX.GoNavDrawer & JSXBase.HTMLAttributes<HTMLGoNavDrawerElement>;
            "go-nav-link": LocalJSX.GoNavLink & JSXBase.HTMLAttributes<HTMLGoNavLinkElement>;
            "go-nav-list": LocalJSX.GoNavList & JSXBase.HTMLAttributes<HTMLGoNavListElement>;
            "go-overlay": LocalJSX.GoOverlay & JSXBase.HTMLAttributes<HTMLGoOverlayElement>;
            "go-progress": LocalJSX.GoProgress & JSXBase.HTMLAttributes<HTMLGoProgressElement>;
            "go-search-bar": LocalJSX.GoSearchBar & JSXBase.HTMLAttributes<HTMLGoSearchBarElement>;
            "go-skip-link": LocalJSX.GoSkipLink & JSXBase.HTMLAttributes<HTMLGoSkipLinkElement>;
            "go-spinner": LocalJSX.GoSpinner & JSXBase.HTMLAttributes<HTMLGoSpinnerElement>;
            "go-switch": LocalJSX.GoSwitch & JSXBase.HTMLAttributes<HTMLGoSwitchElement>;
            "go-tab": LocalJSX.GoTab & JSXBase.HTMLAttributes<HTMLGoTabElement>;
            "go-table-wrapper": LocalJSX.GoTableWrapper & JSXBase.HTMLAttributes<HTMLGoTableWrapperElement>;
            "go-tabs": LocalJSX.GoTabs & JSXBase.HTMLAttributes<HTMLGoTabsElement>;
            "go-to-top": LocalJSX.GoToTop & JSXBase.HTMLAttributes<HTMLGoToTopElement>;
            "go-toc": LocalJSX.GoToc & JSXBase.HTMLAttributes<HTMLGoTocElement>;
            "go-tooltip": LocalJSX.GoTooltip & JSXBase.HTMLAttributes<HTMLGoTooltipElement>;
        }
    }
}
