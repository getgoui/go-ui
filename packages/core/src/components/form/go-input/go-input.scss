@import '../mixins';

:root {
  /**
    @prop --input-gap-inner:
      Inner immediately above and below input control
      - default: 0.5rem
  */
  --input-gap-inner: 0.5rem;

  /**
    @prop --input-padding-y:
      Vertical padding of input control
      - default: 0.75rem
  */
  --input-padding-y: 0.75rem;

  /**
    @prop --input-padding-x:
      Horizontal padding of input control
      - default: 0.5rem
  */
  --input-padding-x: 0.5rem;

  /**
    @prop --input-control-padding:
      Padding for input control
      - default: 0.75rem 0.5rem
  */
  --input-control-padding: var(--input-padding-y) var(--input-padding-x);

  /**
    @prop --input-radius:
      Border radius for the control
      - default: var(--radius-2)
  */
  --input-radius: var(--radius-2);

  /**
    @prop --input-border-color:
      border color of the input
      - default: var(--go-color-neutral-400)
  */
  --input-border-color: var(--go-color-neutral-400);
  /**
    @prop --input-border:
      Border style of input control
      - default: 1px solid var(--input-border-color)
  */
  --input-border: 1px solid var(--input-border-color);

  /**
    @prop --input-gap-outer:
      Outer margin of form field
      - default: 1rem
  */
  --input-gap-outer: 1rem;

  /**
    @prop --input-error-color:
      Error state color
      - default: var(--go-color-critical-600)
  */
  --input-error-color: var(--go-color-critical-600);

  /**
    @prop --input-focus-shadow:
      Shadow on focus
      - default: var(--inner-shadow-2)
  */
  --input-focus-shadow: var(--inner-shadow-2);

  /**
    @prop --input-icon-size:
      Icon size for input control
      - default: 1.5rem
  */
  --input-icon-size: 1.5rem;

  /**
    @prop --input-text-disabled-color:
      Text color for disabled
      - default: var(--go-color-neutral-700)
  */
  --input-text-disabled-color: var(--go-color-neutral-700);
  /**
    @prop --input-bg-disabled-color:
      Background color for disabled input control
      - default: rgba(var(--go-token-neutral-200), 0.3)
  */
  --input-bg-disabled-color: rgba(var(--go-token-neutral-200), 0.3);

  /**
    @prop --input-text-readonly-color:
      Text color for readonly input
      - default: var(--go-color-neutral-700)
  */
  --input-text-readonly-color: var(--go-color-neutral-700);
  /**
    @prop --input-bg-readonly-color:
      Background color for readonly input control
      - default: rgba(var(--go-token-neutral-200), 0.3)
  */
  --input-bg-readonly-color: rgba(var(--go-token-neutral-200), 0.3);
  /**
    @prop --input-prefix-bg:
      Background for prefix area
      - default: var(--go-color-neutral-100)
  */
  --input-prefix-bg: var(--go-color-neutral-100);
  /**
    @prop --input-prefix-text-color:
      Text color on prefix area
      - default: var(--go-color-neutral-800)
  */
  --input-prefix-text-color: var(--go-color-neutral-800);
}

@include prefer-dark {
  :root {
    --input-error-color: var(--go-color-critical-700);
  }
}
@include theme-dark {
  :root {
    --input-error-color: var(--go-color-critical-700);
  }
}

go-input {
  display: flex;
  flex-direction: column;
  gap: var(--input-gap-inner);
  margin: var(--input-gap-outer);
  line-height: 1.5rem;
  &.error {
    color: var(--input-error-color);

    .control {
      --input-border-color: var(--input-error-color);
      border-color: var(--input-error-color);
    }
  }

  // apply padding on right
  &.has-icon-after,
  &.readonly {
    .control-wrapper {
      .control {
        padding-right: calc(var(--input-icon-size) + (2 * var(--input-gap-inner)));
      }
    }
  }
  &.has-icon-before {
    .control-wrapper {
      .control {
        padding-left: calc(var(--input-icon-size) + (2 * var(--input-gap-inner)));
      }
    }
  }

  &.readonly {
    .lock-icon {
      fill: var(--input-text-readonly-color);
    }
  }
  &.disabled {
    .control {
      color: var(--input-text-disabled-color);
      background-color: var(--input-bg-disabled-color);
    }
  }

  &.has-prefix,
  &.has-suffix {
    .control-wrapper {
      display: flex;
      flex-direction: column;
    }
    @include tablet {
      .control-wrapper {
        flex-direction: row;
        flex-wrap: nowrap;
        width: 100%;
      }
      .prefix,
      .suffix {
        flex: 1;
        min-width: 10rem;
        width: auto;
        max-width: 45%;
      }
      .control {
        min-width: 55%;
      }
    }
  }
  &.has-prefix {
    .control {
      border-top-left-radius: 0;
      border-top-right-radius: 0;

      @include tablet {
        border-top-right-radius: var(--input-radius);
        border-bottom-left-radius: 0;
      }
    }
    .prefix {
      display: block;
      background: var(--input-prefix-bg);
      color: var(--input-prefix-text-color);
      padding: var(--input-control-padding);
      border: var(--input-border);
      border-top-left-radius: var(--input-radius);
      border-top-right-radius: var(--input-radius);
      border-bottom: none;
      @include tablet {
        border-bottom: var(--input-border);
        border-right: none;
        border-top-right-radius: 0;
        border-bottom-left-radius: var(--input-radius);
      }
    }
  }

  :where(.control-wrapper) {
    position: relative;
    .control {
      width: 100%;
      padding: var(--input-control-padding);
      border-radius: var(--input-radius);
      border: var(--input-border);
      outline-color: var(--input-border-color);
      overflow: hidden;
      &:focus-visible {
        @include focus-outline;
        box-shadow: var(--input-focus-shadow);
      }
    }

    .control-icon {
      position: absolute;
      top: 50%;
      transform: translateY(-50%);
      right: var(--input-gap-inner);
      width: var(--input-icon-size);
      height: var(--input-icon-size);
      &.icon-before {
        right: auto;
        left: var(--input-gap-inner);
      }
      svg {
        fill: currentColor;
      }
      > * {
        width: 100%;
      }
    }
  }
}
