'use client';

/**
 * This file was automatically generated by the Stencil React Output Target.
 * Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
 */

/* eslint-disable */

import { type ActiveTab, type ActiveTabWithPanel, type GoChangeEventDetail, type GoDarkModeCustomEvent, type GoDatepickerCustomEvent, type GoDropdownItemCustomEvent, type GoNavDrawerCustomEvent, type GoSelectCustomEvent, type GoTablistCustomEvent, type GoTabsCustomEvent, type INavItem, type Theme } from "@go-ui/core";
import { GoAccordionItem as GoAccordionItemElement, defineCustomElement as defineGoAccordionItem } from "@go-ui/core/dist/components/go-accordion-item.js";
import { GoAccordion as GoAccordionElement, defineCustomElement as defineGoAccordion } from "@go-ui/core/dist/components/go-accordion.js";
import { GoBadge as GoBadgeElement, defineCustomElement as defineGoBadge } from "@go-ui/core/dist/components/go-badge.js";
import { GoBanner as GoBannerElement, defineCustomElement as defineGoBanner } from "@go-ui/core/dist/components/go-banner.js";
import { GoBlockquote as GoBlockquoteElement, defineCustomElement as defineGoBlockquote } from "@go-ui/core/dist/components/go-blockquote.js";
import { GoBreadcrumbs as GoBreadcrumbsElement, defineCustomElement as defineGoBreadcrumbs } from "@go-ui/core/dist/components/go-breadcrumbs.js";
import { GoButtonGroup as GoButtonGroupElement, defineCustomElement as defineGoButtonGroup } from "@go-ui/core/dist/components/go-button-group.js";
import { GoButton as GoButtonElement, defineCustomElement as defineGoButton } from "@go-ui/core/dist/components/go-button.js";
import { GoCalloutSection as GoCalloutSectionElement, defineCustomElement as defineGoCalloutSection } from "@go-ui/core/dist/components/go-callout-section.js";
import { GoCardRow as GoCardRowElement, defineCustomElement as defineGoCardRow } from "@go-ui/core/dist/components/go-card-row.js";
import { GoCard as GoCardElement, defineCustomElement as defineGoCard } from "@go-ui/core/dist/components/go-card.js";
import { GoCenter as GoCenterElement, defineCustomElement as defineGoCenter } from "@go-ui/core/dist/components/go-center.js";
import { GoCheckbox as GoCheckboxElement, defineCustomElement as defineGoCheckbox } from "@go-ui/core/dist/components/go-checkbox.js";
import { GoChip as GoChipElement, defineCustomElement as defineGoChip } from "@go-ui/core/dist/components/go-chip.js";
import { GoContentLayout as GoContentLayoutElement, defineCustomElement as defineGoContentLayout } from "@go-ui/core/dist/components/go-content-layout.js";
import { GoContent as GoContentElement, defineCustomElement as defineGoContent } from "@go-ui/core/dist/components/go-content.js";
import { GoDarkMode as GoDarkModeElement, defineCustomElement as defineGoDarkMode } from "@go-ui/core/dist/components/go-dark-mode.js";
import { GoDatepicker as GoDatepickerElement, defineCustomElement as defineGoDatepicker } from "@go-ui/core/dist/components/go-datepicker.js";
import { GoDialog as GoDialogElement, defineCustomElement as defineGoDialog } from "@go-ui/core/dist/components/go-dialog.js";
import { GoDropdownItem as GoDropdownItemElement, defineCustomElement as defineGoDropdownItem } from "@go-ui/core/dist/components/go-dropdown-item.js";
import { GoDropdownMenu as GoDropdownMenuElement, defineCustomElement as defineGoDropdownMenu } from "@go-ui/core/dist/components/go-dropdown-menu.js";
import { GoDropdownSeparator as GoDropdownSeparatorElement, defineCustomElement as defineGoDropdownSeparator } from "@go-ui/core/dist/components/go-dropdown-separator.js";
import { GoDropdown as GoDropdownElement, defineCustomElement as defineGoDropdown } from "@go-ui/core/dist/components/go-dropdown.js";
import { GoField as GoFieldElement, defineCustomElement as defineGoField } from "@go-ui/core/dist/components/go-field.js";
import { GoFieldset as GoFieldsetElement, defineCustomElement as defineGoFieldset } from "@go-ui/core/dist/components/go-fieldset.js";
import { GoFooter as GoFooterElement, defineCustomElement as defineGoFooter } from "@go-ui/core/dist/components/go-footer.js";
import { GoGovAuLogo as GoGovAuLogoElement, defineCustomElement as defineGoGovAuLogo } from "@go-ui/core/dist/components/go-gov-au-logo.js";
import { GoHeaderBar as GoHeaderBarElement, defineCustomElement as defineGoHeaderBar } from "@go-ui/core/dist/components/go-header-bar.js";
import { GoHeadingRow as GoHeadingRowElement, defineCustomElement as defineGoHeadingRow } from "@go-ui/core/dist/components/go-heading-row.js";
import { GoHero as GoHeroElement, defineCustomElement as defineGoHero } from "@go-ui/core/dist/components/go-hero.js";
import { GoIcon as GoIconElement, defineCustomElement as defineGoIcon } from "@go-ui/core/dist/components/go-icon.js";
import { GoInput as GoInputElement, defineCustomElement as defineGoInput } from "@go-ui/core/dist/components/go-input.js";
import { GoLink as GoLinkElement, defineCustomElement as defineGoLink } from "@go-ui/core/dist/components/go-link.js";
import { GoMd as GoMdElement, defineCustomElement as defineGoMd } from "@go-ui/core/dist/components/go-md.js";
import { GoNavBar as GoNavBarElement, defineCustomElement as defineGoNavBar } from "@go-ui/core/dist/components/go-nav-bar.js";
import { GoNavDrawer as GoNavDrawerElement, defineCustomElement as defineGoNavDrawer } from "@go-ui/core/dist/components/go-nav-drawer.js";
import { GoNavItem as GoNavItemElement, defineCustomElement as defineGoNavItem } from "@go-ui/core/dist/components/go-nav-item.js";
import { GoNavLink as GoNavLinkElement, defineCustomElement as defineGoNavLink } from "@go-ui/core/dist/components/go-nav-link.js";
import { GoNavList as GoNavListElement, defineCustomElement as defineGoNavList } from "@go-ui/core/dist/components/go-nav-list.js";
import { GoNavSubmenuTrigger as GoNavSubmenuTriggerElement, defineCustomElement as defineGoNavSubmenuTrigger } from "@go-ui/core/dist/components/go-nav-submenu-trigger.js";
import { GoNavSubmenu as GoNavSubmenuElement, defineCustomElement as defineGoNavSubmenu } from "@go-ui/core/dist/components/go-nav-submenu.js";
import { GoOverlay as GoOverlayElement, defineCustomElement as defineGoOverlay } from "@go-ui/core/dist/components/go-overlay.js";
import { GoProgress as GoProgressElement, defineCustomElement as defineGoProgress } from "@go-ui/core/dist/components/go-progress.js";
import { GoRadio as GoRadioElement, defineCustomElement as defineGoRadio } from "@go-ui/core/dist/components/go-radio.js";
import { GoSearchBar as GoSearchBarElement, defineCustomElement as defineGoSearchBar } from "@go-ui/core/dist/components/go-search-bar.js";
import { GoSelect as GoSelectElement, defineCustomElement as defineGoSelect } from "@go-ui/core/dist/components/go-select.js";
import { GoSkipLink as GoSkipLinkElement, defineCustomElement as defineGoSkipLink } from "@go-ui/core/dist/components/go-skip-link.js";
import { GoSpinner as GoSpinnerElement, defineCustomElement as defineGoSpinner } from "@go-ui/core/dist/components/go-spinner.js";
import { GoSwitch as GoSwitchElement, defineCustomElement as defineGoSwitch } from "@go-ui/core/dist/components/go-switch.js";
import { GoTab as GoTabElement, defineCustomElement as defineGoTab } from "@go-ui/core/dist/components/go-tab.js";
import { GoTableWrapper as GoTableWrapperElement, defineCustomElement as defineGoTableWrapper } from "@go-ui/core/dist/components/go-table-wrapper.js";
import { GoTablist as GoTablistElement, defineCustomElement as defineGoTablist } from "@go-ui/core/dist/components/go-tablist.js";
import { GoTabs as GoTabsElement, defineCustomElement as defineGoTabs } from "@go-ui/core/dist/components/go-tabs.js";
import { GoTextarea as GoTextareaElement, defineCustomElement as defineGoTextarea } from "@go-ui/core/dist/components/go-textarea.js";
import { GoToTop as GoToTopElement, defineCustomElement as defineGoToTop } from "@go-ui/core/dist/components/go-to-top.js";
import { GoToc as GoTocElement, defineCustomElement as defineGoToc } from "@go-ui/core/dist/components/go-toc.js";
import { GoTooltip as GoTooltipElement, defineCustomElement as defineGoTooltip } from "@go-ui/core/dist/components/go-tooltip.js";
import type { EventName, StencilReactComponent } from '@stencil/react-output-target/runtime';
import { createComponent } from '@stencil/react-output-target/runtime';
import React from 'react';

type GoAccordionEvents = NonNullable<unknown>;

export const GoAccordion: StencilReactComponent<GoAccordionElement, GoAccordionEvents> = /*@__PURE__*/ createComponent<GoAccordionElement, GoAccordionEvents>({
    tagName: 'go-accordion',
    elementClass: GoAccordionElement,
    // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
    react: React,
    events: {} as GoAccordionEvents,
    defineCustomElement: defineGoAccordion
});

type GoAccordionItemEvents = {
    onOpened: EventName<CustomEvent<any>>,
    onOpening: EventName<CustomEvent<any>>,
    onClosed: EventName<CustomEvent<any>>,
    onClosing: EventName<CustomEvent<any>>
};

export const GoAccordionItem: StencilReactComponent<GoAccordionItemElement, GoAccordionItemEvents> = /*@__PURE__*/ createComponent<GoAccordionItemElement, GoAccordionItemEvents>({
    tagName: 'go-accordion-item',
    elementClass: GoAccordionItemElement,
    // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
    react: React,
    events: {
        onOpened: 'opened',
        onOpening: 'opening',
        onClosed: 'closed',
        onClosing: 'closing'
    } as GoAccordionItemEvents,
    defineCustomElement: defineGoAccordionItem
});

type GoBadgeEvents = NonNullable<unknown>;

export const GoBadge: StencilReactComponent<GoBadgeElement, GoBadgeEvents> = /*@__PURE__*/ createComponent<GoBadgeElement, GoBadgeEvents>({
    tagName: 'go-badge',
    elementClass: GoBadgeElement,
    // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
    react: React,
    events: {} as GoBadgeEvents,
    defineCustomElement: defineGoBadge
});

type GoBannerEvents = { onDismissed: EventName<CustomEvent<void>> };

export const GoBanner: StencilReactComponent<GoBannerElement, GoBannerEvents> = /*@__PURE__*/ createComponent<GoBannerElement, GoBannerEvents>({
    tagName: 'go-banner',
    elementClass: GoBannerElement,
    // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
    react: React,
    events: { onDismissed: 'dismissed' } as GoBannerEvents,
    defineCustomElement: defineGoBanner
});

type GoBlockquoteEvents = NonNullable<unknown>;

export const GoBlockquote: StencilReactComponent<GoBlockquoteElement, GoBlockquoteEvents> = /*@__PURE__*/ createComponent<GoBlockquoteElement, GoBlockquoteEvents>({
    tagName: 'go-blockquote',
    elementClass: GoBlockquoteElement,
    // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
    react: React,
    events: {} as GoBlockquoteEvents,
    defineCustomElement: defineGoBlockquote
});

type GoBreadcrumbsEvents = NonNullable<unknown>;

export const GoBreadcrumbs: StencilReactComponent<GoBreadcrumbsElement, GoBreadcrumbsEvents> = /*@__PURE__*/ createComponent<GoBreadcrumbsElement, GoBreadcrumbsEvents>({
    tagName: 'go-breadcrumbs',
    elementClass: GoBreadcrumbsElement,
    // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
    react: React,
    events: {} as GoBreadcrumbsEvents,
    defineCustomElement: defineGoBreadcrumbs
});

type GoButtonEvents = NonNullable<unknown>;

export const GoButton: StencilReactComponent<GoButtonElement, GoButtonEvents> = /*@__PURE__*/ createComponent<GoButtonElement, GoButtonEvents>({
    tagName: 'go-button',
    elementClass: GoButtonElement,
    // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
    react: React,
    events: {} as GoButtonEvents,
    defineCustomElement: defineGoButton
});

type GoButtonGroupEvents = NonNullable<unknown>;

export const GoButtonGroup: StencilReactComponent<GoButtonGroupElement, GoButtonGroupEvents> = /*@__PURE__*/ createComponent<GoButtonGroupElement, GoButtonGroupEvents>({
    tagName: 'go-button-group',
    elementClass: GoButtonGroupElement,
    // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
    react: React,
    events: {} as GoButtonGroupEvents,
    defineCustomElement: defineGoButtonGroup
});

type GoCalloutSectionEvents = NonNullable<unknown>;

export const GoCalloutSection: StencilReactComponent<GoCalloutSectionElement, GoCalloutSectionEvents> = /*@__PURE__*/ createComponent<GoCalloutSectionElement, GoCalloutSectionEvents>({
    tagName: 'go-callout-section',
    elementClass: GoCalloutSectionElement,
    // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
    react: React,
    events: {} as GoCalloutSectionEvents,
    defineCustomElement: defineGoCalloutSection
});

type GoCardEvents = NonNullable<unknown>;

export const GoCard: StencilReactComponent<GoCardElement, GoCardEvents> = /*@__PURE__*/ createComponent<GoCardElement, GoCardEvents>({
    tagName: 'go-card',
    elementClass: GoCardElement,
    // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
    react: React,
    events: {} as GoCardEvents,
    defineCustomElement: defineGoCard
});

type GoCardRowEvents = NonNullable<unknown>;

export const GoCardRow: StencilReactComponent<GoCardRowElement, GoCardRowEvents> = /*@__PURE__*/ createComponent<GoCardRowElement, GoCardRowEvents>({
    tagName: 'go-card-row',
    elementClass: GoCardRowElement,
    // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
    react: React,
    events: {} as GoCardRowEvents,
    defineCustomElement: defineGoCardRow
});

type GoCenterEvents = NonNullable<unknown>;

export const GoCenter: StencilReactComponent<GoCenterElement, GoCenterEvents> = /*@__PURE__*/ createComponent<GoCenterElement, GoCenterEvents>({
    tagName: 'go-center',
    elementClass: GoCenterElement,
    // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
    react: React,
    events: {} as GoCenterEvents,
    defineCustomElement: defineGoCenter
});

type GoCheckboxEvents = NonNullable<unknown>;

export const GoCheckbox: StencilReactComponent<GoCheckboxElement, GoCheckboxEvents> = /*@__PURE__*/ createComponent<GoCheckboxElement, GoCheckboxEvents>({
    tagName: 'go-checkbox',
    elementClass: GoCheckboxElement,
    // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
    react: React,
    events: {} as GoCheckboxEvents,
    defineCustomElement: defineGoCheckbox
});

type GoChipEvents = {
    onChipClick: EventName<CustomEvent<any>>,
    onChipDismissed: EventName<CustomEvent<any>>
};

export const GoChip: StencilReactComponent<GoChipElement, GoChipEvents> = /*@__PURE__*/ createComponent<GoChipElement, GoChipEvents>({
    tagName: 'go-chip',
    elementClass: GoChipElement,
    // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
    react: React,
    events: {
        onChipClick: 'chipClick',
        onChipDismissed: 'chipDismissed'
    } as GoChipEvents,
    defineCustomElement: defineGoChip
});

type GoContentEvents = NonNullable<unknown>;

export const GoContent: StencilReactComponent<GoContentElement, GoContentEvents> = /*@__PURE__*/ createComponent<GoContentElement, GoContentEvents>({
    tagName: 'go-content',
    elementClass: GoContentElement,
    // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
    react: React,
    events: {} as GoContentEvents,
    defineCustomElement: defineGoContent
});

type GoContentLayoutEvents = NonNullable<unknown>;

export const GoContentLayout: StencilReactComponent<GoContentLayoutElement, GoContentLayoutEvents> = /*@__PURE__*/ createComponent<GoContentLayoutElement, GoContentLayoutEvents>({
    tagName: 'go-content-layout',
    elementClass: GoContentLayoutElement,
    // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
    react: React,
    events: {} as GoContentLayoutEvents,
    defineCustomElement: defineGoContentLayout
});

type GoDarkModeEvents = { onThemechange: EventName<GoDarkModeCustomEvent<{ theme: Theme }>> };

export const GoDarkMode: StencilReactComponent<GoDarkModeElement, GoDarkModeEvents> = /*@__PURE__*/ createComponent<GoDarkModeElement, GoDarkModeEvents>({
    tagName: 'go-dark-mode',
    elementClass: GoDarkModeElement,
    // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
    react: React,
    events: { onThemechange: 'themechange' } as GoDarkModeEvents,
    defineCustomElement: defineGoDarkMode
});

type GoDatepickerEvents = { onGochange: EventName<GoDatepickerCustomEvent<GoChangeEventDetail<string>>> };

export const GoDatepicker: StencilReactComponent<GoDatepickerElement, GoDatepickerEvents> = /*@__PURE__*/ createComponent<GoDatepickerElement, GoDatepickerEvents>({
    tagName: 'go-datepicker',
    elementClass: GoDatepickerElement,
    // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
    react: React,
    events: { onGochange: 'gochange' } as GoDatepickerEvents,
    defineCustomElement: defineGoDatepicker
});

type GoDialogEvents = NonNullable<unknown>;

export const GoDialog: StencilReactComponent<GoDialogElement, GoDialogEvents> = /*@__PURE__*/ createComponent<GoDialogElement, GoDialogEvents>({
    tagName: 'go-dialog',
    elementClass: GoDialogElement,
    // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
    react: React,
    events: {} as GoDialogEvents,
    defineCustomElement: defineGoDialog
});

type GoDropdownEvents = {
    onOpened: EventName<CustomEvent<void>>,
    onClosed: EventName<CustomEvent<void>>
};

export const GoDropdown: StencilReactComponent<GoDropdownElement, GoDropdownEvents> = /*@__PURE__*/ createComponent<GoDropdownElement, GoDropdownEvents>({
    tagName: 'go-dropdown',
    elementClass: GoDropdownElement,
    // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
    react: React,
    events: {
        onOpened: 'opened',
        onClosed: 'closed'
    } as GoDropdownEvents,
    defineCustomElement: defineGoDropdown
});

type GoDropdownItemEvents = { onSelected: EventName<GoDropdownItemCustomEvent<HTMLElement>> };

export const GoDropdownItem: StencilReactComponent<GoDropdownItemElement, GoDropdownItemEvents> = /*@__PURE__*/ createComponent<GoDropdownItemElement, GoDropdownItemEvents>({
    tagName: 'go-dropdown-item',
    elementClass: GoDropdownItemElement,
    // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
    react: React,
    events: { onSelected: 'selected' } as GoDropdownItemEvents,
    defineCustomElement: defineGoDropdownItem
});

type GoDropdownMenuEvents = NonNullable<unknown>;

export const GoDropdownMenu: StencilReactComponent<GoDropdownMenuElement, GoDropdownMenuEvents> = /*@__PURE__*/ createComponent<GoDropdownMenuElement, GoDropdownMenuEvents>({
    tagName: 'go-dropdown-menu',
    elementClass: GoDropdownMenuElement,
    // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
    react: React,
    events: {} as GoDropdownMenuEvents,
    defineCustomElement: defineGoDropdownMenu
});

type GoDropdownSeparatorEvents = NonNullable<unknown>;

export const GoDropdownSeparator: StencilReactComponent<GoDropdownSeparatorElement, GoDropdownSeparatorEvents> = /*@__PURE__*/ createComponent<GoDropdownSeparatorElement, GoDropdownSeparatorEvents>({
    tagName: 'go-dropdown-separator',
    elementClass: GoDropdownSeparatorElement,
    // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
    react: React,
    events: {} as GoDropdownSeparatorEvents,
    defineCustomElement: defineGoDropdownSeparator
});

type GoFieldEvents = NonNullable<unknown>;

export const GoField: StencilReactComponent<GoFieldElement, GoFieldEvents> = /*@__PURE__*/ createComponent<GoFieldElement, GoFieldEvents>({
    tagName: 'go-field',
    elementClass: GoFieldElement,
    // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
    react: React,
    events: {} as GoFieldEvents,
    defineCustomElement: defineGoField
});

type GoFieldsetEvents = NonNullable<unknown>;

export const GoFieldset: StencilReactComponent<GoFieldsetElement, GoFieldsetEvents> = /*@__PURE__*/ createComponent<GoFieldsetElement, GoFieldsetEvents>({
    tagName: 'go-fieldset',
    elementClass: GoFieldsetElement,
    // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
    react: React,
    events: {} as GoFieldsetEvents,
    defineCustomElement: defineGoFieldset
});

type GoFooterEvents = NonNullable<unknown>;

export const GoFooter: StencilReactComponent<GoFooterElement, GoFooterEvents> = /*@__PURE__*/ createComponent<GoFooterElement, GoFooterEvents>({
    tagName: 'go-footer',
    elementClass: GoFooterElement,
    // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
    react: React,
    events: {} as GoFooterEvents,
    defineCustomElement: defineGoFooter
});

type GoGovAuLogoEvents = NonNullable<unknown>;

export const GoGovAuLogo: StencilReactComponent<GoGovAuLogoElement, GoGovAuLogoEvents> = /*@__PURE__*/ createComponent<GoGovAuLogoElement, GoGovAuLogoEvents>({
    tagName: 'go-gov-au-logo',
    elementClass: GoGovAuLogoElement,
    // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
    react: React,
    events: {} as GoGovAuLogoEvents,
    defineCustomElement: defineGoGovAuLogo
});

type GoHeaderBarEvents = NonNullable<unknown>;

export const GoHeaderBar: StencilReactComponent<GoHeaderBarElement, GoHeaderBarEvents> = /*@__PURE__*/ createComponent<GoHeaderBarElement, GoHeaderBarEvents>({
    tagName: 'go-header-bar',
    elementClass: GoHeaderBarElement,
    // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
    react: React,
    events: {} as GoHeaderBarEvents,
    defineCustomElement: defineGoHeaderBar
});

type GoHeadingRowEvents = NonNullable<unknown>;

export const GoHeadingRow: StencilReactComponent<GoHeadingRowElement, GoHeadingRowEvents> = /*@__PURE__*/ createComponent<GoHeadingRowElement, GoHeadingRowEvents>({
    tagName: 'go-heading-row',
    elementClass: GoHeadingRowElement,
    // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
    react: React,
    events: {} as GoHeadingRowEvents,
    defineCustomElement: defineGoHeadingRow
});

type GoHeroEvents = NonNullable<unknown>;

export const GoHero: StencilReactComponent<GoHeroElement, GoHeroEvents> = /*@__PURE__*/ createComponent<GoHeroElement, GoHeroEvents>({
    tagName: 'go-hero',
    elementClass: GoHeroElement,
    // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
    react: React,
    events: {} as GoHeroEvents,
    defineCustomElement: defineGoHero
});

type GoIconEvents = NonNullable<unknown>;

export const GoIcon: StencilReactComponent<GoIconElement, GoIconEvents> = /*@__PURE__*/ createComponent<GoIconElement, GoIconEvents>({
    tagName: 'go-icon',
    elementClass: GoIconElement,
    // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
    react: React,
    events: {} as GoIconEvents,
    defineCustomElement: defineGoIcon
});

type GoInputEvents = NonNullable<unknown>;

export const GoInput: StencilReactComponent<GoInputElement, GoInputEvents> = /*@__PURE__*/ createComponent<GoInputElement, GoInputEvents>({
    tagName: 'go-input',
    elementClass: GoInputElement,
    // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
    react: React,
    events: {} as GoInputEvents,
    defineCustomElement: defineGoInput
});

type GoLinkEvents = NonNullable<unknown>;

export const GoLink: StencilReactComponent<GoLinkElement, GoLinkEvents> = /*@__PURE__*/ createComponent<GoLinkElement, GoLinkEvents>({
    tagName: 'go-link',
    elementClass: GoLinkElement,
    // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
    react: React,
    events: {} as GoLinkEvents,
    defineCustomElement: defineGoLink
});

type GoMdEvents = {
    onInit: EventName<CustomEvent<any>>,
    onRendered: EventName<CustomEvent<any>>
};

export const GoMd: StencilReactComponent<GoMdElement, GoMdEvents> = /*@__PURE__*/ createComponent<GoMdElement, GoMdEvents>({
    tagName: 'go-md',
    elementClass: GoMdElement,
    // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
    react: React,
    events: {
        onInit: 'init',
        onRendered: 'rendered'
    } as GoMdEvents,
    defineCustomElement: defineGoMd
});

type GoNavBarEvents = NonNullable<unknown>;

export const GoNavBar: StencilReactComponent<GoNavBarElement, GoNavBarEvents> = /*@__PURE__*/ createComponent<GoNavBarElement, GoNavBarEvents>({
    tagName: 'go-nav-bar',
    elementClass: GoNavBarElement,
    // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
    react: React,
    events: {} as GoNavBarEvents,
    defineCustomElement: defineGoNavBar
});

type GoNavDrawerEvents = {
    onOpen: EventName<CustomEvent<void>>,
    onClose: EventName<CustomEvent<void>>,
    onNavItemClick: EventName<GoNavDrawerCustomEvent<INavItem>>
};

export const GoNavDrawer: StencilReactComponent<GoNavDrawerElement, GoNavDrawerEvents> = /*@__PURE__*/ createComponent<GoNavDrawerElement, GoNavDrawerEvents>({
    tagName: 'go-nav-drawer',
    elementClass: GoNavDrawerElement,
    // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
    react: React,
    events: {
        onOpen: 'open',
        onClose: 'close',
        onNavItemClick: 'navItemClick'
    } as GoNavDrawerEvents,
    defineCustomElement: defineGoNavDrawer
});

type GoNavItemEvents = {
    onNavigate: EventName<CustomEvent<any>>,
    onSubmenutoggle: EventName<CustomEvent<any>>
};

export const GoNavItem: StencilReactComponent<GoNavItemElement, GoNavItemEvents> = /*@__PURE__*/ createComponent<GoNavItemElement, GoNavItemEvents>({
    tagName: 'go-nav-item',
    elementClass: GoNavItemElement,
    // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
    react: React,
    events: {
        onNavigate: 'navigate',
        onSubmenutoggle: 'submenutoggle'
    } as GoNavItemEvents,
    defineCustomElement: defineGoNavItem
});

type GoNavLinkEvents = { onNavigate: EventName<CustomEvent<any>> };

export const GoNavLink: StencilReactComponent<GoNavLinkElement, GoNavLinkEvents> = /*@__PURE__*/ createComponent<GoNavLinkElement, GoNavLinkEvents>({
    tagName: 'go-nav-link',
    elementClass: GoNavLinkElement,
    // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
    react: React,
    events: { onNavigate: 'navigate' } as GoNavLinkEvents,
    defineCustomElement: defineGoNavLink
});

type GoNavListEvents = NonNullable<unknown>;

export const GoNavList: StencilReactComponent<GoNavListElement, GoNavListEvents> = /*@__PURE__*/ createComponent<GoNavListElement, GoNavListEvents>({
    tagName: 'go-nav-list',
    elementClass: GoNavListElement,
    // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
    react: React,
    events: {} as GoNavListEvents,
    defineCustomElement: defineGoNavList
});

type GoNavSubmenuEvents = { onToggle: EventName<CustomEvent<any>> };

export const GoNavSubmenu: StencilReactComponent<GoNavSubmenuElement, GoNavSubmenuEvents> = /*@__PURE__*/ createComponent<GoNavSubmenuElement, GoNavSubmenuEvents>({
    tagName: 'go-nav-submenu',
    elementClass: GoNavSubmenuElement,
    // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
    react: React,
    events: { onToggle: 'toggle' } as GoNavSubmenuEvents,
    defineCustomElement: defineGoNavSubmenu
});

type GoNavSubmenuTriggerEvents = NonNullable<unknown>;

export const GoNavSubmenuTrigger: StencilReactComponent<GoNavSubmenuTriggerElement, GoNavSubmenuTriggerEvents> = /*@__PURE__*/ createComponent<GoNavSubmenuTriggerElement, GoNavSubmenuTriggerEvents>({
    tagName: 'go-nav-submenu-trigger',
    elementClass: GoNavSubmenuTriggerElement,
    // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
    react: React,
    events: {} as GoNavSubmenuTriggerEvents,
    defineCustomElement: defineGoNavSubmenuTrigger
});

type GoOverlayEvents = {
    onOverlayOpen: EventName<CustomEvent<void>>,
    onOverlayClose: EventName<CustomEvent<void>>
};

export const GoOverlay: StencilReactComponent<GoOverlayElement, GoOverlayEvents> = /*@__PURE__*/ createComponent<GoOverlayElement, GoOverlayEvents>({
    tagName: 'go-overlay',
    elementClass: GoOverlayElement,
    // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
    react: React,
    events: {
        onOverlayOpen: 'overlayOpen',
        onOverlayClose: 'overlayClose'
    } as GoOverlayEvents,
    defineCustomElement: defineGoOverlay
});

type GoProgressEvents = NonNullable<unknown>;

export const GoProgress: StencilReactComponent<GoProgressElement, GoProgressEvents> = /*@__PURE__*/ createComponent<GoProgressElement, GoProgressEvents>({
    tagName: 'go-progress',
    elementClass: GoProgressElement,
    // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
    react: React,
    events: {} as GoProgressEvents,
    defineCustomElement: defineGoProgress
});

type GoRadioEvents = NonNullable<unknown>;

export const GoRadio: StencilReactComponent<GoRadioElement, GoRadioEvents> = /*@__PURE__*/ createComponent<GoRadioElement, GoRadioEvents>({
    tagName: 'go-radio',
    elementClass: GoRadioElement,
    // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
    react: React,
    events: {} as GoRadioEvents,
    defineCustomElement: defineGoRadio
});

type GoSearchBarEvents = NonNullable<unknown>;

export const GoSearchBar: StencilReactComponent<GoSearchBarElement, GoSearchBarEvents> = /*@__PURE__*/ createComponent<GoSearchBarElement, GoSearchBarEvents>({
    tagName: 'go-search-bar',
    elementClass: GoSearchBarElement,
    // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
    react: React,
    events: {} as GoSearchBarEvents,
    defineCustomElement: defineGoSearchBar
});

type GoSelectEvents = { onGochange: EventName<GoSelectCustomEvent<GoChangeEventDetail<string>>> };

export const GoSelect: StencilReactComponent<GoSelectElement, GoSelectEvents> = /*@__PURE__*/ createComponent<GoSelectElement, GoSelectEvents>({
    tagName: 'go-select',
    elementClass: GoSelectElement,
    // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
    react: React,
    events: { onGochange: 'gochange' } as GoSelectEvents,
    defineCustomElement: defineGoSelect
});

type GoSkipLinkEvents = NonNullable<unknown>;

export const GoSkipLink: StencilReactComponent<GoSkipLinkElement, GoSkipLinkEvents> = /*@__PURE__*/ createComponent<GoSkipLinkElement, GoSkipLinkEvents>({
    tagName: 'go-skip-link',
    elementClass: GoSkipLinkElement,
    // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
    react: React,
    events: {} as GoSkipLinkEvents,
    defineCustomElement: defineGoSkipLink
});

type GoSpinnerEvents = NonNullable<unknown>;

export const GoSpinner: StencilReactComponent<GoSpinnerElement, GoSpinnerEvents> = /*@__PURE__*/ createComponent<GoSpinnerElement, GoSpinnerEvents>({
    tagName: 'go-spinner',
    elementClass: GoSpinnerElement,
    // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
    react: React,
    events: {} as GoSpinnerEvents,
    defineCustomElement: defineGoSpinner
});

type GoSwitchEvents = NonNullable<unknown>;

export const GoSwitch: StencilReactComponent<GoSwitchElement, GoSwitchEvents> = /*@__PURE__*/ createComponent<GoSwitchElement, GoSwitchEvents>({
    tagName: 'go-switch',
    elementClass: GoSwitchElement,
    // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
    react: React,
    events: {} as GoSwitchEvents,
    defineCustomElement: defineGoSwitch
});

type GoTabEvents = NonNullable<unknown>;

export const GoTab: StencilReactComponent<GoTabElement, GoTabEvents> = /*@__PURE__*/ createComponent<GoTabElement, GoTabEvents>({
    tagName: 'go-tab',
    elementClass: GoTabElement,
    // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
    react: React,
    events: {} as GoTabEvents,
    defineCustomElement: defineGoTab
});

type GoTableWrapperEvents = NonNullable<unknown>;

export const GoTableWrapper: StencilReactComponent<GoTableWrapperElement, GoTableWrapperEvents> = /*@__PURE__*/ createComponent<GoTableWrapperElement, GoTableWrapperEvents>({
    tagName: 'go-table-wrapper',
    elementClass: GoTableWrapperElement,
    // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
    react: React,
    events: {} as GoTableWrapperEvents,
    defineCustomElement: defineGoTableWrapper
});

type GoTablistEvents = { onActivated: EventName<GoTablistCustomEvent<ActiveTab>> };

export const GoTablist: StencilReactComponent<GoTablistElement, GoTablistEvents> = /*@__PURE__*/ createComponent<GoTablistElement, GoTablistEvents>({
    tagName: 'go-tablist',
    elementClass: GoTablistElement,
    // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
    react: React,
    events: { onActivated: 'activated' } as GoTablistEvents,
    defineCustomElement: defineGoTablist
});

type GoTabsEvents = { onTabactivated: EventName<GoTabsCustomEvent<ActiveTabWithPanel>> };

export const GoTabs: StencilReactComponent<GoTabsElement, GoTabsEvents> = /*@__PURE__*/ createComponent<GoTabsElement, GoTabsEvents>({
    tagName: 'go-tabs',
    elementClass: GoTabsElement,
    // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
    react: React,
    events: { onTabactivated: 'tabactivated' } as GoTabsEvents,
    defineCustomElement: defineGoTabs
});

type GoTextareaEvents = NonNullable<unknown>;

export const GoTextarea: StencilReactComponent<GoTextareaElement, GoTextareaEvents> = /*@__PURE__*/ createComponent<GoTextareaElement, GoTextareaEvents>({
    tagName: 'go-textarea',
    elementClass: GoTextareaElement,
    // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
    react: React,
    events: {} as GoTextareaEvents,
    defineCustomElement: defineGoTextarea
});

type GoToTopEvents = NonNullable<unknown>;

export const GoToTop: StencilReactComponent<GoToTopElement, GoToTopEvents> = /*@__PURE__*/ createComponent<GoToTopElement, GoToTopEvents>({
    tagName: 'go-to-top',
    elementClass: GoToTopElement,
    // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
    react: React,
    events: {} as GoToTopEvents,
    defineCustomElement: defineGoToTop
});

type GoTocEvents = NonNullable<unknown>;

export const GoToc: StencilReactComponent<GoTocElement, GoTocEvents> = /*@__PURE__*/ createComponent<GoTocElement, GoTocEvents>({
    tagName: 'go-toc',
    elementClass: GoTocElement,
    // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
    react: React,
    events: {} as GoTocEvents,
    defineCustomElement: defineGoToc
});

type GoTooltipEvents = NonNullable<unknown>;

export const GoTooltip: StencilReactComponent<GoTooltipElement, GoTooltipEvents> = /*@__PURE__*/ createComponent<GoTooltipElement, GoTooltipEvents>({
    tagName: 'go-tooltip',
    elementClass: GoTooltipElement,
    // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
    react: React,
    events: {} as GoTooltipEvents,
    defineCustomElement: defineGoTooltip
});
